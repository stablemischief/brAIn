{"ast":null,"code":"import _objectSpread from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classPrivateFieldInitSpec from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _queries;\n// src/queryCache.ts\nimport { hashQueryKeyByOptions, matchQuery } from \"./utils.js\";\nimport { Query } from \"./query.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar QueryCache = (_queries = /*#__PURE__*/new WeakMap(), class QueryCache extends Subscribable {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    _classPrivateFieldInitSpec(this, _queries, void 0);\n    this.config = config;\n    _classPrivateFieldSet(_queries, this, /* @__PURE__ */new Map());\n  }\n  build(client, options, state) {\n    var _options$queryHash;\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) !== null && _options$queryHash !== void 0 ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n    return query;\n  }\n  add(query) {\n    if (!_classPrivateFieldGet(_queries, this).has(query.queryHash)) {\n      _classPrivateFieldGet(_queries, this).set(query.queryHash, query);\n      this.notify({\n        type: \"added\",\n        query\n      });\n    }\n  }\n  remove(query) {\n    const queryInMap = _classPrivateFieldGet(_queries, this).get(query.queryHash);\n    if (queryInMap) {\n      query.destroy();\n      if (queryInMap === query) {\n        _classPrivateFieldGet(_queries, this).delete(query.queryHash);\n      }\n      this.notify({\n        type: \"removed\",\n        query\n      });\n    }\n  }\n  clear() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n  get(queryHash) {\n    return _classPrivateFieldGet(_queries, this).get(queryHash);\n  }\n  getAll() {\n    return [..._classPrivateFieldGet(_queries, this).values()];\n  }\n  find(filters) {\n    const defaultedFilters = _objectSpread({\n      exact: true\n    }, filters);\n    return this.getAll().find(query => matchQuery(defaultedFilters, query));\n  }\n  findAll() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queries = this.getAll();\n    return Object.keys(filters).length > 0 ? queries.filter(query => matchQuery(filters, query)) : queries;\n  }\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n  onFocus() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n  onOnline() {\n    notifyManager.batch(() => {\n      this.getAll().forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n});\nexport { QueryCache };","map":{"version":3,"names":["hashQueryKeyByOptions","matchQuery","Query","notifyManager","Subscribable","QueryCache","_queries","WeakMap","constructor","config","arguments","length","undefined","_classPrivateFieldInitSpec","_classPrivateFieldSet","Map","build","client","options","state","_options$queryHash","queryKey","queryHash","query","get","defaultQueryOptions","defaultOptions","getQueryDefaults","add","_classPrivateFieldGet","has","set","notify","type","remove","queryInMap","destroy","delete","clear","batch","getAll","forEach","values","find","filters","defaultedFilters","_objectSpread","exact","findAll","queries","Object","keys","filter","event","listeners","listener","onFocus","onOnline"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@tanstack/query-core/src/queryCache.ts"],"sourcesContent":["import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    client: QueryClient,\n    options: WithRequired<\n      QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n      'queryKey'\n    >,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        client,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters<any> = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
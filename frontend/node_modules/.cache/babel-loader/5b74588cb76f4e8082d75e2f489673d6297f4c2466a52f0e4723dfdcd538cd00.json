{"ast":null,"code":"import _objectSpread from\"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useEffect,useRef,useState,useCallback}from'react';import{getWebSocketClient,WS_EVENTS}from'../utils/websocket';/**\n * React hook for WebSocket connection management\n */export const useWebSocket=function(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{userId,sessionId,autoConnect=true,channels=[],onMessage,onConnect,onDisconnect,onError}=options;const[state,setState]=useState({connected:false,connecting:false,error:null,lastMessage:null,subscriptions:[]});const wsClient=useRef(getWebSocketClient());const reconnectTimeoutRef=useRef();// Connect to WebSocket\nconst connect=useCallback(async()=>{if(state.connecting||state.connected)return;setState(prev=>_objectSpread(_objectSpread({},prev),{},{connecting:true,error:null}));try{await wsClient.current.connect(userId,sessionId,channels);}catch(error){console.error('WebSocket connection failed:',error);setState(prev=>_objectSpread(_objectSpread({},prev),{},{connecting:false,error:'Connection failed'}));}},[userId,sessionId,channels,state.connecting,state.connected]);// Disconnect from WebSocket\nconst disconnect=useCallback(()=>{wsClient.current.disconnect();setState(prev=>_objectSpread(_objectSpread({},prev),{},{connected:false,connecting:false,subscriptions:[]}));},[]);// Send message\nconst sendMessage=useCallback(message=>{if(state.connected){wsClient.current.sendMessage(_objectSpread(_objectSpread({},message),{},{timestamp:new Date().toISOString()}));}else{console.warn('Cannot send message: WebSocket not connected');}},[state.connected]);// Subscribe to channel\nconst subscribe=useCallback(channel=>{wsClient.current.subscribe(channel);setState(prev=>_objectSpread(_objectSpread({},prev),{},{subscriptions:[...new Set([...prev.subscriptions,channel])]}));},[]);// Unsubscribe from channel\nconst unsubscribe=useCallback(channel=>{wsClient.current.unsubscribe(channel);setState(prev=>_objectSpread(_objectSpread({},prev),{},{subscriptions:prev.subscriptions.filter(sub=>sub!==channel)}));},[]);// Set up event listeners\nuseEffect(()=>{const client=wsClient.current;const handleConnected=()=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{connected:true,connecting:false,error:null}));onConnect===null||onConnect===void 0?void 0:onConnect();};const handleDisconnected=data=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{connected:false,connecting:false,subscriptions:[]}));onDisconnect===null||onDisconnect===void 0?void 0:onDisconnect(\"\".concat(data.code,\": \").concat(data.reason));};const handleError=error=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{error:error.message||'WebSocket error',connecting:false}));onError===null||onError===void 0?void 0:onError(error);};const handleMessage=message=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{lastMessage:message}));onMessage===null||onMessage===void 0?void 0:onMessage(message);};// Add event listeners\nclient.on(WS_EVENTS.CONNECTED,handleConnected);client.on(WS_EVENTS.DISCONNECTED,handleDisconnected);client.on(WS_EVENTS.ERROR,handleError);client.on(WS_EVENTS.MESSAGE,handleMessage);// Cleanup function\nreturn()=>{client.off(WS_EVENTS.CONNECTED,handleConnected);client.off(WS_EVENTS.DISCONNECTED,handleDisconnected);client.off(WS_EVENTS.ERROR,handleError);client.off(WS_EVENTS.MESSAGE,handleMessage);};},[onConnect,onDisconnect,onError,onMessage]);// Auto-connect on mount\nuseEffect(()=>{if(autoConnect&&!state.connected&&!state.connecting){connect();}// Cleanup on unmount\nreturn()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}};},[autoConnect,connect,state.connected,state.connecting]);// Subscribe to initial channels\nuseEffect(()=>{if(state.connected&&channels.length>0){channels.forEach(channel=>{if(!state.subscriptions.includes(channel)){subscribe(channel);}});}},[state.connected,channels,state.subscriptions,subscribe]);return{connected:state.connected,connecting:state.connecting,error:state.error,lastMessage:state.lastMessage,sendMessage,subscribe,unsubscribe,connect,disconnect};};/**\n * Hook for subscribing to specific WebSocket events\n */export const useWebSocketEvent=function(eventType,callback){let deps=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];const wsClient=useRef(getWebSocketClient());useEffect(()=>{const client=wsClient.current;client.on(eventType,callback);return()=>{client.off(eventType,callback);};},[eventType,...deps]);};/**\n * Hook for processing status updates\n */export const useProcessingStatus=()=>{const[processingStatus,setProcessingStatus]=useState(null);useWebSocketEvent(WS_EVENTS.PROCESSING_STATUS,message=>{setProcessingStatus(message.payload);});return processingStatus;};/**\n * Hook for system health updates\n */export const useSystemHealth=()=>{const[systemHealth,setSystemHealth]=useState(null);useWebSocketEvent(WS_EVENTS.SYSTEM_HEALTH,message=>{setSystemHealth(message.payload);});return systemHealth;};/**\n * Hook for cost updates\n */export const useCostUpdates=()=>{const[costData,setCostData]=useState(null);useWebSocketEvent(WS_EVENTS.COST_UPDATE,message=>{setCostData(message.payload);});return costData;};/**\n * Hook for job progress updates\n */export const useJobProgress=jobId=>{const[jobProgress,setJobProgress]=useState(null);useWebSocketEvent(WS_EVENTS.JOB_PROGRESS,message=>{var _message$payload;if(!jobId||((_message$payload=message.payload)===null||_message$payload===void 0?void 0:_message$payload.job_id)===jobId){setJobProgress(message.payload);}},[jobId]);return jobProgress;};/**\n * Hook for managing WebSocket channels\n */export const useWebSocketChannels=function(){let initialChannels=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];const[channels,setChannels]=useState(initialChannels);const{subscribe,unsubscribe}=useWebSocket({channels});const addChannel=useCallback(channel=>{if(!channels.includes(channel)){setChannels(prev=>[...prev,channel]);subscribe(channel);}},[channels,subscribe]);const removeChannel=useCallback(channel=>{setChannels(prev=>prev.filter(ch=>ch!==channel));unsubscribe(channel);},[unsubscribe]);const clearChannels=useCallback(()=>{channels.forEach(channel=>unsubscribe(channel));setChannels([]);},[channels,unsubscribe]);return{channels,addChannel,removeChannel,clearChannels};};","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","getWebSocketClient","WS_EVENTS","useWebSocket","options","arguments","length","undefined","userId","sessionId","autoConnect","channels","onMessage","onConnect","onDisconnect","onError","state","setState","connected","connecting","error","lastMessage","subscriptions","wsClient","reconnectTimeoutRef","connect","prev","_objectSpread","current","console","disconnect","sendMessage","message","timestamp","Date","toISOString","warn","subscribe","channel","Set","unsubscribe","filter","sub","client","handleConnected","handleDisconnected","data","concat","code","reason","handleError","handleMessage","on","CONNECTED","DISCONNECTED","ERROR","MESSAGE","off","clearTimeout","forEach","includes","useWebSocketEvent","eventType","callback","deps","useProcessingStatus","processingStatus","setProcessingStatus","PROCESSING_STATUS","payload","useSystemHealth","systemHealth","setSystemHealth","SYSTEM_HEALTH","useCostUpdates","costData","setCostData","COST_UPDATE","useJobProgress","jobId","jobProgress","setJobProgress","JOB_PROGRESS","_message$payload","job_id","useWebSocketChannels","initialChannels","setChannels","addChannel","removeChannel","ch","clearChannels"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\nimport { WebSocketMessage, WebSocketState, UseWebSocketResult } from '../types';\nimport { getWebSocketClient, WS_EVENTS, WS_CHANNELS } from '../utils/websocket';\n\ninterface UseWebSocketOptions {\n  userId?: string;\n  sessionId?: string;\n  autoConnect?: boolean;\n  channels?: string[];\n  onMessage?: (message: WebSocketMessage) => void;\n  onConnect?: () => void;\n  onDisconnect?: (reason?: string) => void;\n  onError?: (error: any) => void;\n}\n\n/**\n * React hook for WebSocket connection management\n */\nexport const useWebSocket = (options: UseWebSocketOptions = {}): UseWebSocketResult => {\n  const {\n    userId,\n    sessionId,\n    autoConnect = true,\n    channels = [],\n    onMessage,\n    onConnect,\n    onDisconnect,\n    onError,\n  } = options;\n\n  const [state, setState] = useState<WebSocketState>({\n    connected: false,\n    connecting: false,\n    error: null,\n    lastMessage: null,\n    subscriptions: [],\n  });\n\n  const wsClient = useRef(getWebSocketClient());\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Connect to WebSocket\n  const connect = useCallback(async () => {\n    if (state.connecting || state.connected) return;\n\n    setState(prev => ({ ...prev, connecting: true, error: null }));\n\n    try {\n      await wsClient.current.connect(userId, sessionId, channels);\n    } catch (error) {\n      console.error('WebSocket connection failed:', error);\n      setState(prev => ({ \n        ...prev, \n        connecting: false, \n        error: 'Connection failed' \n      }));\n    }\n  }, [userId, sessionId, channels, state.connecting, state.connected]);\n\n  // Disconnect from WebSocket\n  const disconnect = useCallback(() => {\n    wsClient.current.disconnect();\n    setState(prev => ({ \n      ...prev, \n      connected: false, \n      connecting: false,\n      subscriptions: []\n    }));\n  }, []);\n\n  // Send message\n  const sendMessage = useCallback((message: any) => {\n    if (state.connected) {\n      wsClient.current.sendMessage({\n        ...message,\n        timestamp: new Date().toISOString(),\n      });\n    } else {\n      console.warn('Cannot send message: WebSocket not connected');\n    }\n  }, [state.connected]);\n\n  // Subscribe to channel\n  const subscribe = useCallback((channel: string) => {\n    wsClient.current.subscribe(channel);\n    setState(prev => ({\n      ...prev,\n      subscriptions: [...new Set([...prev.subscriptions, channel])]\n    }));\n  }, []);\n\n  // Unsubscribe from channel\n  const unsubscribe = useCallback((channel: string) => {\n    wsClient.current.unsubscribe(channel);\n    setState(prev => ({\n      ...prev,\n      subscriptions: prev.subscriptions.filter(sub => sub !== channel)\n    }));\n  }, []);\n\n  // Set up event listeners\n  useEffect(() => {\n    const client = wsClient.current;\n\n    const handleConnected = () => {\n      setState(prev => ({ \n        ...prev, \n        connected: true, \n        connecting: false, \n        error: null \n      }));\n      onConnect?.();\n    };\n\n    const handleDisconnected = (data: any) => {\n      setState(prev => ({ \n        ...prev, \n        connected: false, \n        connecting: false,\n        subscriptions: []\n      }));\n      onDisconnect?.(`${data.code}: ${data.reason}`);\n    };\n\n    const handleError = (error: any) => {\n      setState(prev => ({ \n        ...prev, \n        error: error.message || 'WebSocket error',\n        connecting: false \n      }));\n      onError?.(error);\n    };\n\n    const handleMessage = (message: WebSocketMessage) => {\n      setState(prev => ({ \n        ...prev, \n        lastMessage: message \n      }));\n      onMessage?.(message);\n    };\n\n    // Add event listeners\n    client.on(WS_EVENTS.CONNECTED, handleConnected);\n    client.on(WS_EVENTS.DISCONNECTED, handleDisconnected);\n    client.on(WS_EVENTS.ERROR, handleError);\n    client.on(WS_EVENTS.MESSAGE, handleMessage);\n\n    // Cleanup function\n    return () => {\n      client.off(WS_EVENTS.CONNECTED, handleConnected);\n      client.off(WS_EVENTS.DISCONNECTED, handleDisconnected);\n      client.off(WS_EVENTS.ERROR, handleError);\n      client.off(WS_EVENTS.MESSAGE, handleMessage);\n    };\n  }, [onConnect, onDisconnect, onError, onMessage]);\n\n  // Auto-connect on mount\n  useEffect(() => {\n    if (autoConnect && !state.connected && !state.connecting) {\n      connect();\n    }\n\n    // Cleanup on unmount\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [autoConnect, connect, state.connected, state.connecting]);\n\n  // Subscribe to initial channels\n  useEffect(() => {\n    if (state.connected && channels.length > 0) {\n      channels.forEach(channel => {\n        if (!state.subscriptions.includes(channel)) {\n          subscribe(channel);\n        }\n      });\n    }\n  }, [state.connected, channels, state.subscriptions, subscribe]);\n\n  return {\n    connected: state.connected,\n    connecting: state.connecting,\n    error: state.error,\n    lastMessage: state.lastMessage,\n    sendMessage,\n    subscribe,\n    unsubscribe,\n    connect,\n    disconnect,\n  };\n};\n\n/**\n * Hook for subscribing to specific WebSocket events\n */\nexport const useWebSocketEvent = (\n  eventType: string,\n  callback: (data: any) => void,\n  deps: any[] = []\n) => {\n  const wsClient = useRef(getWebSocketClient());\n\n  useEffect(() => {\n    const client = wsClient.current;\n    client.on(eventType, callback);\n\n    return () => {\n      client.off(eventType, callback);\n    };\n  }, [eventType, ...deps]);\n};\n\n/**\n * Hook for processing status updates\n */\nexport const useProcessingStatus = () => {\n  const [processingStatus, setProcessingStatus] = useState(null);\n\n  useWebSocketEvent(WS_EVENTS.PROCESSING_STATUS, (message: WebSocketMessage) => {\n    setProcessingStatus(message.payload);\n  });\n\n  return processingStatus;\n};\n\n/**\n * Hook for system health updates\n */\nexport const useSystemHealth = () => {\n  const [systemHealth, setSystemHealth] = useState(null);\n\n  useWebSocketEvent(WS_EVENTS.SYSTEM_HEALTH, (message: WebSocketMessage) => {\n    setSystemHealth(message.payload);\n  });\n\n  return systemHealth;\n};\n\n/**\n * Hook for cost updates\n */\nexport const useCostUpdates = () => {\n  const [costData, setCostData] = useState(null);\n\n  useWebSocketEvent(WS_EVENTS.COST_UPDATE, (message: WebSocketMessage) => {\n    setCostData(message.payload);\n  });\n\n  return costData;\n};\n\n/**\n * Hook for job progress updates\n */\nexport const useJobProgress = (jobId?: string) => {\n  const [jobProgress, setJobProgress] = useState(null);\n\n  useWebSocketEvent(WS_EVENTS.JOB_PROGRESS, (message: WebSocketMessage) => {\n    if (!jobId || message.payload?.job_id === jobId) {\n      setJobProgress(message.payload);\n    }\n  }, [jobId]);\n\n  return jobProgress;\n};\n\n/**\n * Hook for managing WebSocket channels\n */\nexport const useWebSocketChannels = (initialChannels: string[] = []) => {\n  const [channels, setChannels] = useState<string[]>(initialChannels);\n  const { subscribe, unsubscribe } = useWebSocket({ channels });\n\n  const addChannel = useCallback((channel: string) => {\n    if (!channels.includes(channel)) {\n      setChannels(prev => [...prev, channel]);\n      subscribe(channel);\n    }\n  }, [channels, subscribe]);\n\n  const removeChannel = useCallback((channel: string) => {\n    setChannels(prev => prev.filter(ch => ch !== channel));\n    unsubscribe(channel);\n  }, [unsubscribe]);\n\n  const clearChannels = useCallback(() => {\n    channels.forEach(channel => unsubscribe(channel));\n    setChannels([]);\n  }, [channels, unsubscribe]);\n\n  return {\n    channels,\n    addChannel,\n    removeChannel,\n    clearChannels,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
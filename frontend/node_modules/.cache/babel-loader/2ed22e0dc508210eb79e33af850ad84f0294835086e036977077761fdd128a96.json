{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _focused, _cleanup, _setup;\n// src/focusManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar FocusManager = (_focused = /*#__PURE__*/new WeakMap(), _cleanup = /*#__PURE__*/new WeakMap(), _setup = /*#__PURE__*/new WeakMap(), class FocusManager extends Subscribable {\n  constructor() {\n    super();\n    _classPrivateFieldInitSpec(this, _focused, void 0);\n    _classPrivateFieldInitSpec(this, _cleanup, void 0);\n    _classPrivateFieldInitSpec(this, _setup, void 0);\n    _classPrivateFieldSet(_setup, this, onFocus => {\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus();\n        window.addEventListener(\"visibilitychange\", listener, false);\n        return () => {\n          window.removeEventListener(\"visibilitychange\", listener);\n        };\n      }\n      return;\n    });\n  }\n  onSubscribe() {\n    if (!_classPrivateFieldGet(_cleanup, this)) {\n      this.setEventListener(_classPrivateFieldGet(_setup, this));\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _classPrivateFieldGet2;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(_cleanup, this, void 0);\n    }\n  }\n  setEventListener(setup) {\n    var _classPrivateFieldGet3;\n    _classPrivateFieldSet(_setup, this, setup);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(_cleanup, this)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(_cleanup, this, setup(focused => {\n      if (typeof focused === \"boolean\") {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    }));\n  }\n  setFocused(focused) {\n    const changed = _classPrivateFieldGet(_focused, this) !== focused;\n    if (changed) {\n      _classPrivateFieldSet(_focused, this, focused);\n      this.onFocus();\n    }\n  }\n  onFocus() {\n    const isFocused = this.isFocused();\n    this.listeners.forEach(listener => {\n      listener(isFocused);\n    });\n  }\n  isFocused() {\n    var _globalThis$document;\n    if (typeof _classPrivateFieldGet(_focused, this) === \"boolean\") {\n      return _classPrivateFieldGet(_focused, this);\n    }\n    return ((_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.visibilityState) !== \"hidden\";\n  }\n});\nvar focusManager = new FocusManager();\nexport { FocusManager, focusManager };","map":{"version":3,"names":["Subscribable","isServer","FocusManager","_focused","WeakMap","_cleanup","_setup","constructor","_classPrivateFieldInitSpec","_classPrivateFieldSet","onFocus","window","addEventListener","listener","removeEventListener","onSubscribe","_classPrivateFieldGet","setEventListener","onUnsubscribe","hasListeners","_classPrivateFieldGet2","call","setup","_classPrivateFieldGet3","focused","setFocused","changed","isFocused","listeners","forEach","_globalThis$document","globalThis","document","visibilityState","focusManager"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@tanstack/query-core/src/focusManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (focused: boolean) => void\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable<Listener> {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    const isFocused = this.isFocused()\n    this.listeners.forEach((listener) => {\n      listener(isFocused)\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n"],"mappings":";;;;;AAAA,SAASA,YAAA,QAAoB;AAC7B,SAASC,QAAA,QAAgB;AAQlB,IAAMC,YAAA,IAAAC,QAAA,oBAAAC,OAAA,IAAAC,QAAA,oBAAAD,OAAA,IAAAE,MAAA,oBAAAF,OAAA,IAAN,MAAMF,YAAA,SAAqBF,YAAA,CAAuB;EAMvDO,YAAA,EAAc;IACZ,MAAM;IANRC,0BAAA,OAAAL,QAAA;IACAK,0BAAA,OAAAH,QAAA;IAEAG,0BAAA,OAAAF,MAAA;IAIEG,qBAAA,CAAKH,MAAA,EAAL,MAAeI,OAAA,IAAY;MAGzB,IAAI,CAACT,QAAA,IAAYU,MAAA,CAAOC,gBAAA,EAAkB;QACxC,MAAMC,QAAA,GAAWA,CAAA,KAAMH,OAAA,CAAQ;QAE/BC,MAAA,CAAOC,gBAAA,CAAiB,oBAAoBC,QAAA,EAAU,KAAK;QAE3D,OAAO,MAAM;UAEXF,MAAA,CAAOG,mBAAA,CAAoB,oBAAoBD,QAAQ;QACzD;MACF;MACA;IACF,CAdK;EAeP;EAEUE,YAAA,EAAoB;IAC5B,IAAI,CAACC,qBAAA,CAAKX,QAAA,EAAL,IAAK,GAAU;MAClB,KAAKY,gBAAA,CAAiBD,qBAAA,CAAKV,MAAM,EAAX,IAAK,CAAM;IACnC;EACF;EAEUY,cAAA,EAAgB;IACxB,IAAI,CAAC,KAAKC,YAAA,CAAa,GAAG;MAAA,IAAAC,sBAAA;MACxB,CAAAA,sBAAA,GAAAJ,qBAAA,CAAKX,QAAA,EAAL,IAAK,eAAAe,sBAAA,eAAAA,sBAAA,CAAAC,IAAA,CAAL;MACAZ,qBAAA,CAAKJ,QAAA,EAAL,MAAgB,MAAX;IACP;EACF;EAEAY,iBAAiBK,KAAA,EAAsB;IAAA,IAAAC,sBAAA;IACrCd,qBAAA,CAAKH,MAAA,EAAL,MAAcgB,KAAT;IACL,CAAAC,sBAAA,GAAAP,qBAAA,CAAKX,QAAA,EAAL,IAAK,eAAAkB,sBAAA,eAAAA,sBAAA,CAAAF,IAAA,CAAL;IACAZ,qBAAA,CAAKJ,QAAA,EAAL,MAAgBiB,KAAA,CAAOE,OAAA,IAAY;MACjC,IAAI,OAAOA,OAAA,KAAY,WAAW;QAChC,KAAKC,UAAA,CAAWD,OAAO;MACzB,OAAO;QACL,KAAKd,OAAA,CAAQ;MACf;IACF,CAAC,CANI;EAOP;EAEAe,WAAWD,OAAA,EAAyB;IAClC,MAAME,OAAA,GAAUV,qBAAA,CAAKb,QAAA,EAAL,IAAK,MAAaqB,OAAA;IAClC,IAAIE,OAAA,EAAS;MACXjB,qBAAA,CAAKN,QAAA,EAAL,MAAgBqB,OAAX;MACL,KAAKd,OAAA,CAAQ;IACf;EACF;EAEAA,QAAA,EAAgB;IACd,MAAMiB,SAAA,GAAY,KAAKA,SAAA,CAAU;IACjC,KAAKC,SAAA,CAAUC,OAAA,CAAShB,QAAA,IAAa;MACnCA,QAAA,CAASc,SAAS;IACpB,CAAC;EACH;EAEAA,UAAA,EAAqB;IAAA,IAAAG,oBAAA;IACnB,IAAI,OAAOd,qBAAA,CAAKb,QAAA,EAAL,IAAK,MAAa,WAAW;MACtC,OAAOa,qBAAA,CAAKb,QAAA,EAAL,IAAK;IACd;IAIA,OAAO,EAAA2B,oBAAA,GAAAC,UAAA,CAAWC,QAAA,cAAAF,oBAAA,uBAAXA,oBAAA,CAAqBG,eAAA,MAAoB;EAClD;AACF;AAEO,IAAMC,YAAA,GAAe,IAAIhC,YAAA,CAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
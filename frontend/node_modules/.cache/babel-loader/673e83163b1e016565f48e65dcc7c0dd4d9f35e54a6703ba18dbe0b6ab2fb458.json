{"ast":null,"code":"import _objectSpread from\"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{useWebSocket,useWebSocketEvent}from'../hooks/useWebSocket';import{WS_EVENTS,WS_CHANNELS}from'../utils/websocket';// State interface\n// Action types\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Initial state\nconst initialState={connected:false,connecting:false,error:null,systemHealth:null,processingStatus:null,costAnalytics:null,activeJobs:[],recentJobs:[],notifications:[],unreadCount:0,realTimeMetrics:{documentsProcessedToday:0,currentCostToday:0,averageProcessingTime:0,queueSize:0,activeConnections:0},lastUpdated:{systemHealth:null,processingStatus:null,costAnalytics:null}};// Reducer\nconst realtimeReducer=(state,action)=>{var _action$payload$daily;switch(action.type){case'SET_CONNECTION_STATUS':return _objectSpread(_objectSpread({},state),{},{connected:action.payload.connected,connecting:action.payload.connecting,error:action.payload.error||null});case'UPDATE_SYSTEM_HEALTH':return _objectSpread(_objectSpread({},state),{},{systemHealth:action.payload,lastUpdated:_objectSpread(_objectSpread({},state.lastUpdated),{},{systemHealth:new Date().toISOString()})});case'UPDATE_PROCESSING_STATUS':return _objectSpread(_objectSpread({},state),{},{processingStatus:action.payload,lastUpdated:_objectSpread(_objectSpread({},state.lastUpdated),{},{processingStatus:new Date().toISOString()}),realTimeMetrics:_objectSpread(_objectSpread({},state.realTimeMetrics),{},{queueSize:action.payload.processing_documents})});case'UPDATE_COST_ANALYTICS':return _objectSpread(_objectSpread({},state),{},{costAnalytics:action.payload,lastUpdated:_objectSpread(_objectSpread({},state.lastUpdated),{},{costAnalytics:new Date().toISOString()}),realTimeMetrics:_objectSpread(_objectSpread({},state.realTimeMetrics),{},{currentCostToday:((_action$payload$daily=action.payload.daily_costs[action.payload.daily_costs.length-1])===null||_action$payload$daily===void 0?void 0:_action$payload$daily.cost)||0})});case'UPDATE_JOB_PROGRESS':const updatedJob=action.payload;const existingJobIndex=state.activeJobs.findIndex(job=>job.id===updatedJob.id);let newActiveJobs=[...state.activeJobs];let newRecentJobs=[...state.recentJobs];if(existingJobIndex>=0){// Update existing job\nnewActiveJobs[existingJobIndex]=updatedJob;// Move completed/failed jobs to recent jobs\nif(['completed','failed','cancelled'].includes(updatedJob.status)){newActiveJobs.splice(existingJobIndex,1);newRecentJobs.unshift(updatedJob);// Keep only last 20 recent jobs\nnewRecentJobs=newRecentJobs.slice(0,20);}}return _objectSpread(_objectSpread({},state),{},{activeJobs:newActiveJobs,recentJobs:newRecentJobs});case'ADD_JOB':return _objectSpread(_objectSpread({},state),{},{activeJobs:[action.payload,...state.activeJobs]});case'REMOVE_JOB':return _objectSpread(_objectSpread({},state),{},{activeJobs:state.activeJobs.filter(job=>job.id!==action.payload)});case'ADD_NOTIFICATION':const notification=action.payload;return _objectSpread(_objectSpread({},state),{},{notifications:[notification,...state.notifications],unreadCount:notification.read?state.unreadCount:state.unreadCount+1});case'MARK_NOTIFICATION_READ':const updatedNotifications=state.notifications.map(n=>n.id===action.payload?_objectSpread(_objectSpread({},n),{},{read:true}):n);const wasUnread=state.notifications.find(n=>n.id===action.payload&&!n.read);return _objectSpread(_objectSpread({},state),{},{notifications:updatedNotifications,unreadCount:wasUnread?state.unreadCount-1:state.unreadCount});case'CLEAR_NOTIFICATIONS':return _objectSpread(_objectSpread({},state),{},{notifications:[],unreadCount:0});case'UPDATE_REAL_TIME_METRICS':return _objectSpread(_objectSpread({},state),{},{realTimeMetrics:_objectSpread(_objectSpread({},state.realTimeMetrics),action.payload)});case'SET_ERROR':return _objectSpread(_objectSpread({},state),{},{error:action.payload});default:return state;}};// Context interface\n// Create context\nconst RealtimeContext=/*#__PURE__*/createContext(undefined);// Provider props\n// Provider component\nexport const RealtimeProvider=_ref=>{let{children,userId,sessionId}=_ref;const[state,dispatch]=useReducer(realtimeReducer,initialState);// WebSocket connection with auto-subscription to relevant channels\nconst{connected,connecting,error:connectionError,sendMessage}=useWebSocket({userId,sessionId,autoConnect:true,channels:[WS_CHANNELS.PROCESSING,WS_CHANNELS.SYSTEM_HEALTH,WS_CHANNELS.COST_MONITORING,WS_CHANNELS.USER_ACTIVITY],onConnect:()=>{dispatch({type:'SET_CONNECTION_STATUS',payload:{connected:true,connecting:false}});console.log('Real-time connection established');},onDisconnect:reason=>{dispatch({type:'SET_CONNECTION_STATUS',payload:{connected:false,connecting:false,error:reason}});console.log('Real-time connection lost:',reason);},onError:error=>{dispatch({type:'SET_ERROR',payload:error.message||'Connection error'});}});// Update connection status in state\nuseEffect(()=>{dispatch({type:'SET_CONNECTION_STATUS',payload:{connected,connecting,error:connectionError}});},[connected,connecting,connectionError]);// Event handlers for different message types\nuseWebSocketEvent(WS_EVENTS.SYSTEM_HEALTH,message=>{dispatch({type:'UPDATE_SYSTEM_HEALTH',payload:message.payload});});useWebSocketEvent(WS_EVENTS.PROCESSING_STATUS,message=>{dispatch({type:'UPDATE_PROCESSING_STATUS',payload:message.payload});});useWebSocketEvent(WS_EVENTS.COST_UPDATE,message=>{dispatch({type:'UPDATE_COST_ANALYTICS',payload:message.payload});});useWebSocketEvent(WS_EVENTS.JOB_PROGRESS,message=>{dispatch({type:'UPDATE_JOB_PROGRESS',payload:message.payload});});useWebSocketEvent(WS_EVENTS.NEW_DOCUMENT,message=>{// Create notification for new document\nconst notification={id:\"doc-\".concat(Date.now()),type:'info',title:'New Document Processed',message:\"Document \\\"\".concat(message.payload.title,\"\\\" has been processed successfully\"),timestamp:new Date().toISOString(),read:false};dispatch({type:'ADD_NOTIFICATION',payload:notification});// Update metrics\ndispatch({type:'UPDATE_REAL_TIME_METRICS',payload:{documentsProcessedToday:state.realTimeMetrics.documentsProcessedToday+1}});});// Action functions\nconst markNotificationAsRead=id=>{dispatch({type:'MARK_NOTIFICATION_READ',payload:id});};const clearAllNotifications=()=>{dispatch({type:'CLEAR_NOTIFICATIONS'});};const refreshData=()=>{if(connected){sendMessage({type:'refresh_all_data'});}};const contextValue=_objectSpread(_objectSpread({},state),{},{markNotificationAsRead,clearAllNotifications,refreshData});return/*#__PURE__*/_jsx(RealtimeContext.Provider,{value:contextValue,children:children});};// Hook to use the context\nexport const useRealtime=()=>{const context=useContext(RealtimeContext);if(!context){throw new Error('useRealtime must be used within a RealtimeProvider');}return context;};// Selector hooks for specific data\nexport const useSystemHealth=()=>{const{systemHealth,lastUpdated}=useRealtime();return{systemHealth,lastUpdated:lastUpdated.systemHealth};};export const useProcessingStatus=()=>{const{processingStatus,lastUpdated}=useRealtime();return{processingStatus,lastUpdated:lastUpdated.processingStatus};};export const useCostAnalytics=()=>{const{costAnalytics,lastUpdated}=useRealtime();return{costAnalytics,lastUpdated:lastUpdated.costAnalytics};};export const useActiveJobs=()=>{const{activeJobs,recentJobs}=useRealtime();return{activeJobs,recentJobs};};export const useNotifications=()=>{const{notifications,unreadCount,markNotificationAsRead,clearAllNotifications}=useRealtime();return{notifications,unreadCount,markNotificationAsRead,clearAllNotifications};};export const useRealTimeMetrics=()=>{const{realTimeMetrics}=useRealtime();return realTimeMetrics;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useWebSocket","useWebSocketEvent","WS_EVENTS","WS_CHANNELS","jsx","_jsx","initialState","connected","connecting","error","systemHealth","processingStatus","costAnalytics","activeJobs","recentJobs","notifications","unreadCount","realTimeMetrics","documentsProcessedToday","currentCostToday","averageProcessingTime","queueSize","activeConnections","lastUpdated","realtimeReducer","state","action","_action$payload$daily","type","_objectSpread","payload","Date","toISOString","processing_documents","daily_costs","length","cost","updatedJob","existingJobIndex","findIndex","job","id","newActiveJobs","newRecentJobs","includes","status","splice","unshift","slice","filter","notification","read","updatedNotifications","map","n","wasUnread","find","RealtimeContext","undefined","RealtimeProvider","_ref","children","userId","sessionId","dispatch","connectionError","sendMessage","autoConnect","channels","PROCESSING","SYSTEM_HEALTH","COST_MONITORING","USER_ACTIVITY","onConnect","console","log","onDisconnect","reason","onError","message","PROCESSING_STATUS","COST_UPDATE","JOB_PROGRESS","NEW_DOCUMENT","concat","now","title","timestamp","markNotificationAsRead","clearAllNotifications","refreshData","contextValue","Provider","value","useRealtime","context","Error","useSystemHealth","useProcessingStatus","useCostAnalytics","useActiveJobs","useNotifications","useRealTimeMetrics"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/src/context/RealtimeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, ReactNode } from 'react';\nimport {\n  SystemHealth,\n  ProcessingStatus,\n  CostAnalytics,\n  ProcessingJob,\n  WebSocketMessage,\n  RealtimeUpdate,\n  Notification\n} from '../types';\nimport { useWebSocket, useWebSocketEvent } from '../hooks/useWebSocket';\nimport { WS_EVENTS, WS_CHANNELS } from '../utils/websocket';\n\n// State interface\ninterface RealtimeState {\n  // Connection status\n  connected: boolean;\n  connecting: boolean;\n  error: string | null;\n  \n  // System data\n  systemHealth: SystemHealth | null;\n  processingStatus: ProcessingStatus | null;\n  costAnalytics: CostAnalytics | null;\n  \n  // Processing jobs\n  activeJobs: ProcessingJob[];\n  recentJobs: ProcessingJob[];\n  \n  // Notifications\n  notifications: Notification[];\n  unreadCount: number;\n  \n  // Real-time metrics\n  realTimeMetrics: {\n    documentsProcessedToday: number;\n    currentCostToday: number;\n    averageProcessingTime: number;\n    queueSize: number;\n    activeConnections: number;\n  };\n  \n  // Last update timestamps\n  lastUpdated: {\n    systemHealth: string | null;\n    processingStatus: string | null;\n    costAnalytics: string | null;\n  };\n}\n\n// Action types\ntype RealtimeAction =\n  | { type: 'SET_CONNECTION_STATUS'; payload: { connected: boolean; connecting: boolean; error?: string | null } }\n  | { type: 'UPDATE_SYSTEM_HEALTH'; payload: SystemHealth }\n  | { type: 'UPDATE_PROCESSING_STATUS'; payload: ProcessingStatus }\n  | { type: 'UPDATE_COST_ANALYTICS'; payload: CostAnalytics }\n  | { type: 'UPDATE_JOB_PROGRESS'; payload: ProcessingJob }\n  | { type: 'ADD_JOB'; payload: ProcessingJob }\n  | { type: 'REMOVE_JOB'; payload: string }\n  | { type: 'ADD_NOTIFICATION'; payload: Notification }\n  | { type: 'MARK_NOTIFICATION_READ'; payload: string }\n  | { type: 'CLEAR_NOTIFICATIONS' }\n  | { type: 'UPDATE_REAL_TIME_METRICS'; payload: Partial<RealtimeState['realTimeMetrics']> }\n  | { type: 'SET_ERROR'; payload: string };\n\n// Initial state\nconst initialState: RealtimeState = {\n  connected: false,\n  connecting: false,\n  error: null,\n  systemHealth: null,\n  processingStatus: null,\n  costAnalytics: null,\n  activeJobs: [],\n  recentJobs: [],\n  notifications: [],\n  unreadCount: 0,\n  realTimeMetrics: {\n    documentsProcessedToday: 0,\n    currentCostToday: 0,\n    averageProcessingTime: 0,\n    queueSize: 0,\n    activeConnections: 0,\n  },\n  lastUpdated: {\n    systemHealth: null,\n    processingStatus: null,\n    costAnalytics: null,\n  },\n};\n\n// Reducer\nconst realtimeReducer = (state: RealtimeState, action: RealtimeAction): RealtimeState => {\n  switch (action.type) {\n    case 'SET_CONNECTION_STATUS':\n      return {\n        ...state,\n        connected: action.payload.connected,\n        connecting: action.payload.connecting,\n        error: action.payload.error || null,\n      };\n\n    case 'UPDATE_SYSTEM_HEALTH':\n      return {\n        ...state,\n        systemHealth: action.payload,\n        lastUpdated: {\n          ...state.lastUpdated,\n          systemHealth: new Date().toISOString(),\n        },\n      };\n\n    case 'UPDATE_PROCESSING_STATUS':\n      return {\n        ...state,\n        processingStatus: action.payload,\n        lastUpdated: {\n          ...state.lastUpdated,\n          processingStatus: new Date().toISOString(),\n        },\n        realTimeMetrics: {\n          ...state.realTimeMetrics,\n          queueSize: action.payload.processing_documents,\n        },\n      };\n\n    case 'UPDATE_COST_ANALYTICS':\n      return {\n        ...state,\n        costAnalytics: action.payload,\n        lastUpdated: {\n          ...state.lastUpdated,\n          costAnalytics: new Date().toISOString(),\n        },\n        realTimeMetrics: {\n          ...state.realTimeMetrics,\n          currentCostToday: action.payload.daily_costs[action.payload.daily_costs.length - 1]?.cost || 0,\n        },\n      };\n\n    case 'UPDATE_JOB_PROGRESS':\n      const updatedJob = action.payload;\n      const existingJobIndex = state.activeJobs.findIndex(job => job.id === updatedJob.id);\n      \n      let newActiveJobs = [...state.activeJobs];\n      let newRecentJobs = [...state.recentJobs];\n      \n      if (existingJobIndex >= 0) {\n        // Update existing job\n        newActiveJobs[existingJobIndex] = updatedJob;\n        \n        // Move completed/failed jobs to recent jobs\n        if (['completed', 'failed', 'cancelled'].includes(updatedJob.status)) {\n          newActiveJobs.splice(existingJobIndex, 1);\n          newRecentJobs.unshift(updatedJob);\n          \n          // Keep only last 20 recent jobs\n          newRecentJobs = newRecentJobs.slice(0, 20);\n        }\n      }\n      \n      return {\n        ...state,\n        activeJobs: newActiveJobs,\n        recentJobs: newRecentJobs,\n      };\n\n    case 'ADD_JOB':\n      return {\n        ...state,\n        activeJobs: [action.payload, ...state.activeJobs],\n      };\n\n    case 'REMOVE_JOB':\n      return {\n        ...state,\n        activeJobs: state.activeJobs.filter(job => job.id !== action.payload),\n      };\n\n    case 'ADD_NOTIFICATION':\n      const notification = action.payload;\n      return {\n        ...state,\n        notifications: [notification, ...state.notifications],\n        unreadCount: notification.read ? state.unreadCount : state.unreadCount + 1,\n      };\n\n    case 'MARK_NOTIFICATION_READ':\n      const updatedNotifications = state.notifications.map(n => \n        n.id === action.payload ? { ...n, read: true } : n\n      );\n      const wasUnread = state.notifications.find(n => n.id === action.payload && !n.read);\n      \n      return {\n        ...state,\n        notifications: updatedNotifications,\n        unreadCount: wasUnread ? state.unreadCount - 1 : state.unreadCount,\n      };\n\n    case 'CLEAR_NOTIFICATIONS':\n      return {\n        ...state,\n        notifications: [],\n        unreadCount: 0,\n      };\n\n    case 'UPDATE_REAL_TIME_METRICS':\n      return {\n        ...state,\n        realTimeMetrics: {\n          ...state.realTimeMetrics,\n          ...action.payload,\n        },\n      };\n\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Context interface\ninterface RealtimeContextType extends RealtimeState {\n  // Actions\n  markNotificationAsRead: (id: string) => void;\n  clearAllNotifications: () => void;\n  refreshData: () => void;\n}\n\n// Create context\nconst RealtimeContext = createContext<RealtimeContextType | undefined>(undefined);\n\n// Provider props\ninterface RealtimeProviderProps {\n  children: ReactNode;\n  userId?: string;\n  sessionId?: string;\n}\n\n// Provider component\nexport const RealtimeProvider: React.FC<RealtimeProviderProps> = ({ \n  children, \n  userId, \n  sessionId \n}) => {\n  const [state, dispatch] = useReducer(realtimeReducer, initialState);\n  \n  // WebSocket connection with auto-subscription to relevant channels\n  const {\n    connected,\n    connecting,\n    error: connectionError,\n    sendMessage,\n  } = useWebSocket({\n    userId,\n    sessionId,\n    autoConnect: true,\n    channels: [\n      WS_CHANNELS.PROCESSING,\n      WS_CHANNELS.SYSTEM_HEALTH,\n      WS_CHANNELS.COST_MONITORING,\n      WS_CHANNELS.USER_ACTIVITY,\n    ],\n    onConnect: () => {\n      dispatch({ \n        type: 'SET_CONNECTION_STATUS', \n        payload: { connected: true, connecting: false } \n      });\n      console.log('Real-time connection established');\n    },\n    onDisconnect: (reason) => {\n      dispatch({ \n        type: 'SET_CONNECTION_STATUS', \n        payload: { connected: false, connecting: false, error: reason } \n      });\n      console.log('Real-time connection lost:', reason);\n    },\n    onError: (error) => {\n      dispatch({ type: 'SET_ERROR', payload: error.message || 'Connection error' });\n    },\n  });\n\n  // Update connection status in state\n  useEffect(() => {\n    dispatch({\n      type: 'SET_CONNECTION_STATUS',\n      payload: { connected, connecting, error: connectionError },\n    });\n  }, [connected, connecting, connectionError]);\n\n  // Event handlers for different message types\n  useWebSocketEvent(WS_EVENTS.SYSTEM_HEALTH, (message: WebSocketMessage) => {\n    dispatch({ type: 'UPDATE_SYSTEM_HEALTH', payload: message.payload });\n  });\n\n  useWebSocketEvent(WS_EVENTS.PROCESSING_STATUS, (message: WebSocketMessage) => {\n    dispatch({ type: 'UPDATE_PROCESSING_STATUS', payload: message.payload });\n  });\n\n  useWebSocketEvent(WS_EVENTS.COST_UPDATE, (message: WebSocketMessage) => {\n    dispatch({ type: 'UPDATE_COST_ANALYTICS', payload: message.payload });\n  });\n\n  useWebSocketEvent(WS_EVENTS.JOB_PROGRESS, (message: WebSocketMessage) => {\n    dispatch({ type: 'UPDATE_JOB_PROGRESS', payload: message.payload });\n  });\n\n  useWebSocketEvent(WS_EVENTS.NEW_DOCUMENT, (message: WebSocketMessage) => {\n    // Create notification for new document\n    const notification: Notification = {\n      id: `doc-${Date.now()}`,\n      type: 'info',\n      title: 'New Document Processed',\n      message: `Document \"${message.payload.title}\" has been processed successfully`,\n      timestamp: new Date().toISOString(),\n      read: false,\n    };\n    \n    dispatch({ type: 'ADD_NOTIFICATION', payload: notification });\n    \n    // Update metrics\n    dispatch({\n      type: 'UPDATE_REAL_TIME_METRICS',\n      payload: {\n        documentsProcessedToday: state.realTimeMetrics.documentsProcessedToday + 1,\n      },\n    });\n  });\n\n  // Action functions\n  const markNotificationAsRead = (id: string) => {\n    dispatch({ type: 'MARK_NOTIFICATION_READ', payload: id });\n  };\n\n  const clearAllNotifications = () => {\n    dispatch({ type: 'CLEAR_NOTIFICATIONS' });\n  };\n\n  const refreshData = () => {\n    if (connected) {\n      sendMessage({ type: 'refresh_all_data' });\n    }\n  };\n\n  const contextValue: RealtimeContextType = {\n    ...state,\n    markNotificationAsRead,\n    clearAllNotifications,\n    refreshData,\n  };\n\n  return (\n    <RealtimeContext.Provider value={contextValue}>\n      {children}\n    </RealtimeContext.Provider>\n  );\n};\n\n// Hook to use the context\nexport const useRealtime = (): RealtimeContextType => {\n  const context = useContext(RealtimeContext);\n  if (!context) {\n    throw new Error('useRealtime must be used within a RealtimeProvider');\n  }\n  return context;\n};\n\n// Selector hooks for specific data\nexport const useSystemHealth = () => {\n  const { systemHealth, lastUpdated } = useRealtime();\n  return { systemHealth, lastUpdated: lastUpdated.systemHealth };\n};\n\nexport const useProcessingStatus = () => {\n  const { processingStatus, lastUpdated } = useRealtime();\n  return { processingStatus, lastUpdated: lastUpdated.processingStatus };\n};\n\nexport const useCostAnalytics = () => {\n  const { costAnalytics, lastUpdated } = useRealtime();\n  return { costAnalytics, lastUpdated: lastUpdated.costAnalytics };\n};\n\nexport const useActiveJobs = () => {\n  const { activeJobs, recentJobs } = useRealtime();\n  return { activeJobs, recentJobs };\n};\n\nexport const useNotifications = () => {\n  const { \n    notifications, \n    unreadCount, \n    markNotificationAsRead, \n    clearAllNotifications \n  } = useRealtime();\n  \n  return { \n    notifications, \n    unreadCount, \n    markNotificationAsRead, \n    clearAllNotifications \n  };\n};\n\nexport const useRealTimeMetrics = () => {\n  const { realTimeMetrics } = useRealtime();\n  return realTimeMetrics;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use client\";\n\n// src/useMutationState.ts\nimport _objectSpread from \"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from \"react\";\nimport { notifyManager, replaceEqualDeep } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nfunction useIsMutating(filters, queryClient) {\n  const client = useQueryClient(queryClient);\n  return useMutationState({\n    filters: _objectSpread(_objectSpread({}, filters), {}, {\n      status: \"pending\"\n    })\n  }, client).length;\n}\nfunction getResult(mutationCache, options) {\n  return mutationCache.findAll(options.filters).map(mutation => options.select ? options.select(mutation) : mutation.state);\n}\nfunction useMutationState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let queryClient = arguments.length > 1 ? arguments[1] : undefined;\n  const mutationCache = useQueryClient(queryClient).getMutationCache();\n  const optionsRef = React.useRef(options);\n  const result = React.useRef(null);\n  if (!result.current) {\n    result.current = getResult(mutationCache, options);\n  }\n  React.useEffect(() => {\n    optionsRef.current = options;\n  });\n  return React.useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(() => {\n    const nextResult = replaceEqualDeep(result.current, getResult(mutationCache, optionsRef.current));\n    if (result.current !== nextResult) {\n      result.current = nextResult;\n      notifyManager.schedule(onStoreChange);\n    }\n  }), [mutationCache]), () => result.current, () => result.current);\n}\nexport { useIsMutating, useMutationState };","map":{"version":3,"names":["React","notifyManager","replaceEqualDeep","useQueryClient","useIsMutating","filters","queryClient","client","useMutationState","_objectSpread","status","length","getResult","mutationCache","options","findAll","map","mutation","select","state","arguments","undefined","getMutationCache","optionsRef","useRef","result","current","useEffect","useSyncExternalStore","useCallback","onStoreChange","subscribe","nextResult","schedule"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@tanstack/react-query/src/useMutationState.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { notifyManager, replaceEqualDeep } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  Mutation,\n  MutationCache,\n  MutationFilters,\n  MutationState,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  queryClient?: QueryClient,\n): number {\n  const client = useQueryClient(queryClient)\n  return useMutationState(\n    { filters: { ...filters, status: 'pending' } },\n    client,\n  ).length\n}\n\ntype MutationStateOptions<TResult = MutationState> = {\n  filters?: MutationFilters\n  select?: (mutation: Mutation) => TResult\n}\n\nfunction getResult<TResult = MutationState>(\n  mutationCache: MutationCache,\n  options: MutationStateOptions<TResult>,\n): Array<TResult> {\n  return mutationCache\n    .findAll(options.filters)\n    .map(\n      (mutation): TResult =>\n        (options.select ? options.select(mutation) : mutation.state) as TResult,\n    )\n}\n\nexport function useMutationState<TResult = MutationState>(\n  options: MutationStateOptions<TResult> = {},\n  queryClient?: QueryClient,\n): Array<TResult> {\n  const mutationCache = useQueryClient(queryClient).getMutationCache()\n  const optionsRef = React.useRef(options)\n  const result = React.useRef<Array<TResult>>(null)\n  if (!result.current) {\n    result.current = getResult(mutationCache, options)\n  }\n\n  React.useEffect(() => {\n    optionsRef.current = options\n  })\n\n  return React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(() => {\n          const nextResult = replaceEqualDeep(\n            result.current,\n            getResult(mutationCache, optionsRef.current),\n          )\n          if (result.current !== nextResult) {\n            result.current = nextResult\n            notifyManager.schedule(onStoreChange)\n          }\n        }),\n      [mutationCache],\n    ),\n    () => result.current,\n    () => result.current,\n  )!\n}\n"],"mappings":";;;;AACA,YAAYA,KAAA,MAAW;AAEvB,SAASC,aAAA,EAAeC,gBAAA,QAAwB;AAChD,SAASC,cAAA,QAAsB;AASxB,SAASC,cACdC,OAAA,EACAC,WAAA,EACQ;EACR,MAAMC,MAAA,GAASJ,cAAA,CAAeG,WAAW;EACzC,OAAOE,gBAAA,CACL;IAAEH,OAAA,EAAAI,aAAA,CAAAA,aAAA,KAAcJ,OAAA;MAASK,MAAA,EAAQ;IAAA;EAAY,GAC7CH,MACF,EAAEI,MAAA;AACJ;AAOA,SAASC,UACPC,aAAA,EACAC,OAAA,EACgB;EAChB,OAAOD,aAAA,CACJE,OAAA,CAAQD,OAAA,CAAQT,OAAO,EACvBW,GAAA,CACEC,QAAA,IACEH,OAAA,CAAQI,MAAA,GAASJ,OAAA,CAAQI,MAAA,CAAOD,QAAQ,IAAIA,QAAA,CAASE,KAC1D;AACJ;AAEO,SAASX,iBAAA,EAGE;EAAA,IAFhBM,OAAA,GAAAM,SAAA,CAAAT,MAAA,QAAAS,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAyC,CAAC;EAAA,IAC1Cd,WAAA,GAAAc,SAAA,CAAAT,MAAA,OAAAS,SAAA,MAAAC,SAAA;EAEA,MAAMR,aAAA,GAAgBV,cAAA,CAAeG,WAAW,EAAEgB,gBAAA,CAAiB;EACnE,MAAMC,UAAA,GAAmBvB,KAAA,CAAAwB,MAAA,CAAOV,OAAO;EACvC,MAAMW,MAAA,GAAezB,KAAA,CAAAwB,MAAA,CAAuB,IAAI;EAChD,IAAI,CAACC,MAAA,CAAOC,OAAA,EAAS;IACnBD,MAAA,CAAOC,OAAA,GAAUd,SAAA,CAAUC,aAAA,EAAeC,OAAO;EACnD;EAEMd,KAAA,CAAA2B,SAAA,CAAU,MAAM;IACpBJ,UAAA,CAAWG,OAAA,GAAUZ,OAAA;EACvB,CAAC;EAED,OAAad,KAAA,CAAA4B,oBAAA,CACL5B,KAAA,CAAA6B,WAAA,CACHC,aAAA,IACCjB,aAAA,CAAckB,SAAA,CAAU,MAAM;IAC5B,MAAMC,UAAA,GAAa9B,gBAAA,CACjBuB,MAAA,CAAOC,OAAA,EACPd,SAAA,CAAUC,aAAA,EAAeU,UAAA,CAAWG,OAAO,CAC7C;IACA,IAAID,MAAA,CAAOC,OAAA,KAAYM,UAAA,EAAY;MACjCP,MAAA,CAAOC,OAAA,GAAUM,UAAA;MACjB/B,aAAA,CAAcgC,QAAA,CAASH,aAAa;IACtC;EACF,CAAC,GACH,CAACjB,aAAa,CAChB,GACA,MAAMY,MAAA,CAAOC,OAAA,EACb,MAAMD,MAAA,CAAOC,OACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
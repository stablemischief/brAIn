{"ast":null,"code":"// src/infiniteQueryBehavior.ts\nimport { addToEnd, addToStart, ensureQueryFn } from \"./utils.js\";\nfunction infiniteQueryBehavior(pages) {\n  return {\n    onFetch: (context, query) => {\n      var _context$fetchOptions, _context$state$data, _context$state$data2;\n      const options = context.options;\n      const direction = (_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 || (_context$fetchOptions = _context$fetchOptions.meta) === null || _context$fetchOptions === void 0 || (_context$fetchOptions = _context$fetchOptions.fetchMore) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.direction;\n      const oldPages = ((_context$state$data = context.state.data) === null || _context$state$data === void 0 ? void 0 : _context$state$data.pages) || [];\n      const oldPageParams = ((_context$state$data2 = context.state.data) === null || _context$state$data2 === void 0 ? void 0 : _context$state$data2.pageParams) || [];\n      let result = {\n        pages: [],\n        pageParams: []\n      };\n      let currentPage = 0;\n      const fetchFn = async () => {\n        let cancelled = false;\n        const addSignalProperty = object => {\n          Object.defineProperty(object, \"signal\", {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true;\n              } else {\n                context.signal.addEventListener(\"abort\", () => {\n                  cancelled = true;\n                });\n              }\n              return context.signal;\n            }\n          });\n        };\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions);\n        const fetchPage = async (data, param, previous) => {\n          if (cancelled) {\n            return Promise.reject();\n          }\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data);\n          }\n          const createQueryFnContext = () => {\n            const queryFnContext2 = {\n              client: context.client,\n              queryKey: context.queryKey,\n              pageParam: param,\n              direction: previous ? \"backward\" : \"forward\",\n              meta: context.options.meta\n            };\n            addSignalProperty(queryFnContext2);\n            return queryFnContext2;\n          };\n          const queryFnContext = createQueryFnContext();\n          const page = await queryFn(queryFnContext);\n          const {\n            maxPages\n          } = context.options;\n          const addTo = previous ? addToStart : addToEnd;\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          };\n        };\n        if (direction && oldPages.length) {\n          const previous = direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams\n          };\n          const param = pageParamFn(options, oldData);\n          result = await fetchPage(oldData, param, previous);\n        } else {\n          const remainingPages = pages !== null && pages !== void 0 ? pages : oldPages.length;\n          do {\n            var _oldPageParams$;\n            const param = currentPage === 0 ? (_oldPageParams$ = oldPageParams[0]) !== null && _oldPageParams$ !== void 0 ? _oldPageParams$ : options.initialPageParam : getNextPageParam(options, result);\n            if (currentPage > 0 && param == null) {\n              break;\n            }\n            result = await fetchPage(result, param);\n            currentPage++;\n          } while (currentPage < remainingPages);\n        }\n        return result;\n      };\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          var _context$options$pers, _context$options;\n          return (_context$options$pers = (_context$options = context.options).persister) === null || _context$options$pers === void 0 ? void 0 : _context$options$pers.call(_context$options, fetchFn, {\n            client: context.client,\n            queryKey: context.queryKey,\n            meta: context.options.meta,\n            signal: context.signal\n          }, query);\n        };\n      } else {\n        context.fetchFn = fetchFn;\n      }\n    }\n  };\n}\nfunction getNextPageParam(options, _ref) {\n  let {\n    pages,\n    pageParams\n  } = _ref;\n  const lastIndex = pages.length - 1;\n  return pages.length > 0 ? options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams) : void 0;\n}\nfunction getPreviousPageParam(options, _ref2) {\n  var _options$getPreviousP;\n  let {\n    pages,\n    pageParams\n  } = _ref2;\n  return pages.length > 0 ? (_options$getPreviousP = options.getPreviousPageParam) === null || _options$getPreviousP === void 0 ? void 0 : _options$getPreviousP.call(options, pages[0], pages, pageParams[0], pageParams) : void 0;\n}\nfunction hasNextPage(options, data) {\n  if (!data) return false;\n  return getNextPageParam(options, data) != null;\n}\nfunction hasPreviousPage(options, data) {\n  if (!data || !options.getPreviousPageParam) return false;\n  return getPreviousPageParam(options, data) != null;\n}\nexport { hasNextPage, hasPreviousPage, infiniteQueryBehavior };","map":{"version":3,"names":["addToEnd","addToStart","ensureQueryFn","infiniteQueryBehavior","pages","onFetch","context","query","_context$fetchOptions","_context$state$data","_context$state$data2","options","direction","fetchOptions","meta","fetchMore","oldPages","state","data","oldPageParams","pageParams","result","currentPage","fetchFn","cancelled","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","aborted","addEventListener","queryFn","fetchPage","param","previous","Promise","reject","length","resolve","createQueryFnContext","queryFnContext2","client","queryKey","pageParam","queryFnContext","page","maxPages","addTo","pageParamFn","getPreviousPageParam","getNextPageParam","oldData","remainingPages","_oldPageParams$","initialPageParam","persister","_context$options$pers","_context$options","call","_ref","lastIndex","_ref2","_options$getPreviousP","hasNextPage","hasPreviousPage"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@tanstack/query-core/src/infiniteQueryBehavior.ts"],"sourcesContent":["import { addToEnd, addToStart, ensureQueryFn } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const options = context.options as InfiniteQueryPageParamsOptions<TData>\n      const direction = context.fetchOptions?.meta?.fetchMore?.direction\n      const oldPages = context.state.data?.pages || []\n      const oldPageParams = context.state.data?.pageParams || []\n      let result: InfiniteData<unknown> = { pages: [], pageParams: [] }\n      let currentPage = 0\n\n      const fetchFn = async () => {\n        let cancelled = false\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        const queryFn = ensureQueryFn(context.options, context.fetchOptions)\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const createQueryFnContext = () => {\n            const queryFnContext: OmitKeyof<\n              QueryFunctionContext<QueryKey, unknown>,\n              'signal'\n            > = {\n              client: context.client,\n              queryKey: context.queryKey,\n              pageParam: param,\n              direction: previous ? 'backward' : 'forward',\n              meta: context.options.meta,\n            }\n            addSignalProperty(queryFnContext)\n            return queryFnContext as QueryFunctionContext<QueryKey, unknown>\n          }\n\n          const queryFnContext = createQueryFnContext()\n\n          const page = await queryFn(queryFnContext)\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch all pages\n          do {\n            const param =\n              currentPage === 0\n                ? (oldPageParams[0] ?? options.initialPageParam)\n                : getNextPageParam(options, result)\n            if (currentPage > 0 && param == null) {\n              break\n            }\n            result = await fetchPage(result, param)\n            currentPage++\n          } while (currentPage < remainingPages)\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              client: context.client,\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return pages.length > 0\n    ? options.getNextPageParam(\n        pages[lastIndex],\n        pages,\n        pageParams[lastIndex],\n        pageParams,\n      )\n    : undefined\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return pages.length > 0\n    ? options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams)\n    : undefined\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
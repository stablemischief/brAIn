{"ast":null,"code":"import _objectSpread from\"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback,useMemo}from'react';// Mock data generator for testing\nconst generateMockData=function(){let nodeCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:100;const nodes=[];const edges=[];const types=['document','entity','concept','tag','folder'];// Generate nodes\nfor(let i=0;i<nodeCount;i++){nodes.push({id:\"node-\".concat(i),label:\"Node \".concat(i),type:types[Math.floor(Math.random()*types.length)],group:\"group-\".concat(Math.floor(i/10)),metadata:{confidence:Math.random(),extractedAt:new Date(Date.now()-Math.random()*30*24*60*60*1000).toISOString(),source:\"source-\".concat(Math.floor(Math.random()*5)),description:\"This is a description for node \".concat(i)}});}// Generate edges (roughly 2x nodes for good connectivity)\nconst edgeCount=nodeCount*2;const edgeTypes=['references','contains','related_to','extracted_from','similar_to'];for(let i=0;i<edgeCount;i++){const source=Math.floor(Math.random()*nodeCount);const target=Math.floor(Math.random()*nodeCount);if(source!==target){edges.push({id:\"edge-\".concat(i),source:\"node-\".concat(source),target:\"node-\".concat(target),type:edgeTypes[Math.floor(Math.random()*edgeTypes.length)],weight:Math.random()*5+1,metadata:{confidence:Math.random(),createdAt:new Date().toISOString()}});}}return{nodes,edges};};export const useGraphData=function(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const[data,setData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const fetchGraphData=useCallback(async()=>{setLoading(true);setError(null);try{// In production, this would be an API call\nconst apiUrl='/api/knowledge-graph';// For now, use mock data\nif(process.env.NODE_ENV==='development'){// Simulate network delay\nawait new Promise(resolve=>setTimeout(resolve,500));// Generate mock data with performance considerations\nconst nodeCount=filters.searchQuery?50:200;// Reduce nodes when searching\nconst mockData=generateMockData(nodeCount);// Apply filters\nlet filteredData=_objectSpread({},mockData);if(filters.searchQuery){const query=filters.searchQuery.toLowerCase();filteredData.nodes=mockData.nodes.filter(node=>{var _node$metadata,_node$metadata$descri;return node.label.toLowerCase().includes(query)||node.type.includes(query)||((_node$metadata=node.metadata)===null||_node$metadata===void 0?void 0:(_node$metadata$descri=_node$metadata.description)===null||_node$metadata$descri===void 0?void 0:_node$metadata$descri.toLowerCase().includes(query));});// Filter edges to only include those connecting filtered nodes\nconst nodeIds=new Set(filteredData.nodes.map(n=>n.id));filteredData.edges=mockData.edges.filter(edge=>nodeIds.has(typeof edge.source==='string'?edge.source:edge.source.id)&&nodeIds.has(typeof edge.target==='string'?edge.target:edge.target.id));}if(filters.nodeTypes&&filters.nodeTypes.length>0){filteredData.nodes=filteredData.nodes.filter(node=>filters.nodeTypes.includes(node.type));}if(filters.minConfidence!==undefined){filteredData.nodes=filteredData.nodes.filter(node=>{var _node$metadata2;return(((_node$metadata2=node.metadata)===null||_node$metadata2===void 0?void 0:_node$metadata2.confidence)||0)>=filters.minConfidence;});}setData(filteredData);}else{// Production API call\nconst params=new URLSearchParams();if(filters.searchQuery)params.append('q',filters.searchQuery);if(filters.nodeTypes)params.append('types',filters.nodeTypes.join(','));if(filters.minConfidence)params.append('min_confidence',filters.minConfidence.toString());const response=await fetch(\"\".concat(apiUrl,\"?\").concat(params));if(!response.ok)throw new Error('Failed to fetch graph data');const graphData=await response.json();setData(graphData);}}catch(err){setError(err instanceof Error?err.message:'An error occurred');setData(null);}finally{setLoading(false);}},[filters]);useEffect(()=>{fetchGraphData();},[fetchGraphData]);// Performance optimization: memoize filtered data\nconst optimizedData=useMemo(()=>{if(!data)return null;// For large graphs, implement level-of-detail (LOD) optimization\nconst MAX_RENDER_NODES=500;const MAX_RENDER_EDGES=1000;if(data.nodes.length>MAX_RENDER_NODES){// Sort by importance (confidence) and take top nodes\nconst sortedNodes=[...data.nodes].sort((a,b)=>{var _b$metadata,_a$metadata;return(((_b$metadata=b.metadata)===null||_b$metadata===void 0?void 0:_b$metadata.confidence)||0)-(((_a$metadata=a.metadata)===null||_a$metadata===void 0?void 0:_a$metadata.confidence)||0);});const visibleNodes=sortedNodes.slice(0,MAX_RENDER_NODES);const visibleNodeIds=new Set(visibleNodes.map(n=>n.id));const visibleEdges=data.edges.filter(edge=>visibleNodeIds.has(typeof edge.source==='string'?edge.source:edge.source.id)&&visibleNodeIds.has(typeof edge.target==='string'?edge.target:edge.target.id)).slice(0,MAX_RENDER_EDGES);return{nodes:visibleNodes,edges:visibleEdges};}return data;},[data]);return{data:optimizedData,loading,error,refetch:fetchGraphData};};// Hook for graph statistics\nexport const useGraphStats=data=>{return useMemo(()=>{if(!data)return null;const nodesByType={};const edgesByType={};data.nodes.forEach(node=>{nodesByType[node.type]=(nodesByType[node.type]||0)+1;});data.edges.forEach(edge=>{edgesByType[edge.type]=(edgesByType[edge.type]||0)+1;});// Calculate average degree\nconst degrees=new Map();data.edges.forEach(edge=>{const sourceId=typeof edge.source==='string'?edge.source:edge.source.id;const targetId=typeof edge.target==='string'?edge.target:edge.target.id;degrees.set(sourceId,(degrees.get(sourceId)||0)+1);degrees.set(targetId,(degrees.get(targetId)||0)+1);});const avgDegree=Array.from(degrees.values()).reduce((a,b)=>a+b,0)/degrees.size||0;// Calculate density (actual edges / possible edges)\nconst possibleEdges=data.nodes.length*(data.nodes.length-1)/2;const density=possibleEdges>0?data.edges.length/possibleEdges:0;return{totalNodes:data.nodes.length,totalEdges:data.edges.length,nodesByType,edgesByType,avgDegree,density,clusters:Object.keys(nodesByType).length};},[data]);};","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","generateMockData","nodeCount","arguments","length","undefined","nodes","edges","types","i","push","id","concat","label","type","Math","floor","random","group","metadata","confidence","extractedAt","Date","now","toISOString","source","description","edgeCount","edgeTypes","target","weight","createdAt","useGraphData","filters","data","setData","loading","setLoading","error","setError","fetchGraphData","apiUrl","process","env","NODE_ENV","Promise","resolve","setTimeout","searchQuery","mockData","filteredData","_objectSpread","query","toLowerCase","filter","node","_node$metadata","_node$metadata$descri","includes","nodeIds","Set","map","n","edge","has","nodeTypes","minConfidence","_node$metadata2","params","URLSearchParams","append","join","toString","response","fetch","ok","Error","graphData","json","err","message","optimizedData","MAX_RENDER_NODES","MAX_RENDER_EDGES","sortedNodes","sort","a","b","_b$metadata","_a$metadata","visibleNodes","slice","visibleNodeIds","visibleEdges","refetch","useGraphStats","nodesByType","edgesByType","forEach","degrees","Map","sourceId","targetId","set","get","avgDegree","Array","from","values","reduce","size","possibleEdges","density","totalNodes","totalEdges","clusters","Object","keys"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/src/hooks/useGraphData.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { GraphData, GraphFilters, GraphNode, GraphEdge } from '../types/graph';\n\n// Mock data generator for testing\nconst generateMockData = (nodeCount: number = 100): GraphData => {\n  const nodes: GraphNode[] = [];\n  const edges: GraphEdge[] = [];\n\n  const types: GraphNode['type'][] = ['document', 'entity', 'concept', 'tag', 'folder'];\n\n  // Generate nodes\n  for (let i = 0; i < nodeCount; i++) {\n    nodes.push({\n      id: `node-${i}`,\n      label: `Node ${i}`,\n      type: types[Math.floor(Math.random() * types.length)],\n      group: `group-${Math.floor(i / 10)}`,\n      metadata: {\n        confidence: Math.random(),\n        extractedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: `source-${Math.floor(Math.random() * 5)}`,\n        description: `This is a description for node ${i}`,\n      },\n    });\n  }\n\n  // Generate edges (roughly 2x nodes for good connectivity)\n  const edgeCount = nodeCount * 2;\n  const edgeTypes: GraphEdge['type'][] = ['references', 'contains', 'related_to', 'extracted_from', 'similar_to'];\n\n  for (let i = 0; i < edgeCount; i++) {\n    const source = Math.floor(Math.random() * nodeCount);\n    const target = Math.floor(Math.random() * nodeCount);\n\n    if (source !== target) {\n      edges.push({\n        id: `edge-${i}`,\n        source: `node-${source}`,\n        target: `node-${target}`,\n        type: edgeTypes[Math.floor(Math.random() * edgeTypes.length)],\n        weight: Math.random() * 5 + 1,\n        metadata: {\n          confidence: Math.random(),\n          createdAt: new Date().toISOString(),\n        },\n      });\n    }\n  }\n\n  return { nodes, edges };\n};\n\ninterface UseGraphDataReturn {\n  data: GraphData | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\nexport const useGraphData = (filters: GraphFilters = {}): UseGraphDataReturn => {\n  const [data, setData] = useState<GraphData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchGraphData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // In production, this would be an API call\n      const apiUrl = '/api/knowledge-graph';\n\n      // For now, use mock data\n      if (process.env.NODE_ENV === 'development') {\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Generate mock data with performance considerations\n        const nodeCount = filters.searchQuery ? 50 : 200; // Reduce nodes when searching\n        const mockData = generateMockData(nodeCount);\n\n        // Apply filters\n        let filteredData = { ...mockData };\n\n        if (filters.searchQuery) {\n          const query = filters.searchQuery.toLowerCase();\n          filteredData.nodes = mockData.nodes.filter(node =>\n            node.label.toLowerCase().includes(query) ||\n            node.type.includes(query) ||\n            node.metadata?.description?.toLowerCase().includes(query)\n          );\n\n          // Filter edges to only include those connecting filtered nodes\n          const nodeIds = new Set(filteredData.nodes.map(n => n.id));\n          filteredData.edges = mockData.edges.filter(edge =>\n            nodeIds.has(typeof edge.source === 'string' ? edge.source : edge.source.id) &&\n            nodeIds.has(typeof edge.target === 'string' ? edge.target : edge.target.id)\n          );\n        }\n\n        if (filters.nodeTypes && filters.nodeTypes.length > 0) {\n          filteredData.nodes = filteredData.nodes.filter(node =>\n            filters.nodeTypes!.includes(node.type)\n          );\n        }\n\n        if (filters.minConfidence !== undefined) {\n          filteredData.nodes = filteredData.nodes.filter(node =>\n            (node.metadata?.confidence || 0) >= filters.minConfidence!\n          );\n        }\n\n        setData(filteredData);\n      } else {\n        // Production API call\n        const params = new URLSearchParams();\n        if (filters.searchQuery) params.append('q', filters.searchQuery);\n        if (filters.nodeTypes) params.append('types', filters.nodeTypes.join(','));\n        if (filters.minConfidence) params.append('min_confidence', filters.minConfidence.toString());\n\n        const response = await fetch(`${apiUrl}?${params}`);\n        if (!response.ok) throw new Error('Failed to fetch graph data');\n\n        const graphData = await response.json();\n        setData(graphData);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      setData(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  useEffect(() => {\n    fetchGraphData();\n  }, [fetchGraphData]);\n\n  // Performance optimization: memoize filtered data\n  const optimizedData = useMemo(() => {\n    if (!data) return null;\n\n    // For large graphs, implement level-of-detail (LOD) optimization\n    const MAX_RENDER_NODES = 500;\n    const MAX_RENDER_EDGES = 1000;\n\n    if (data.nodes.length > MAX_RENDER_NODES) {\n      // Sort by importance (confidence) and take top nodes\n      const sortedNodes = [...data.nodes].sort((a, b) =>\n        (b.metadata?.confidence || 0) - (a.metadata?.confidence || 0)\n      );\n\n      const visibleNodes = sortedNodes.slice(0, MAX_RENDER_NODES);\n      const visibleNodeIds = new Set(visibleNodes.map(n => n.id));\n\n      const visibleEdges = data.edges\n        .filter(edge =>\n          visibleNodeIds.has(typeof edge.source === 'string' ? edge.source : edge.source.id) &&\n          visibleNodeIds.has(typeof edge.target === 'string' ? edge.target : edge.target.id)\n        )\n        .slice(0, MAX_RENDER_EDGES);\n\n      return {\n        nodes: visibleNodes,\n        edges: visibleEdges,\n      };\n    }\n\n    return data;\n  }, [data]);\n\n  return {\n    data: optimizedData,\n    loading,\n    error,\n    refetch: fetchGraphData,\n  };\n};\n\n// Hook for graph statistics\nexport const useGraphStats = (data: GraphData | null) => {\n  return useMemo(() => {\n    if (!data) return null;\n\n    const nodesByType: Record<string, number> = {};\n    const edgesByType: Record<string, number> = {};\n\n    data.nodes.forEach(node => {\n      nodesByType[node.type] = (nodesByType[node.type] || 0) + 1;\n    });\n\n    data.edges.forEach(edge => {\n      edgesByType[edge.type] = (edgesByType[edge.type] || 0) + 1;\n    });\n\n    // Calculate average degree\n    const degrees = new Map<string, number>();\n    data.edges.forEach(edge => {\n      const sourceId = typeof edge.source === 'string' ? edge.source : edge.source.id;\n      const targetId = typeof edge.target === 'string' ? edge.target : edge.target.id;\n      degrees.set(sourceId, (degrees.get(sourceId) || 0) + 1);\n      degrees.set(targetId, (degrees.get(targetId) || 0) + 1);\n    });\n\n    const avgDegree = Array.from(degrees.values()).reduce((a, b) => a + b, 0) / degrees.size || 0;\n\n    // Calculate density (actual edges / possible edges)\n    const possibleEdges = data.nodes.length * (data.nodes.length - 1) / 2;\n    const density = possibleEdges > 0 ? data.edges.length / possibleEdges : 0;\n\n    return {\n      totalNodes: data.nodes.length,\n      totalEdges: data.edges.length,\n      nodesByType,\n      edgesByType,\n      avgDegree,\n      density,\n      clusters: Object.keys(nodesByType).length,\n    };\n  }, [data]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
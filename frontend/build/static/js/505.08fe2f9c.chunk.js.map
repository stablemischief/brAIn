{"version":3,"file":"static/js/505.08fe2f9c.chunk.js","mappings":"iLA+HO,MAAMA,EAAoC,CAE/CC,gBAAiB,IACjBC,aAAc,IACdC,aAAc,GACdC,YAAa,IACbC,gBAAiB,GAGjBC,WAAY,EACZC,cAAe,EACfC,cAAe,GACfC,UAAW,EACXC,YAAa,GAGbC,QAAS,GACTC,QAAS,GACTC,kBAAmB,IAGnBC,gBAAiB,EACjBC,qBAAsB,IACtBC,wBAAyB,GAGzBC,YAAY,EACZC,gBAAgB,EAChBC,YAAY,EACZC,aAAa,GAGFC,EAAyC,CACpDC,SAAU,UACVC,OAAQ,UACRC,QAAS,UACTC,IAAK,UACLC,OAAQ,UACRC,KAAM,UACNC,aAAc,UACdC,aAAc,UACdC,YAAa,UACbC,YAAa,UACbC,WAAY,UACZC,KAAM,W,+DCzJR,MA6DA,EA7DoDC,IAO7C,IAP8C,SACnDC,EAAQ,UACRC,EAAS,YACTC,EAAW,UACXC,EAAS,gBACTC,EAAe,YACfC,GACDN,EACC,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+DAA8DC,SAAA,EAC3EC,EAAAA,EAAAA,KAAA,UACEC,QAASV,EACTO,UAAU,oEACVI,MAAM,UAASH,UAEfC,EAAAA,EAAAA,KAACG,EAAAA,EAAuB,CAACL,UAAU,oDAGrCE,EAAAA,EAAAA,KAAA,UACEC,QAAST,EACTM,UAAU,oEACVI,MAAM,WAAUH,UAEhBC,EAAAA,EAAAA,KAACI,EAAAA,EAAwB,CAACN,UAAU,oDAGtCE,EAAAA,EAAAA,KAAA,UACEC,QAASR,EACTK,UAAU,oEACVI,MAAM,aAAYH,UAElBC,EAAAA,EAAAA,KAACK,EAAAA,EAAqB,CAACP,UAAU,oDAGnCE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qCAAoCC,UACjDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yCAAwCC,SAAA,EACrC,IAAdH,GAAmBU,QAAQ,GAAG,UAIpCN,EAAAA,EAAAA,KAAA,UACEC,QAASP,EACTI,UAAU,oEACVI,MAAM,gBAAeH,UAErBC,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAACT,UAAU,mDAG1BH,IACCK,EAAAA,EAAAA,KAAA,UACEC,QAASN,EACTG,UAAU,oEACVI,MAAM,iBAAgBH,UAEtBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAa,CAACV,UAAU,uD,wBC/DnC,MAkGA,EAlGgDR,IAIzC,IAJ0C,SAC/CmB,EAAQ,YACRC,EAAc,oCAAmC,WACjDC,EAAa,KACdrB,EACC,MAAOsB,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAYC,IAAiBF,EAAAA,EAAAA,WAAS,IAG7CG,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAQC,WAAW,KACvBV,EAASG,IACRD,GAEH,MAAO,IAAMS,aAAaF,IACzB,CAACN,EAAOH,EAAUE,IAErB,MAAMU,GAAcC,EAAAA,EAAAA,aAAY,KAC9BT,EAAS,IACTJ,EAAS,KACR,CAACA,IAEEc,GAAeD,EAAAA,EAAAA,aAAY,KAC/BN,GAAeD,GACVA,EAQHM,IANAF,WAAW,KACT,MAAMK,EAAQ9C,SAAS+C,eAAe,sBACjC,OAALD,QAAK,IAALA,GAAAA,EAAOE,SACN,MAKJ,CAACX,EAAYM,IAEhB,OACExB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OACEC,UAAS,kFAAA6B,OACPZ,EAAa,OAAS,UACrBhB,SAAA,EAEHC,EAAAA,EAAAA,KAAA,UACEC,QAASsB,EACTzB,UAAU,uDACVI,MAAOa,EAAa,eAAiB,cAAchB,UAEnDC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAmB,CAAC9B,UAAU,4BAGhCiB,IACClB,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAA9B,SAAA,EACEC,EAAAA,EAAAA,KAAA,SACE8B,GAAG,qBACHC,KAAK,OACLC,MAAOpB,EACPqB,SAAWC,GAAMrB,EAASqB,EAAEC,OAAOH,OACnCtB,YAAaA,EACbZ,UAAU,uFAGXc,IACCZ,EAAAA,EAAAA,KAAA,UACEC,QAASoB,EACTvB,UAAU,uDACVI,MAAM,eAAcH,UAEpBC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CAACtC,UAAU,kCAO9BiB,GAAcH,IACbf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wEAAuEC,SAAA,EACpFC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SAAC,qBAC5CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,uFAAsFC,SAAA,EACrGC,EAAAA,EAAAA,KAAA,SAAO+B,KAAK,WAAWjC,UAAU,OAAOuC,gBAAc,IAAG,YAG3DxC,EAAAA,EAAAA,MAAA,SAAOC,UAAU,uFAAsFC,SAAA,EACrGC,EAAAA,EAAAA,KAAA,SAAO+B,KAAK,WAAWjC,UAAU,OAAOuC,gBAAc,IAAG,oBAG3DxC,EAAAA,EAAAA,MAAA,SAAOC,UAAU,uFAAsFC,SAAA,EACrGC,EAAAA,EAAAA,KAAA,SAAO+B,KAAK,WAAWjC,UAAU,SAAS,wBCxBxD,EAhE8BwC,KAC5B,MAAMC,EAA0B,CAC9B,CAAEC,MAAO,WAAYC,MAAOhE,EAAqBC,SAAUqD,KAAM,QACjE,CAAES,MAAO,SAAUC,MAAOhE,EAAqBE,OAAQoD,KAAM,QAC7D,CAAES,MAAO,UAAWC,MAAOhE,EAAqBG,QAASmD,KAAM,QAC/D,CAAES,MAAO,MAAOC,MAAOhE,EAAqBI,IAAKkD,KAAM,QACvD,CAAES,MAAO,SAAUC,MAAOhE,EAAqBK,OAAQiD,KAAM,SAGzDW,EAA0B,CAC9B,CAAEF,MAAO,aAAcC,MAAOhE,EAAqBM,KAAMgD,KAAM,QAC/D,CAAES,MAAO,WAAYC,MAAOhE,EAAqBO,aAAc+C,KAAM,SAGvE,OACElC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iDAAgDC,SAAA,EAC7DC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2CAA0CC,SAAC,gBACzDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvBwC,EAAUI,IAAKC,IACd/C,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,8BAA6BC,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,OACEF,UAAU,6CACV+C,MAAO,CAAEC,gBAAiBF,EAAKH,UAEjCzC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,wBAAuBC,SAAE6C,EAAKJ,UALtCI,EAAKJ,WAUnB3C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2CAA0CC,SAAC,kBACzDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvB2C,EAAUC,IAAKC,IACd/C,EAAAA,EAAAA,MAAA,OAAsBC,UAAU,8BAA6BC,SAAA,CAC5C,SAAd6C,EAAKb,MACJ/B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAY+C,MAAO,CAAEC,gBAAiBF,EAAKH,UAE1DzC,EAAAA,EAAAA,KAAA,OACEF,UAAU,gCACV+C,MAAO,CACLC,gBAAiBF,EAAKH,MACtBM,YAAaH,EAAKH,UAIxBzC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,wBAAuBC,SAAE6C,EAAKJ,UAZtCI,EAAKJ,cAkBrB3C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2CAA0CC,SAAC,cACzDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kCAAiCC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,+BACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,4BACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBACLC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,qCCkCf,EA3FoDT,IAAwB,IAAD0D,EAAAC,EAAAC,EAAAC,EAAA,IAAtB,KAAEC,EAAI,QAAEC,GAAS/D,EACpE,OACEO,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uCAAsCC,SAAA,EACnDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mCAAkCC,SAAEqD,EAAKZ,SACvDxC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,mCAAkCC,SAAEqD,EAAKrB,WAE3D/B,EAAAA,EAAAA,KAAA,UACEC,QAASoD,EACTvD,UAAU,kDAAiDC,UAE3DC,EAAAA,EAAAA,KAACoC,EAAAA,EAAS,CAACtC,UAAU,gCAIX,QAAbkD,EAAAI,EAAKE,gBAAQ,IAAAN,OAAA,EAAbA,EAAeO,eACd1D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yCAAwCC,SAAC,iBACvDC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,wBAAuBC,SAAEqD,EAAKE,SAASC,kBAIxD1D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yCAAwCC,SAAC,aACvDF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,YAAWC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,SAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,kCAAiCC,SAAA,CAAEqD,EAAKtB,GAAG0B,UAAU,EAAG,GAAG,YAE1EJ,EAAKK,QACJ5D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,YAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAEqD,EAAKK,YAG1B,QAAbR,EAAAG,EAAKE,gBAAQ,IAAAL,OAAA,EAAbA,EAAeS,cACd7D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,iBAC9BF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,gBAAeC,SAAA,EACE,IAA3BqD,EAAKE,SAASI,YAAkBpD,QAAQ,GAAG,WAIrC,QAAb4C,EAAAE,EAAKE,gBAAQ,IAAAJ,OAAA,EAAbA,EAAeS,UACd9D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,aAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAEqD,EAAKE,SAASK,aAGnC,QAAbR,EAAAC,EAAKE,gBAAQ,IAAAH,OAAA,EAAbA,EAAeS,eACd/D,EAAAA,EAAAA,MAAA,OAAKC,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAAC,gBAC9BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gBAAeC,SAC1B,IAAI8D,KAAKT,EAAKE,SAASM,aAAaE,gCAO9CV,EAAKE,UAAYS,OAAOC,KAAKZ,EAAKE,UAAUW,OAAS,IACpDpE,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,yCAAwCC,SAAC,cACvDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mDAAkDC,UAC/DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,SACnCmE,KAAKC,UACJJ,OAAOK,YACLL,OAAOM,QAAQjB,EAAKE,UAAUgB,OAC5BC,IAAA,IAAEC,GAAID,EAAA,OAAM,CAAC,cAAe,aAAc,SAAU,eAAeE,SAASD,MAGhF,KACA,WAOVxE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gCAA+BC,UAC5CC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,iGAAgGC,SAAC,oC,cChE7H,MA6VA,EA7VsDT,IAM/C,IANgD,UACrDQ,EAAY,GAAE,eACd4E,EAAiB,CAAC,EAClBC,OAAQC,EAAa,CAAC,EAAC,aACvBC,EAAY,aACZC,GACDxF,EACC,MAAMyF,GAASC,EAAAA,EAAAA,QAAsB,MAC/BC,GAAeD,EAAAA,EAAAA,QAAuB,MACtCE,GAAgBF,EAAAA,EAAAA,QAAmD,OAElEG,EAAYC,IAAiBtE,EAAAA,EAAAA,UAAS,CAAEuE,MAAO,IAAKC,OAAQ,OAC5DC,EAAWC,IAAgB1E,EAAAA,EAAAA,UAAyB,CACzD2E,cAAe,IAAIC,IACnBC,cAAe,IAAID,OAEdE,EAASC,IAAc/E,EAAAA,EAAAA,UAAuB4D,IAC9CoB,EAAWC,IAAgBjF,EAAAA,EAAAA,UAA2BkF,EAAAA,KAEvDrB,GAAMsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ7I,GAAyBwH,IACvC,KAAEsB,EAAI,QAAEC,EAAO,MAAEC,EAAK,QAAEC,GCYJ,WAAqD,IAApDT,EAAqBU,UAAArC,OAAA,QAAAsC,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EACpD,MAAOJ,EAAMM,IAAW1F,EAAAA,EAAAA,UAA2B,OAC5CqF,EAASM,IAAc3F,EAAAA,EAAAA,WAAS,IAChCsF,EAAOM,IAAY5F,EAAAA,EAAAA,UAAwB,MAE5C6F,GAAiBrF,EAAAA,EAAAA,aAAYsF,UACjCH,GAAW,GACXC,EAAS,MAET,IAEE,MAAMG,EAAS,uBA2CR,CAEL,MAAMC,EAAS,IAAIC,gBACfnB,EAAQoB,aAAaF,EAAOG,OAAO,IAAKrB,EAAQoB,aAChDpB,EAAQrD,WAAWuE,EAAOG,OAAO,QAASrB,EAAQrD,UAAU2E,KAAK,MACjEtB,EAAQuB,eAAeL,EAAOG,OAAO,iBAAkBrB,EAAQuB,cAAcC,YAEjF,MAAMC,QAAiBC,MAAM,GAAD3F,OAAIkF,EAAM,KAAAlF,OAAImF,IAC1C,IAAKO,EAASE,GAAI,MAAM,IAAIC,MAAM,8BAElC,MAAMC,QAAkBJ,EAASK,OACjClB,EAAQiB,EACV,CACF,CAAE,MAAOE,GACPjB,EAASiB,aAAeH,MAAQG,EAAIC,QAAU,qBAC9CpB,EAAQ,KACV,CAAC,QACCC,GAAW,EACb,GACC,CAACb,IAuCJ,OArCA3E,EAAAA,EAAAA,WAAU,KACR0F,KACC,CAACA,IAmCG,CACLT,MAjCoB2B,EAAAA,EAAAA,SAAQ,KAC5B,IAAK3B,EAAM,OAAO,KAMlB,GAAIA,EAAK4B,MAAM7D,OAHU,IAGiB,CAExC,MAIM8D,EAJc,IAAI7B,EAAK4B,OAAOE,KAAK,CAACC,EAAGC,KAAC,IAAAC,EAAAC,EAAA,QACjC,QAAVD,EAAAD,EAAE5E,gBAAQ,IAAA6E,OAAA,EAAVA,EAAYzE,aAAc,KAAgB,QAAV0E,EAAAH,EAAE3E,gBAAQ,IAAA8E,OAAA,EAAVA,EAAY1E,aAAc,KAG5B2E,MAAM,EAThB,KAUjBC,EAAiB,IAAI5C,IAAIqC,EAAapF,IAAI4F,GAAKA,EAAEzG,KASvD,MAAO,CACLgG,MAAOC,EACPS,MATmBtC,EAAKsC,MACvBlE,OAAOvF,GACNuJ,EAAeG,IAA2B,kBAAhB1J,EAAK4E,OAAsB5E,EAAK4E,OAAS5E,EAAK4E,OAAO7B,KAC/EwG,EAAeG,IAA2B,kBAAhB1J,EAAKoD,OAAsBpD,EAAKoD,OAASpD,EAAKoD,OAAOL,KAEhFuG,MAAM,EAhBc,KAsBzB,CAEA,OAAOnC,GACN,CAACA,IAIFC,UACAC,QACAC,QAASM,EAEb,CDlI4C+B,CAAa9C,IAGvD3E,EAAAA,EAAAA,WAAU,KACR,MAAM0H,EAAmBA,KACvB,GAAI1D,EAAa2D,QAAS,CACxB,MAAM,MAAEvD,EAAK,OAAEC,GAAWL,EAAa2D,QAAQC,wBAC/CzD,EAAc,CAAEC,QAAOC,UACzB,GAGFqD,IACA,MAAMG,EAAiB,IAAIC,eAAeJ,GAK1C,OAJI1D,EAAa2D,SACfE,EAAeE,QAAQ/D,EAAa2D,SAG/B,IAAME,EAAeG,cAC3B,KAGHhI,EAAAA,EAAAA,WAAU,KACR,IAAK8D,EAAO6D,UAAY1C,GAAQC,EAAS,OAEzC,MAAM+C,EAAMlD,EAAAA,IAAUjB,EAAO6D,SAC7BM,EAAIC,UAAU,KAAKC,SAGnB,MAAMC,EAAIH,EAAIjC,OAAO,KAAKqC,KAAK,QAAS,mBAGlCC,EAAOvD,EAAAA,MACVwD,YAAY,CAAC7E,EAAO5G,SAAW,GAAK4G,EAAO3G,SAAW,KACtDyL,GAAG,OAASC,IACXL,EAAEC,KAAK,YAAaI,EAAM5D,WAC1BC,EAAa2D,EAAM5D,aAGvBoD,EAAIS,KAAKJ,GAGIL,EAAIjC,OAAO,QACnBA,OAAO,UACTqC,KAAK,KAAM,SACXA,KAAK,UAAW,cAChBA,KAAK,OAAQ,IACbA,KAAK,OAAQ,GACbA,KAAK,cAAe,GACpBA,KAAK,eAAgB,GACrBA,KAAK,SAAU,QACfrC,OAAO,QACPqC,KAAK,IAAK,kBACVA,KAAK,OAAQ7K,EAAqBM,MAGrC,MAAM6K,EAAa5D,EAAAA,IAA8BE,EAAK4B,OACnD+B,MAAM,OAAQ7D,EAAAA,IAAmCE,EAAKsC,OACpD1G,GAAGgI,GAAKA,EAAEhI,IACViI,SAASpF,EAAOrH,cAAgB,KAChC0M,SAASrF,EAAOpH,cAAgB,KAClCsM,MAAM,SAAU7D,EAAAA,MACdgE,SAASrF,EAAOtH,iBAAmB,MACrCwM,MAAM,SAAU7D,EAAAA,IAAeb,EAAWE,MAAQ,EAAGF,EAAWG,OAAS,GACvE0E,SAASrF,EAAOnH,aAAe,MACjCqM,MAAM,YAAa7D,EAAAA,MACjBiE,OAAOtF,EAAOlH,iBAAmB,KAEtCyH,EAAc0D,QAAUgB,EAGxB,MAAMpB,EAAQa,EAAEpC,OAAO,KACpBqC,KAAK,QAAS,SACdH,UAAU,QACVjD,KAAKA,EAAKsC,OACVtB,KAAK,QACLoC,KAAK,SAAU7K,EAAqBM,MACpCuK,KAAK,eAAgBQ,GAAKI,KAAKC,KAAKL,EAAEM,QAAU,IAChDd,KAAK,iBAAkB3E,EAAO7G,aAAe,IAC7CwL,KAAK,aAAc,eACnBG,GAAG,QAAS,CAACC,EAAOI,KACnBJ,EAAMW,kBACNC,EAAgBR,KAEjBL,GAAG,aAAc,CAACC,EAAOI,KACxBtE,EAAa+E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAI,IAAEpL,YAAa2K,EAAEhI,QAEjD2H,GAAG,aAAc,KAChBjE,EAAa+E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAI,IAAEpL,iBAAaoH,OAI5CuB,EAAQuB,EAAEpC,OAAO,KACpBqC,KAAK,QAAS,SACdH,UAAU,UACVjD,KAAKA,EAAK4B,OACVZ,KAAK,UACLoC,KAAK,IAAKQ,GAAKU,EAAoBV,IACnCR,KAAK,OAAQQ,GAAKW,EAAaX,IAC/BR,KAAK,SAAU,QACfA,KAAK,eAAgB,GACrBzG,MAAM,SAAU,WAChB4G,GAAG,QAAS,CAACC,EAAOI,KACnBJ,EAAMW,kBACNK,EAAgBZ,KAEjBL,GAAG,aAAc,CAACC,EAAOI,KACxBtE,EAAa+E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAI,IAAErL,YAAa4K,EAAEhI,MAChD6I,EAAYjB,EAAOI,KAEpBL,GAAG,aAAc,KAChBjE,EAAa+E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAI,IAAErL,iBAAaqH,KAC9CqE,MAEDjB,KAAK3D,EAAAA,MACHyD,GAAG,QAyCR,SAAqBC,EAA+DI,GAC7EJ,EAAMmB,QAAQjB,EAAWkB,YAAY,IAAKC,UAC/CjB,EAAEkB,GAAKlB,EAAEmB,EACTnB,EAAEoB,GAAKpB,EAAEqB,CACX,GA5CK1B,GAAG,OA8CR,SAAiBC,EAA+DI,GAC9EA,EAAEkB,GAAKtB,EAAMuB,EACbnB,EAAEoB,GAAKxB,EAAMyB,CACf,GAhDK1B,GAAG,MAkDR,SAAmBC,EAA+DI,GAC3EJ,EAAMmB,QAAQjB,EAAWkB,YAAY,GAC1ChB,EAAEkB,GAAK,KACPlB,EAAEoB,GAAK,IACT,IAnDA,GAAIvG,EAAOtG,WAAY,CACrB,MAAM+M,EAAS/B,EAAEpC,OAAO,KACrBqC,KAAK,QAAS,UACdH,UAAU,QACVjD,KAAKA,EAAK4B,OACVZ,KAAK,QACL7H,KAAKyK,GAAKA,EAAEtH,OACZ8G,KAAK,YAAa,IAClBA,KAAK,OAAQ7K,EAAqBY,MAClCiK,KAAK,cAAe,UACpBA,KAAK,MAAO,IACZzG,MAAM,iBAAkB,QACxBA,MAAM,cAAe,QAGxB+G,EAAWH,GAAG,cAAe,KAC3B2B,EACG9B,KAAK,IAAKQ,GAAKA,EAAEmB,GAAK,GACtB3B,KAAK,IAAKQ,GAAKA,EAAEqB,GAAK,IAE7B,CAiCA,OA9BAvB,EAAWH,GAAG,OAAQ,KACpBjB,EACGc,KAAK,KAAMQ,GAAMA,EAAEnG,OAAqBsH,GAAK,GAC7C3B,KAAK,KAAMQ,GAAMA,EAAEnG,OAAqBwH,GAAK,GAC7C7B,KAAK,KAAMQ,GAAMA,EAAE3H,OAAqB8I,GAAK,GAC7C3B,KAAK,KAAMQ,GAAMA,EAAE3H,OAAqBgJ,GAAK,GAEhDrD,EACGwB,KAAK,KAAMQ,GAAKA,EAAEmB,GAAK,GACvB3B,KAAK,KAAMQ,GAAKA,EAAEqB,GAAK,KAqBrB,KACLvB,EAAWyB,SAEZ,CAACnF,EAAMf,EAAYR,EAAQwB,IAE9B,MAAMqE,EAAuBpH,IAA6B,IAADJ,EACvD,MAAMsI,EAAa3G,EAAOjH,YAAc,EAClC6N,GAA2B,QAAbvI,EAAAI,EAAKE,gBAAQ,IAAAN,OAAA,EAAbA,EAAeU,aAAc,EACjD,OAAOwG,KAAKsB,IACV7G,EAAOhH,eAAiB,EACxBuM,KAAKuB,IAAI9G,EAAO/G,eAAiB,GAAI0N,EAAaC,KAIhDd,EAAgBrH,GAChBmC,EAAUE,cAAcgD,IAAIrF,EAAKtB,IAC5BrD,EAAqBO,aAE1BuG,EAAUrG,cAAgBkE,EAAKtB,GAC1BrD,EAAqBS,YAEvBT,EAAqB2E,EAAKrB,OAAStD,EAAqBE,OAG3D+L,GAAkBpJ,EAAAA,EAAAA,aAAa8B,IACnCoC,EAAa+E,IACX,MAAMmB,EAAe,IAAIhG,IAAI6E,EAAK9E,eAMlC,OALIiG,EAAajD,IAAIrF,EAAKtB,IACxB4J,EAAaC,OAAOvI,EAAKtB,IAEzB4J,EAAaE,IAAIxI,EAAKtB,KAExBmE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYsE,GAAI,IAAE9E,cAAeiG,MAEvB,OAAZ7G,QAAY,IAAZA,GAAAA,EAAezB,IACd,CAACyB,IAEEyF,GAAkBhJ,EAAAA,EAAAA,aAAavC,IACnCyG,EAAa+E,IACX,MAAMmB,EAAe,IAAIhG,IAAI6E,EAAK5E,eAMlC,OALI+F,EAAajD,IAAI1J,EAAK+C,IACxB4J,EAAaC,OAAO5M,EAAK+C,IAEzB4J,EAAaE,IAAI7M,EAAK+C,KAExBmE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYsE,GAAI,IAAE5E,cAAe+F,MAEvB,OAAZ5G,QAAY,IAAZA,GAAAA,EAAe/F,IACd,CAAC+F,IAEE6F,EAAcA,CAACjB,EAAmBtG,KAEtCyI,QAAQC,IAAI,mBAAoB1I,IAG5BwH,EAAcA,OA2CpB,GAAIzE,EACF,OACEnG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,UACtDC,EAAAA,EAAAA,KAAC+L,EAAAA,EAAc,MAKrB,GAAI3F,EACF,OACEpG,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0CAAyCC,UACtDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,CAAC,6BAA2BqG,OAK/D,MAAMpH,EAAmB,OAAJkH,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,MAAMkE,KAAKzD,GAAKhD,EAAUE,cAAcgD,IAAIF,EAAEzG,KAEzE,OACEjC,EAAAA,EAAAA,MAAA,OAAKoM,IAAKhH,EAAcnF,UAAS,sCAAA6B,OAAwC7B,GAAYC,SAAA,EACnFC,EAAAA,EAAAA,KAAA,OACEiM,IAAKlH,EACLM,MAAOF,EAAWE,MAClBC,OAAQH,EAAWG,OACnBxF,UAAU,mBAGZD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kCAAiCC,SAAA,EAC9CC,EAAAA,EAAAA,KAACkM,EAAW,CAACzL,SAnEGG,IACpBiF,EAAW0E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsE,GAAI,IAAEvD,YAAapG,SAmExCZ,EAAAA,EAAAA,KAACmM,EAAa,CACZ5M,SA7Da6M,KACnB,IAAKrH,EAAO6D,QAAS,OACT5C,EAAAA,IAAUjB,EAAO6D,SACzByD,aAAaC,SAAS,KAAK3C,KAC7B3D,EAAAA,MAAkCuG,QAClC,MAyDI/M,UArDcgN,KACpB,IAAKzH,EAAO6D,QAAS,OACT5C,EAAAA,IAAUjB,EAAO6D,SACzByD,aAAaC,SAAS,KAAK3C,KAC7B3D,EAAAA,MAAkCuG,QAClC,KAiDI9M,YA7CgBgN,KACtB,IAAK1H,EAAO6D,QAAS,OACT5C,EAAAA,IAAUjB,EAAO6D,SACzByD,aAAaC,SAAS,KAAK3C,KAC7B3D,EAAAA,MAAkCF,UAClCE,EAAAA,MAyCItG,UArCcgN,KACpBrG,KAqCMzG,YAAakG,EAAU6G,OAI1BhI,EAAOpG,aACNyB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,KAACsC,EAAW,MAIftD,IACCgB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iCAAgCC,UAC7CC,EAAAA,EAAAA,KAAC4M,EAAa,CACZxJ,KAAMpE,EACNqE,QAASA,IAAMmC,EAAa+E,IAAItE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BsE,GAAI,IACP9E,cAAe,IAAIC,eExTjC,EApDqCmH,KAUjC7M,EAAAA,EAAAA,KAAA,OAAKF,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EAEnCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iDAAgDC,SAAA,EAC7DC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,gCAA+BC,SAAC,8BAC9CC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,6BAA4BC,SAAC,mFAM5CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,EAAAA,KAAC8M,EAAc,CACbhN,UAAU,gBACV+E,aAvBgBzB,IACxByI,QAAQC,IAAI,iBAAkB1I,IAuBtB0B,aApBgB/F,IACxB8M,QAAQC,IAAI,iBAAkB/M,IAoBtB4F,OAAQ,CACNtG,YAAY,EACZE,YAAY,EACZb,WAAY,EACZL,gBAAiB,IACjBC,aAAc,UAMpB0C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iDAAgDC,UAC7DF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0DAAyDC,SAAA,EACtEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,CAAK,UACGC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gCAA+BC,SAAC,UAAW,2BAElEC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,+F","sources":["types/graph.ts","components/KnowledgeGraph/GraphControls.tsx","components/KnowledgeGraph/GraphSearch.tsx","components/KnowledgeGraph/GraphLegend.tsx","components/KnowledgeGraph/NodeInfoPanel.tsx","components/KnowledgeGraph/KnowledgeGraph.tsx","hooks/useGraphData.ts","pages/KnowledgeGraphPage.tsx"],"sourcesContent":["/**\n * Graph visualization types for Knowledge Graph component\n */\n\nexport interface GraphNode {\n  id: string;\n  label: string;\n  type: 'document' | 'entity' | 'concept' | 'tag' | 'folder';\n  group?: string;\n  metadata?: {\n    documentId?: string;\n    confidence?: number;\n    extractedAt?: string;\n    source?: string;\n    description?: string;\n    [key: string]: any;\n  };\n  // D3 simulation properties\n  x?: number;\n  y?: number;\n  vx?: number;\n  vy?: number;\n  fx?: number | null;\n  fy?: number | null;\n}\n\nexport interface GraphEdge {\n  id: string;\n  source: string | GraphNode;\n  target: string | GraphNode;\n  type: 'references' | 'contains' | 'related_to' | 'extracted_from' | 'similar_to';\n  weight?: number;\n  label?: string;\n  metadata?: {\n    confidence?: number;\n    createdAt?: string;\n    context?: string;\n    [key: string]: any;\n  };\n}\n\nexport interface GraphData {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n}\n\nexport interface GraphDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface GraphConfig {\n  // Force simulation parameters\n  chargeStrength?: number;\n  linkDistance?: number;\n  linkStrength?: number;\n  centerForce?: number;\n  collisionRadius?: number;\n\n  // Visual parameters\n  nodeRadius?: number;\n  nodeMinRadius?: number;\n  nodeMaxRadius?: number;\n  edgeWidth?: number;\n  edgeOpacity?: number;\n\n  // Interaction parameters\n  zoomMin?: number;\n  zoomMax?: number;\n  animationDuration?: number;\n\n  // Performance parameters\n  simulationAlpha?: number;\n  simulationAlphaDecay?: number;\n  simulationVelocityDecay?: number;\n\n  // Display options\n  showLabels?: boolean;\n  showEdgeLabels?: boolean;\n  showLegend?: boolean;\n  showMinimap?: boolean;\n}\n\nexport interface GraphFilters {\n  nodeTypes?: string[];\n  edgeTypes?: string[];\n  searchQuery?: string;\n  minConfidence?: number;\n  dateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n  clusters?: string[];\n}\n\nexport interface GraphSelection {\n  selectedNodes: Set<string>;\n  hoveredNode?: string;\n  selectedEdges: Set<string>;\n  hoveredEdge?: string;\n}\n\nexport interface GraphStats {\n  totalNodes: number;\n  totalEdges: number;\n  nodesByType: Record<string, number>;\n  edgesByType: Record<string, number>;\n  avgDegree: number;\n  density: number;\n  clusters: number;\n}\n\nexport interface GraphColorScheme {\n  document: string;\n  entity: string;\n  concept: string;\n  tag: string;\n  folder: string;\n  edge: string;\n  selectedNode: string;\n  selectedEdge: string;\n  hoveredNode: string;\n  hoveredEdge: string;\n  background: string;\n  text: string;\n}\n\nexport const DEFAULT_GRAPH_CONFIG: GraphConfig = {\n  // Force simulation\n  chargeStrength: -300,\n  linkDistance: 100,\n  linkStrength: 0.5,\n  centerForce: 0.05,\n  collisionRadius: 30,\n\n  // Visual\n  nodeRadius: 8,\n  nodeMinRadius: 4,\n  nodeMaxRadius: 20,\n  edgeWidth: 1,\n  edgeOpacity: 0.6,\n\n  // Interaction\n  zoomMin: 0.1,\n  zoomMax: 10,\n  animationDuration: 300,\n\n  // Performance\n  simulationAlpha: 1,\n  simulationAlphaDecay: 0.01,\n  simulationVelocityDecay: 0.3,\n\n  // Display\n  showLabels: true,\n  showEdgeLabels: false,\n  showLegend: true,\n  showMinimap: false,\n};\n\nexport const DEFAULT_COLOR_SCHEME: GraphColorScheme = {\n  document: '#3B82F6', // Blue\n  entity: '#10B981',   // Emerald\n  concept: '#8B5CF6',  // Violet\n  tag: '#F59E0B',      // Amber\n  folder: '#6B7280',   // Gray\n  edge: '#9CA3AF',     // Light gray\n  selectedNode: '#DC2626', // Red\n  selectedEdge: '#DC2626',  // Red\n  hoveredNode: '#059669',   // Green\n  hoveredEdge: '#059669',   // Green\n  background: '#111827',    // Dark background\n  text: '#F3F4F6',         // Light text\n};","import React from 'react';\nimport {\n  MagnifyingGlassPlusIcon,\n  MagnifyingGlassMinusIcon,\n  ArrowPathIcon,\n  ArrowsPointingOutIcon,\n  Cog6ToothIcon,\n} from '@heroicons/react/24/outline';\n\ninterface GraphControlsProps {\n  onZoomIn: () => void;\n  onZoomOut: () => void;\n  onZoomReset: () => void;\n  onRefresh: () => void;\n  onSettingsClick?: () => void;\n  currentZoom: number;\n}\n\nconst GraphControls: React.FC<GraphControlsProps> = ({\n  onZoomIn,\n  onZoomOut,\n  onZoomReset,\n  onRefresh,\n  onSettingsClick,\n  currentZoom,\n}) => {\n  return (\n    <div className=\"flex flex-col bg-gray-800 rounded-lg shadow-lg p-2 space-y-2\">\n      <button\n        onClick={onZoomIn}\n        className=\"p-2 hover:bg-gray-700 rounded-md transition-colors group relative\"\n        title=\"Zoom In\"\n      >\n        <MagnifyingGlassPlusIcon className=\"w-5 h-5 text-gray-300 group-hover:text-white\" />\n      </button>\n\n      <button\n        onClick={onZoomOut}\n        className=\"p-2 hover:bg-gray-700 rounded-md transition-colors group relative\"\n        title=\"Zoom Out\"\n      >\n        <MagnifyingGlassMinusIcon className=\"w-5 h-5 text-gray-300 group-hover:text-white\" />\n      </button>\n\n      <button\n        onClick={onZoomReset}\n        className=\"p-2 hover:bg-gray-700 rounded-md transition-colors group relative\"\n        title=\"Reset Zoom\"\n      >\n        <ArrowsPointingOutIcon className=\"w-5 h-5 text-gray-300 group-hover:text-white\" />\n      </button>\n\n      <div className=\"border-t border-gray-700 pt-2 mt-2\">\n        <div className=\"text-xs text-gray-400 text-center mb-2\">\n          {(currentZoom * 100).toFixed(0)}%\n        </div>\n      </div>\n\n      <button\n        onClick={onRefresh}\n        className=\"p-2 hover:bg-gray-700 rounded-md transition-colors group relative\"\n        title=\"Refresh Graph\"\n      >\n        <ArrowPathIcon className=\"w-5 h-5 text-gray-300 group-hover:text-white\" />\n      </button>\n\n      {onSettingsClick && (\n        <button\n          onClick={onSettingsClick}\n          className=\"p-2 hover:bg-gray-700 rounded-md transition-colors group relative\"\n          title=\"Graph Settings\"\n        >\n          <Cog6ToothIcon className=\"w-5 h-5 text-gray-300 group-hover:text-white\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default GraphControls;","import React, { useState, useCallback, useEffect } from 'react';\nimport { MagnifyingGlassIcon, XMarkIcon } from '@heroicons/react/24/outline';\n\ninterface GraphSearchProps {\n  onSearch: (query: string) => void;\n  placeholder?: string;\n  debounceMs?: number;\n}\n\nconst GraphSearch: React.FC<GraphSearchProps> = ({\n  onSearch,\n  placeholder = 'Search nodes and relationships...',\n  debounceMs = 300,\n}) => {\n  const [query, setQuery] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onSearch(query);\n    }, debounceMs);\n\n    return () => clearTimeout(timer);\n  }, [query, onSearch, debounceMs]);\n\n  const handleClear = useCallback(() => {\n    setQuery('');\n    onSearch('');\n  }, [onSearch]);\n\n  const handleToggle = useCallback(() => {\n    setIsExpanded(!isExpanded);\n    if (!isExpanded) {\n      // Focus input when expanding\n      setTimeout(() => {\n        const input = document.getElementById('graph-search-input');\n        input?.focus();\n      }, 100);\n    } else {\n      // Clear when collapsing\n      handleClear();\n    }\n  }, [isExpanded, handleClear]);\n\n  return (\n    <div className=\"relative\">\n      <div\n        className={`flex items-center bg-gray-800 rounded-lg shadow-lg transition-all duration-300 ${\n          isExpanded ? 'w-64' : 'w-auto'\n        }`}\n      >\n        <button\n          onClick={handleToggle}\n          className=\"p-3 hover:bg-gray-700 rounded-l-lg transition-colors\"\n          title={isExpanded ? 'Close search' : 'Open search'}\n        >\n          <MagnifyingGlassIcon className=\"w-5 h-5 text-gray-300\" />\n        </button>\n\n        {isExpanded && (\n          <>\n            <input\n              id=\"graph-search-input\"\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              placeholder={placeholder}\n              className=\"flex-1 px-3 py-2 bg-transparent text-white placeholder-gray-400 focus:outline-none\"\n            />\n\n            {query && (\n              <button\n                onClick={handleClear}\n                className=\"p-2 hover:bg-gray-700 rounded-r-lg transition-colors\"\n                title=\"Clear search\"\n              >\n                <XMarkIcon className=\"w-4 h-4 text-gray-400\" />\n              </button>\n            )}\n          </>\n        )}\n      </div>\n\n      {isExpanded && query && (\n        <div className=\"absolute top-full mt-2 w-64 bg-gray-800 rounded-lg shadow-lg p-2 z-10\">\n          <div className=\"text-xs text-gray-400 mb-2\">Search filters:</div>\n          <div className=\"space-y-1\">\n            <label className=\"flex items-center text-sm text-gray-300 hover:bg-gray-700 p-1 rounded cursor-pointer\">\n              <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n              Nodes\n            </label>\n            <label className=\"flex items-center text-sm text-gray-300 hover:bg-gray-700 p-1 rounded cursor-pointer\">\n              <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n              Relationships\n            </label>\n            <label className=\"flex items-center text-sm text-gray-300 hover:bg-gray-700 p-1 rounded cursor-pointer\">\n              <input type=\"checkbox\" className=\"mr-2\" />\n              Metadata\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GraphSearch;","import React from 'react';\nimport { DEFAULT_COLOR_SCHEME } from '../../types/graph';\n\ninterface LegendItem {\n  label: string;\n  color: string;\n  type: 'node' | 'edge';\n}\n\nconst GraphLegend: React.FC = () => {\n  const nodeTypes: LegendItem[] = [\n    { label: 'Document', color: DEFAULT_COLOR_SCHEME.document, type: 'node' },\n    { label: 'Entity', color: DEFAULT_COLOR_SCHEME.entity, type: 'node' },\n    { label: 'Concept', color: DEFAULT_COLOR_SCHEME.concept, type: 'node' },\n    { label: 'Tag', color: DEFAULT_COLOR_SCHEME.tag, type: 'node' },\n    { label: 'Folder', color: DEFAULT_COLOR_SCHEME.folder, type: 'node' },\n  ];\n\n  const edgeTypes: LegendItem[] = [\n    { label: 'References', color: DEFAULT_COLOR_SCHEME.edge, type: 'edge' },\n    { label: 'Selected', color: DEFAULT_COLOR_SCHEME.selectedNode, type: 'node' },\n  ];\n\n  return (\n    <div className=\"bg-gray-800 rounded-lg shadow-lg p-4 space-y-3\">\n      <h3 className=\"text-sm font-semibold text-gray-300 mb-2\">Node Types</h3>\n      <div className=\"space-y-2\">\n        {nodeTypes.map((item) => (\n          <div key={item.label} className=\"flex items-center space-x-2\">\n            <div\n              className=\"w-4 h-4 rounded-full border-2 border-white\"\n              style={{ backgroundColor: item.color }}\n            />\n            <span className=\"text-xs text-gray-400\">{item.label}</span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"border-t border-gray-700 pt-3 mt-3\">\n        <h3 className=\"text-sm font-semibold text-gray-300 mb-2\">Interactions</h3>\n        <div className=\"space-y-2\">\n          {edgeTypes.map((item) => (\n            <div key={item.label} className=\"flex items-center space-x-2\">\n              {item.type === 'edge' ? (\n                <div className=\"w-4 h-0.5\" style={{ backgroundColor: item.color }} />\n              ) : (\n                <div\n                  className=\"w-4 h-4 rounded-full border-2\"\n                  style={{\n                    backgroundColor: item.color,\n                    borderColor: item.color\n                  }}\n                />\n              )}\n              <span className=\"text-xs text-gray-400\">{item.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"border-t border-gray-700 pt-3 mt-3\">\n        <h3 className=\"text-sm font-semibold text-gray-300 mb-2\">Controls</h3>\n        <div className=\"space-y-1 text-xs text-gray-400\">\n          <div>• Click: Select node</div>\n          <div>• Drag: Move node</div>\n          <div>• Scroll: Zoom</div>\n          <div>• Shift+Drag: Pan</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphLegend;","import React from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { GraphNode } from '../../types/graph';\n\ninterface NodeInfoPanelProps {\n  node: GraphNode;\n  onClose: () => void;\n}\n\nconst NodeInfoPanel: React.FC<NodeInfoPanelProps> = ({ node, onClose }) => {\n  return (\n    <div className=\"bg-gray-800 rounded-lg shadow-lg p-4\">\n      <div className=\"flex items-start justify-between mb-3\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-white\">{node.label}</h3>\n          <span className=\"text-xs text-gray-400 capitalize\">{node.type}</span>\n        </div>\n        <button\n          onClick={onClose}\n          className=\"p-1 hover:bg-gray-700 rounded transition-colors\"\n        >\n          <XMarkIcon className=\"w-5 h-5 text-gray-400\" />\n        </button>\n      </div>\n\n      {node.metadata?.description && (\n        <div className=\"mb-3\">\n          <h4 className=\"text-sm font-medium text-gray-300 mb-1\">Description</h4>\n          <p className=\"text-sm text-gray-400\">{node.metadata.description}</p>\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        <div>\n          <h4 className=\"text-sm font-medium text-gray-300 mb-1\">Details</h4>\n          <dl className=\"space-y-1\">\n            <div className=\"flex justify-between text-sm\">\n              <dt className=\"text-gray-400\">ID:</dt>\n              <dd className=\"text-gray-300 font-mono text-xs\">{node.id.substring(0, 8)}...</dd>\n            </div>\n            {node.group && (\n              <div className=\"flex justify-between text-sm\">\n                <dt className=\"text-gray-400\">Group:</dt>\n                <dd className=\"text-gray-300\">{node.group}</dd>\n              </div>\n            )}\n            {node.metadata?.confidence && (\n              <div className=\"flex justify-between text-sm\">\n                <dt className=\"text-gray-400\">Confidence:</dt>\n                <dd className=\"text-gray-300\">\n                  {(node.metadata.confidence * 100).toFixed(1)}%\n                </dd>\n              </div>\n            )}\n            {node.metadata?.source && (\n              <div className=\"flex justify-between text-sm\">\n                <dt className=\"text-gray-400\">Source:</dt>\n                <dd className=\"text-gray-300\">{node.metadata.source}</dd>\n              </div>\n            )}\n            {node.metadata?.extractedAt && (\n              <div className=\"flex justify-between text-sm\">\n                <dt className=\"text-gray-400\">Extracted:</dt>\n                <dd className=\"text-gray-300\">\n                  {new Date(node.metadata.extractedAt).toLocaleDateString()}\n                </dd>\n              </div>\n            )}\n          </dl>\n        </div>\n\n        {node.metadata && Object.keys(node.metadata).length > 0 && (\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-300 mb-1\">Metadata</h4>\n            <div className=\"bg-gray-900 rounded p-2 max-h-32 overflow-y-auto\">\n              <pre className=\"text-xs text-gray-400\">\n                {JSON.stringify(\n                  Object.fromEntries(\n                    Object.entries(node.metadata).filter(\n                      ([key]) => !['description', 'confidence', 'source', 'extractedAt'].includes(key)\n                    )\n                  ),\n                  null,\n                  2\n                )}\n              </pre>\n            </div>\n          </div>\n        )}\n\n        <div className=\"pt-3 border-t border-gray-700\">\n          <button className=\"w-full px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors text-sm\">\n            View Related Documents\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeInfoPanel;","import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport * as d3 from 'd3';\nimport {\n  GraphData,\n  GraphNode,\n  GraphEdge,\n  GraphConfig,\n  GraphSelection,\n  GraphFilters,\n  DEFAULT_GRAPH_CONFIG,\n  DEFAULT_COLOR_SCHEME,\n} from '../../types/graph';\nimport GraphControls from './GraphControls';\nimport GraphSearch from './GraphSearch';\nimport GraphLegend from './GraphLegend';\nimport NodeInfoPanel from './NodeInfoPanel';\nimport { useGraphData } from '../../hooks/useGraphData';\nimport LoadingSpinner from '../LoadingSpinner';\n\ninterface KnowledgeGraphProps {\n  className?: string;\n  initialFilters?: GraphFilters;\n  config?: Partial<GraphConfig>;\n  onNodeSelect?: (node: GraphNode) => void;\n  onEdgeSelect?: (edge: GraphEdge) => void;\n}\n\nconst KnowledgeGraph: React.FC<KnowledgeGraphProps> = ({\n  className = '',\n  initialFilters = {},\n  config: userConfig = {},\n  onNodeSelect,\n  onEdgeSelect,\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const simulationRef = useRef<d3.Simulation<GraphNode, GraphEdge> | null>(null);\n\n  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });\n  const [selection, setSelection] = useState<GraphSelection>({\n    selectedNodes: new Set(),\n    selectedEdges: new Set(),\n  });\n  const [filters, setFilters] = useState<GraphFilters>(initialFilters);\n  const [transform, setTransform] = useState<d3.ZoomTransform>(d3.zoomIdentity);\n\n  const config = { ...DEFAULT_GRAPH_CONFIG, ...userConfig };\n  const { data, loading, error, refetch } = useGraphData(filters);\n\n  // Update dimensions on container resize\n  useEffect(() => {\n    const updateDimensions = () => {\n      if (containerRef.current) {\n        const { width, height } = containerRef.current.getBoundingClientRect();\n        setDimensions({ width, height });\n      }\n    };\n\n    updateDimensions();\n    const resizeObserver = new ResizeObserver(updateDimensions);\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  // Initialize and update D3 force simulation\n  useEffect(() => {\n    if (!svgRef.current || !data || loading) return;\n\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove();\n\n    // Create container groups\n    const g = svg.append('g').attr('class', 'graph-container');\n\n    // Add zoom behavior\n    const zoom = d3.zoom<SVGSVGElement, unknown>()\n      .scaleExtent([config.zoomMin || 0.1, config.zoomMax || 10])\n      .on('zoom', (event) => {\n        g.attr('transform', event.transform);\n        setTransform(event.transform);\n      });\n\n    svg.call(zoom);\n\n    // Create arrow markers for directed edges\n    const defs = svg.append('defs');\n    defs.append('marker')\n      .attr('id', 'arrow')\n      .attr('viewBox', '0 -5 10 10')\n      .attr('refX', 20)\n      .attr('refY', 0)\n      .attr('markerWidth', 8)\n      .attr('markerHeight', 8)\n      .attr('orient', 'auto')\n      .append('path')\n      .attr('d', 'M0,-5L10,0L0,5')\n      .attr('fill', DEFAULT_COLOR_SCHEME.edge);\n\n    // Create force simulation\n    const simulation = d3.forceSimulation<GraphNode>(data.nodes)\n      .force('link', d3.forceLink<GraphNode, GraphEdge>(data.edges)\n        .id(d => d.id)\n        .distance(config.linkDistance || 100)\n        .strength(config.linkStrength || 0.5))\n      .force('charge', d3.forceManyBody()\n        .strength(config.chargeStrength || -300))\n      .force('center', d3.forceCenter(dimensions.width / 2, dimensions.height / 2)\n        .strength(config.centerForce || 0.05))\n      .force('collision', d3.forceCollide()\n        .radius(config.collisionRadius || 30));\n\n    simulationRef.current = simulation;\n\n    // Create edge elements\n    const edges = g.append('g')\n      .attr('class', 'edges')\n      .selectAll('line')\n      .data(data.edges)\n      .join('line')\n      .attr('stroke', DEFAULT_COLOR_SCHEME.edge)\n      .attr('stroke-width', d => Math.sqrt(d.weight || 1))\n      .attr('stroke-opacity', config.edgeOpacity || 0.6)\n      .attr('marker-end', 'url(#arrow)')\n      .on('click', (event, d) => {\n        event.stopPropagation();\n        handleEdgeClick(d);\n      })\n      .on('mouseenter', (event, d) => {\n        setSelection(prev => ({ ...prev, hoveredEdge: d.id }));\n      })\n      .on('mouseleave', () => {\n        setSelection(prev => ({ ...prev, hoveredEdge: undefined }));\n      });\n\n    // Create node elements\n    const nodes = g.append('g')\n      .attr('class', 'nodes')\n      .selectAll('circle')\n      .data(data.nodes)\n      .join('circle')\n      .attr('r', d => calculateNodeRadius(d))\n      .attr('fill', d => getNodeColor(d))\n      .attr('stroke', '#fff')\n      .attr('stroke-width', 2)\n      .style('cursor', 'pointer')\n      .on('click', (event, d) => {\n        event.stopPropagation();\n        handleNodeClick(d);\n      })\n      .on('mouseenter', (event, d) => {\n        setSelection(prev => ({ ...prev, hoveredNode: d.id }));\n        showTooltip(event, d);\n      })\n      .on('mouseleave', () => {\n        setSelection(prev => ({ ...prev, hoveredNode: undefined }));\n        hideTooltip();\n      })\n      .call(d3.drag<SVGCircleElement, GraphNode>()\n        .on('start', dragStarted)\n        .on('drag', dragged)\n        .on('end', dragEnded) as any);\n\n    // Create labels if enabled\n    if (config.showLabels) {\n      const labels = g.append('g')\n        .attr('class', 'labels')\n        .selectAll('text')\n        .data(data.nodes)\n        .join('text')\n        .text(d => d.label)\n        .attr('font-size', 12)\n        .attr('fill', DEFAULT_COLOR_SCHEME.text)\n        .attr('text-anchor', 'middle')\n        .attr('dy', -15)\n        .style('pointer-events', 'none')\n        .style('user-select', 'none');\n\n      // Update label positions on simulation tick\n      simulation.on('tick.labels', () => {\n        labels\n          .attr('x', d => d.x || 0)\n          .attr('y', d => d.y || 0);\n      });\n    }\n\n    // Update positions on simulation tick\n    simulation.on('tick', () => {\n      edges\n        .attr('x1', d => (d.source as GraphNode).x || 0)\n        .attr('y1', d => (d.source as GraphNode).y || 0)\n        .attr('x2', d => (d.target as GraphNode).x || 0)\n        .attr('y2', d => (d.target as GraphNode).y || 0);\n\n      nodes\n        .attr('cx', d => d.x || 0)\n        .attr('cy', d => d.y || 0);\n    });\n\n    // Drag functions\n    function dragStarted(event: d3.D3DragEvent<SVGCircleElement, GraphNode, GraphNode>, d: GraphNode) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragged(event: d3.D3DragEvent<SVGCircleElement, GraphNode, GraphNode>, d: GraphNode) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n\n    function dragEnded(event: d3.D3DragEvent<SVGCircleElement, GraphNode, GraphNode>, d: GraphNode) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    return () => {\n      simulation.stop();\n    };\n  }, [data, dimensions, config, loading]);\n\n  const calculateNodeRadius = (node: GraphNode): number => {\n    const baseRadius = config.nodeRadius || 8;\n    const scaleFactor = node.metadata?.confidence || 1;\n    return Math.max(\n      config.nodeMinRadius || 4,\n      Math.min(config.nodeMaxRadius || 20, baseRadius * scaleFactor)\n    );\n  };\n\n  const getNodeColor = (node: GraphNode): string => {\n    if (selection.selectedNodes.has(node.id)) {\n      return DEFAULT_COLOR_SCHEME.selectedNode;\n    }\n    if (selection.hoveredNode === node.id) {\n      return DEFAULT_COLOR_SCHEME.hoveredNode;\n    }\n    return DEFAULT_COLOR_SCHEME[node.type] || DEFAULT_COLOR_SCHEME.entity;\n  };\n\n  const handleNodeClick = useCallback((node: GraphNode) => {\n    setSelection(prev => {\n      const newSelection = new Set(prev.selectedNodes);\n      if (newSelection.has(node.id)) {\n        newSelection.delete(node.id);\n      } else {\n        newSelection.add(node.id);\n      }\n      return { ...prev, selectedNodes: newSelection };\n    });\n    onNodeSelect?.(node);\n  }, [onNodeSelect]);\n\n  const handleEdgeClick = useCallback((edge: GraphEdge) => {\n    setSelection(prev => {\n      const newSelection = new Set(prev.selectedEdges);\n      if (newSelection.has(edge.id)) {\n        newSelection.delete(edge.id);\n      } else {\n        newSelection.add(edge.id);\n      }\n      return { ...prev, selectedEdges: newSelection };\n    });\n    onEdgeSelect?.(edge);\n  }, [onEdgeSelect]);\n\n  const showTooltip = (event: MouseEvent, node: GraphNode) => {\n    // Tooltip implementation would go here\n    console.log('Show tooltip for', node);\n  };\n\n  const hideTooltip = () => {\n    // Hide tooltip implementation\n  };\n\n  const handleSearch = (query: string) => {\n    setFilters(prev => ({ ...prev, searchQuery: query }));\n  };\n\n  const handleFilterChange = (newFilters: GraphFilters) => {\n    setFilters(newFilters);\n  };\n\n  const handleZoomIn = () => {\n    if (!svgRef.current) return;\n    const svg = d3.select(svgRef.current);\n    svg.transition().duration(300).call(\n      d3.zoom<SVGSVGElement, unknown>().scaleBy as any,\n      1.3\n    );\n  };\n\n  const handleZoomOut = () => {\n    if (!svgRef.current) return;\n    const svg = d3.select(svgRef.current);\n    svg.transition().duration(300).call(\n      d3.zoom<SVGSVGElement, unknown>().scaleBy as any,\n      0.7\n    );\n  };\n\n  const handleZoomReset = () => {\n    if (!svgRef.current) return;\n    const svg = d3.select(svgRef.current);\n    svg.transition().duration(300).call(\n      d3.zoom<SVGSVGElement, unknown>().transform as any,\n      d3.zoomIdentity\n    );\n  };\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-red-500\">Error loading graph data: {error}</div>\n      </div>\n    );\n  }\n\n  const selectedNode = data?.nodes.find(n => selection.selectedNodes.has(n.id));\n\n  return (\n    <div ref={containerRef} className={`relative w-full h-full bg-gray-900 ${className}`}>\n      <svg\n        ref={svgRef}\n        width={dimensions.width}\n        height={dimensions.height}\n        className=\"w-full h-full\"\n      />\n\n      <div className=\"absolute top-4 left-4 space-y-4\">\n        <GraphSearch onSearch={handleSearch} />\n        <GraphControls\n          onZoomIn={handleZoomIn}\n          onZoomOut={handleZoomOut}\n          onZoomReset={handleZoomReset}\n          onRefresh={handleRefresh}\n          currentZoom={transform.k}\n        />\n      </div>\n\n      {config.showLegend && (\n        <div className=\"absolute top-4 right-4\">\n          <GraphLegend />\n        </div>\n      )}\n\n      {selectedNode && (\n        <div className=\"absolute bottom-4 right-4 w-80\">\n          <NodeInfoPanel\n            node={selectedNode}\n            onClose={() => setSelection(prev => ({\n              ...prev,\n              selectedNodes: new Set(),\n            }))}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default KnowledgeGraph;","import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { GraphData, GraphFilters, GraphNode, GraphEdge } from '../types/graph';\n\n// Mock data generator for testing\nconst generateMockData = (nodeCount: number = 100): GraphData => {\n  const nodes: GraphNode[] = [];\n  const edges: GraphEdge[] = [];\n\n  const types: GraphNode['type'][] = ['document', 'entity', 'concept', 'tag', 'folder'];\n\n  // Generate nodes\n  for (let i = 0; i < nodeCount; i++) {\n    nodes.push({\n      id: `node-${i}`,\n      label: `Node ${i}`,\n      type: types[Math.floor(Math.random() * types.length)],\n      group: `group-${Math.floor(i / 10)}`,\n      metadata: {\n        confidence: Math.random(),\n        extractedAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n        source: `source-${Math.floor(Math.random() * 5)}`,\n        description: `This is a description for node ${i}`,\n      },\n    });\n  }\n\n  // Generate edges (roughly 2x nodes for good connectivity)\n  const edgeCount = nodeCount * 2;\n  const edgeTypes: GraphEdge['type'][] = ['references', 'contains', 'related_to', 'extracted_from', 'similar_to'];\n\n  for (let i = 0; i < edgeCount; i++) {\n    const source = Math.floor(Math.random() * nodeCount);\n    const target = Math.floor(Math.random() * nodeCount);\n\n    if (source !== target) {\n      edges.push({\n        id: `edge-${i}`,\n        source: `node-${source}`,\n        target: `node-${target}`,\n        type: edgeTypes[Math.floor(Math.random() * edgeTypes.length)],\n        weight: Math.random() * 5 + 1,\n        metadata: {\n          confidence: Math.random(),\n          createdAt: new Date().toISOString(),\n        },\n      });\n    }\n  }\n\n  return { nodes, edges };\n};\n\ninterface UseGraphDataReturn {\n  data: GraphData | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => void;\n}\n\nexport const useGraphData = (filters: GraphFilters = {}): UseGraphDataReturn => {\n  const [data, setData] = useState<GraphData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchGraphData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // In production, this would be an API call\n      const apiUrl = '/api/knowledge-graph';\n\n      // For now, use mock data\n      if (process.env.NODE_ENV === 'development') {\n        // Simulate network delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n        // Generate mock data with performance considerations\n        const nodeCount = filters.searchQuery ? 50 : 200; // Reduce nodes when searching\n        const mockData = generateMockData(nodeCount);\n\n        // Apply filters\n        let filteredData = { ...mockData };\n\n        if (filters.searchQuery) {\n          const query = filters.searchQuery.toLowerCase();\n          filteredData.nodes = mockData.nodes.filter(node =>\n            node.label.toLowerCase().includes(query) ||\n            node.type.includes(query) ||\n            node.metadata?.description?.toLowerCase().includes(query)\n          );\n\n          // Filter edges to only include those connecting filtered nodes\n          const nodeIds = new Set(filteredData.nodes.map(n => n.id));\n          filteredData.edges = mockData.edges.filter(edge =>\n            nodeIds.has(typeof edge.source === 'string' ? edge.source : edge.source.id) &&\n            nodeIds.has(typeof edge.target === 'string' ? edge.target : edge.target.id)\n          );\n        }\n\n        if (filters.nodeTypes && filters.nodeTypes.length > 0) {\n          filteredData.nodes = filteredData.nodes.filter(node =>\n            filters.nodeTypes!.includes(node.type)\n          );\n        }\n\n        if (filters.minConfidence !== undefined) {\n          filteredData.nodes = filteredData.nodes.filter(node =>\n            (node.metadata?.confidence || 0) >= filters.minConfidence!\n          );\n        }\n\n        setData(filteredData);\n      } else {\n        // Production API call\n        const params = new URLSearchParams();\n        if (filters.searchQuery) params.append('q', filters.searchQuery);\n        if (filters.nodeTypes) params.append('types', filters.nodeTypes.join(','));\n        if (filters.minConfidence) params.append('min_confidence', filters.minConfidence.toString());\n\n        const response = await fetch(`${apiUrl}?${params}`);\n        if (!response.ok) throw new Error('Failed to fetch graph data');\n\n        const graphData = await response.json();\n        setData(graphData);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n      setData(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  useEffect(() => {\n    fetchGraphData();\n  }, [fetchGraphData]);\n\n  // Performance optimization: memoize filtered data\n  const optimizedData = useMemo(() => {\n    if (!data) return null;\n\n    // For large graphs, implement level-of-detail (LOD) optimization\n    const MAX_RENDER_NODES = 500;\n    const MAX_RENDER_EDGES = 1000;\n\n    if (data.nodes.length > MAX_RENDER_NODES) {\n      // Sort by importance (confidence) and take top nodes\n      const sortedNodes = [...data.nodes].sort((a, b) =>\n        (b.metadata?.confidence || 0) - (a.metadata?.confidence || 0)\n      );\n\n      const visibleNodes = sortedNodes.slice(0, MAX_RENDER_NODES);\n      const visibleNodeIds = new Set(visibleNodes.map(n => n.id));\n\n      const visibleEdges = data.edges\n        .filter(edge =>\n          visibleNodeIds.has(typeof edge.source === 'string' ? edge.source : edge.source.id) &&\n          visibleNodeIds.has(typeof edge.target === 'string' ? edge.target : edge.target.id)\n        )\n        .slice(0, MAX_RENDER_EDGES);\n\n      return {\n        nodes: visibleNodes,\n        edges: visibleEdges,\n      };\n    }\n\n    return data;\n  }, [data]);\n\n  return {\n    data: optimizedData,\n    loading,\n    error,\n    refetch: fetchGraphData,\n  };\n};\n\n// Hook for graph statistics\nexport const useGraphStats = (data: GraphData | null) => {\n  return useMemo(() => {\n    if (!data) return null;\n\n    const nodesByType: Record<string, number> = {};\n    const edgesByType: Record<string, number> = {};\n\n    data.nodes.forEach(node => {\n      nodesByType[node.type] = (nodesByType[node.type] || 0) + 1;\n    });\n\n    data.edges.forEach(edge => {\n      edgesByType[edge.type] = (edgesByType[edge.type] || 0) + 1;\n    });\n\n    // Calculate average degree\n    const degrees = new Map<string, number>();\n    data.edges.forEach(edge => {\n      const sourceId = typeof edge.source === 'string' ? edge.source : edge.source.id;\n      const targetId = typeof edge.target === 'string' ? edge.target : edge.target.id;\n      degrees.set(sourceId, (degrees.get(sourceId) || 0) + 1);\n      degrees.set(targetId, (degrees.get(targetId) || 0) + 1);\n    });\n\n    const avgDegree = Array.from(degrees.values()).reduce((a, b) => a + b, 0) / degrees.size || 0;\n\n    // Calculate density (actual edges / possible edges)\n    const possibleEdges = data.nodes.length * (data.nodes.length - 1) / 2;\n    const density = possibleEdges > 0 ? data.edges.length / possibleEdges : 0;\n\n    return {\n      totalNodes: data.nodes.length,\n      totalEdges: data.edges.length,\n      nodesByType,\n      edgesByType,\n      avgDegree,\n      density,\n      clusters: Object.keys(nodesByType).length,\n    };\n  }, [data]);\n};","import React from 'react';\nimport { KnowledgeGraph } from '../components/KnowledgeGraph';\n\nconst KnowledgeGraphPage: React.FC = () => {\n  const handleNodeSelect = (node: any) => {\n    console.log('Node selected:', node);\n  };\n\n  const handleEdgeSelect = (edge: any) => {\n    console.log('Edge selected:', edge);\n  };\n\n  return (\n    <div className=\"h-screen bg-gray-900\">\n      <div className=\"h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"bg-gray-800 border-b border-gray-700 px-6 py-4\">\n          <h1 className=\"text-2xl font-bold text-white\">Knowledge Graph Explorer</h1>\n          <p className=\"text-sm text-gray-400 mt-1\">\n            Interactive visualization of document relationships and extracted entities\n          </p>\n        </div>\n\n        {/* Graph Container */}\n        <div className=\"flex-1 relative\">\n          <KnowledgeGraph\n            className=\"w-full h-full\"\n            onNodeSelect={handleNodeSelect}\n            onEdgeSelect={handleEdgeSelect}\n            config={{\n              showLabels: true,\n              showLegend: true,\n              nodeRadius: 8,\n              chargeStrength: -400,\n              linkDistance: 120,\n            }}\n          />\n        </div>\n\n        {/* Status Bar */}\n        <div className=\"bg-gray-800 border-t border-gray-700 px-6 py-2\">\n          <div className=\"flex items-center justify-between text-sm text-gray-400\">\n            <div>\n              Press <kbd className=\"px-2 py-1 bg-gray-700 rounded\">Space</kbd> to pause simulation\n            </div>\n            <div>\n              Use mouse wheel to zoom • Click and drag to pan • Click nodes to select\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default KnowledgeGraphPage;"],"names":["DEFAULT_GRAPH_CONFIG","chargeStrength","linkDistance","linkStrength","centerForce","collisionRadius","nodeRadius","nodeMinRadius","nodeMaxRadius","edgeWidth","edgeOpacity","zoomMin","zoomMax","animationDuration","simulationAlpha","simulationAlphaDecay","simulationVelocityDecay","showLabels","showEdgeLabels","showLegend","showMinimap","DEFAULT_COLOR_SCHEME","document","entity","concept","tag","folder","edge","selectedNode","selectedEdge","hoveredNode","hoveredEdge","background","text","_ref","onZoomIn","onZoomOut","onZoomReset","onRefresh","onSettingsClick","currentZoom","_jsxs","className","children","_jsx","onClick","title","MagnifyingGlassPlusIcon","MagnifyingGlassMinusIcon","ArrowsPointingOutIcon","toFixed","ArrowPathIcon","Cog6ToothIcon","onSearch","placeholder","debounceMs","query","setQuery","useState","isExpanded","setIsExpanded","useEffect","timer","setTimeout","clearTimeout","handleClear","useCallback","handleToggle","input","getElementById","focus","concat","MagnifyingGlassIcon","_Fragment","id","type","value","onChange","e","target","XMarkIcon","defaultChecked","GraphLegend","nodeTypes","label","color","edgeTypes","map","item","style","backgroundColor","borderColor","_node$metadata","_node$metadata2","_node$metadata3","_node$metadata4","node","onClose","metadata","description","substring","group","confidence","source","extractedAt","Date","toLocaleDateString","Object","keys","length","JSON","stringify","fromEntries","entries","filter","_ref2","key","includes","initialFilters","config","userConfig","onNodeSelect","onEdgeSelect","svgRef","useRef","containerRef","simulationRef","dimensions","setDimensions","width","height","selection","setSelection","selectedNodes","Set","selectedEdges","filters","setFilters","transform","setTransform","d3","_objectSpread","data","loading","error","refetch","arguments","undefined","setData","setLoading","setError","fetchGraphData","async","apiUrl","params","URLSearchParams","searchQuery","append","join","minConfidence","toString","response","fetch","ok","Error","graphData","json","err","message","useMemo","nodes","visibleNodes","sort","a","b","_b$metadata","_a$metadata","slice","visibleNodeIds","n","edges","has","useGraphData","updateDimensions","current","getBoundingClientRect","resizeObserver","ResizeObserver","observe","disconnect","svg","selectAll","remove","g","attr","zoom","scaleExtent","on","event","call","simulation","force","d","distance","strength","radius","Math","sqrt","weight","stopPropagation","handleEdgeClick","prev","calculateNodeRadius","getNodeColor","handleNodeClick","showTooltip","hideTooltip","active","alphaTarget","restart","fx","x","fy","y","labels","stop","baseRadius","scaleFactor","max","min","newSelection","delete","add","console","log","LoadingSpinner","find","ref","GraphSearch","GraphControls","handleZoomIn","transition","duration","scaleBy","handleZoomOut","handleZoomReset","handleRefresh","k","NodeInfoPanel","KnowledgeGraphPage","KnowledgeGraph"],"sourceRoot":""}
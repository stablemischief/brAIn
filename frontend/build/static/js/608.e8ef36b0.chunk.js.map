{"version":3,"file":"static/js/608.e8ef36b0.chunk.js","mappings":"gVA2BAA,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAoBK,MAqVP,EArVmDC,IAM5C,IAADC,EAAA,IAN8C,KAClDC,EAAI,UACJC,EAAY,OAAM,UAClBC,EAAS,UACTC,EAAY,GAAE,aACdC,GAAe,GAChBN,EACC,MAAOO,EAAmBC,GAAwBC,EAAAA,SAAwCN,IACnFO,EAAQC,GAAaF,EAAAA,SAA+C,QAGrEG,GAAUC,EAAAA,EAAAA,SAAsB,KACpC,IAAKX,GAAwB,IAAhBA,EAAKY,OAChB,MAAO,CACLC,MAAO,SACPC,gBAAiB,EACjBC,YAAa,EACbC,UAAW,EACXC,QAAS,KACTC,UAAW,MAIf,MAAMF,EAAYhB,EAAKmB,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GACtDP,EAAcC,EAAYhB,EAAKY,OAE/BK,EAAUjB,EAAKmB,OAAO,CAACI,EAAMF,IACjCA,EAAIC,OAAY,OAAJC,QAAI,IAAJA,OAAI,EAAJA,EAAMD,OAAQ,GAAKD,EAAME,EAAMvB,EAAK,IAG5CkB,EAAYlB,EAAKmB,OAAO,CAACK,EAAQH,IACrCA,EAAIC,OAAc,OAANE,QAAM,IAANA,OAAM,EAANA,EAAQF,OAAQG,KAAYJ,EAAMG,EAAQxB,EAAK,IAI7D,IAAIa,EAAgD,SAChDC,EAAkB,EAEtB,GAAId,EAAKY,QAAU,EAAG,CACpB,MAAMc,EAAY1B,EAAK2B,MAAM,EAAGC,KAAKC,MAAM7B,EAAKY,OAAS,IACnDkB,EAAa9B,EAAK2B,MAAMC,KAAKC,MAAM7B,EAAKY,OAAS,IAEjDmB,EAAeL,EAAUP,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAKI,EAAUd,OAC7EoB,EAAgBF,EAAWX,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAKQ,EAAWlB,OAElFgB,KAAKK,IAAID,EAAgBD,GAAgB,MAC3ClB,EAAQmB,EAAgBD,EAAe,aAAe,aACtDjB,EAAkBc,KAAKK,KAAMD,EAAgBD,GAAgBA,EAAgB,KAEjF,CAEA,MAAO,CACLlB,QACAC,kBACAC,cACAC,YACAC,UACAC,cAED,CAAClB,IAGEkC,GAAYvB,EAAAA,EAAAA,SAAQ,KAcP,CACfwB,OAdanC,EAAKoC,IAAIf,GAAOA,EAAIgB,MAejCC,SAAU,CACR,CACEC,MAAkB,SAAX/B,EAAoB,WAAwB,WAAXA,EAAsB,SAAW,WACzER,KAAMA,EAAKoC,IAhBCf,IAChB,OAAQb,GACN,IAAK,SACH,OAAOa,EAAImB,OACb,IAAK,WACH,OAAOnB,EAAIoB,SACb,QACE,OAAOpB,EAAIC,QAUXoB,YAAa,oBACbC,gBAAuC,SAAtBtC,EACb,0BACA,0BACJuC,QAAS,GACTC,KAA4B,SAAtBxC,EACNyC,iBAAkB,EAClBC,0BAA2B,oBAC3BC,sBAAuB,qBACvBC,sBAAuB,MAM5B,CAACjD,EAAMQ,EAAQH,IAGZ6C,GAAevC,EAAAA,EAAAA,SAAQ,MAC3BwC,YAAY,EACZC,qBAAqB,EACrBC,QAAS,CACPC,OAAQ,CACNC,SAAS,EACTC,SAAU,MACVrB,OAAQ,CACNsB,MAAO,qBACPC,eAAe,EACfC,WAAY,WAGhBC,QAAS,CACPC,KAAM,QACNC,WAAW,EACXnB,gBAAiB,yBACjBoB,WAAY,qBACZC,UAAW,qBACXtB,YAAa,kBACbuB,YAAa,EACbC,aAAc,EACdC,eAAe,EACfC,UAAW,CACT7B,MAAQ8B,IACN,MAAMC,EAAQD,EAAQE,OAAOC,EAC7B,OAAQhE,GACN,IAAK,OACH,MAAM,GAANiE,OAAUJ,EAAQK,QAAQnC,MAAK,OAAAkC,OAAMH,EAAMK,QAAQ,IACrD,IAAK,SACH,MAAM,GAANF,OAAUJ,EAAQK,QAAQnC,MAAK,MAAAkC,OAAKH,EAAMM,kBAC5C,QACE,MAAM,GAANH,OAAUJ,EAAQK,QAAQnC,MAAK,MAAAkC,OAAKH,KAG1CO,WAAYA,KAAA,CACVnC,YAAa,oBACbC,gBAAiB,yBAKzBmC,OAAQ,CACNC,EAAG,CACDC,KAAM,WACNC,KAAM,CACJxB,MAAO,2BACPyB,YAAY,GAEdC,MAAO,CACL1B,MAAO,qBACP2B,SAAU,SAASd,EAAYe,GAAgB,IAADC,EAC5C,MAAMjD,EAAkB,QAAdiD,EAAGtF,EAAKqF,UAAM,IAAAC,OAAA,EAAXA,EAAajD,KAC1B,OAAOA,GAAOkD,EAAAA,EAAAA,KAAOC,EAAAA,EAAAA,GAASnD,GAAO,UAAY,EACnD,EACAoD,cAAe,IAGnBjB,EAAG,CACDkB,aAAa,EACbT,KAAM,CACJxB,MAAO,2BACPyB,YAAY,GAEdC,MAAO,CACL1B,MAAO,qBACP2B,SAAU,SAASd,GACjB,OAAQ9D,GACN,IAAK,OACH,MAAM,IAANiE,OAAWH,EAAMK,QAAQ,IAC3B,IAAK,SACH,MAAM,GAANF,QAAWH,EAAQ,KAAMK,QAAQ,GAAE,KACrC,QACE,OAAOL,EAAMqB,WAEnB,KAINC,YAAa,CACX/B,KAAM,UACNgC,KAAM,IACN/B,WAAW,GAEbgC,UAAW,CACTC,SAAU,IACVC,OAAQ,oBAER,CAAChG,EAAMQ,IAELyF,EAAa,CACjB,CAAE3B,MAAO,OAAQ/B,MAAO,OAAQ2D,KAAMC,EAAAA,GACtC,CAAE7B,MAAO,OAAQ/B,MAAO,OAAQ2D,KAAME,EAAAA,GACtC,CAAE9B,MAAO,MAAO/B,MAAO,MAAO2D,KAAMG,EAAAA,IAwBtC,OAAKrG,GAAwB,IAAhBA,EAAKY,QAchB0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAS,oFAAAsE,OAAsFtE,GAAYoG,SAAA,EAE9GD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,WAAUoG,SAAA,EACvBD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qEAAoEoG,SAAA,EACjFD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,iBAGpEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SAC3C,OAAdrG,EAAqB,cAA8B,QAAdA,EAAsB,eAAiB,oBAIhFE,IACCkG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,SAnDvD,CACpB,CAAEjC,MAAO,OAAQ/B,MAAO,WAAYkB,MAAO,iBAC3C,CAAEa,MAAO,SAAU/B,MAAO,SAAUkB,MAAO,kBAC3C,CAAEa,MAAO,WAAY/B,MAAO,WAAYkB,MAAO,oBAiDpBrB,IAAKqE,IAClBD,EAAAA,EAAAA,KAAA,UAEEE,QAASA,IAAMjG,EAAUgG,EAAEnC,OAC3BnE,UAAS,8DAAAsE,OACPjE,IAAWiG,EAAEnC,MACT,oEACA,8EACHiC,SAEFE,EAAElE,OAREkE,EAAEnC,WAcbkC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,SAC9DN,EAAW7D,IAAK4C,IACf,MAAM2B,EAAO3B,EAAKkB,KAClB,OACEM,EAAAA,EAAAA,KAAA,UAEEE,QAASA,IAAMpG,EAAqB0E,EAAKV,OACzCnE,UAAS,oCAAAsE,OACPpE,IAAsB2E,EAAKV,MACvB,oEACA,8EAENsC,MAAO5B,EAAKzC,MAAMgE,UAElBC,EAAAA,EAAAA,KAACG,EAAI,CAACxG,UAAU,aATX6E,EAAKV,kBAmBxBgC,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,6CAA4CoG,SAAA,EACzDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,WACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,sDAAqDoG,SAAA,CAAC,IAC/D7F,EAAQM,UAAU2D,QAAQ,UAGhC2B,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,aACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,sDAAqDoG,SAAA,CAAC,IAC/D7F,EAAQK,YAAY4D,QAAQ,UAGlC2B,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,cACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,sDAAqDoG,SAAA,CAAC,KAChD,QAAfxG,EAAAW,EAAQO,eAAO,IAAAlB,OAAA,EAAfA,EAAiBuB,KAAKqD,QAAQ,KAAM,cAG1C6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,+CAA8CoG,UAC3DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,CACnB,eAAlB7F,EAAQG,OACP2F,EAAAA,EAAAA,KAACK,EAAAA,EAAmB,CAAC1G,UAAU,yBACX,eAAlBO,EAAQG,OACV2F,EAAAA,EAAAA,KAACM,EAAAA,EAAqB,CAAC3G,UAAU,2BAC/B,MACJmG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,WACxDC,EAAAA,EAAAA,KAAA,KAAGrG,UAAS,yBAAAsE,OACQ,eAAlB/D,EAAQG,MACJ,iCACkB,eAAlBH,EAAQG,MACR,qCACA,oCACH0F,SACA7F,EAAQI,gBAAkB,EAAC,GAAA2D,OAAM/D,EAAQI,gBAAgB6D,QAAQ,GAAE,KAAM,0BAStF6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,WAAUoG,UACvBC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SAnIZQ,MAClB,MAAMC,EAAc,CAClBhH,KAAMkC,EACN+E,QAAS/D,EACTgE,OAAQ,KAGV,MACO,QADC7G,GAEGmG,EAAAA,EAAAA,KAACW,EAAAA,IAAGC,EAAAA,EAAAA,GAAA,GAAKJ,KAETR,EAAAA,EAAAA,KAACa,EAAAA,IAAID,EAAAA,EAAAA,GAAA,GAAKJ,KAyHdD,WAnHLP,EAAAA,EAAAA,KAAA,OAAKrG,UAAS,wFAAAsE,OAA0FtE,GAAYoG,UAClHC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,yEAAwEoG,UACrFD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAACH,EAAAA,EAAY,CAAClG,UAAU,4BACxBqG,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yD,4CClPR,MA8eP,EA9e2DzG,IAIpD,IAJqD,WAC1DwH,EAAU,eACVC,EAAc,UACdpH,EAAY,IACbL,EACC,MAAO0H,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,IAoB/B,QACJG,EAAO,aACPC,EACAC,WAAW,OAAEC,EAAM,QAAEC,GAAS,MAC9BC,EAAK,MACLC,IACEC,EAAAA,EAAAA,IAAwB,CAC1BC,cAAe,CACbC,aAAchB,EAAWiB,cACzBC,WAAYlB,EAAWiB,cAAgB,GACvCE,eAAgB,GAChBC,cAAc,EACdC,gBAAgB,EAChBC,iBAAkB,MAIhBC,EAAgBV,IAgCtB,OACE7B,EAAAA,EAAAA,MAAA,OAAKnG,UAAS,aAAAsE,OAAetE,GAAYoG,SAAA,EAEvCD,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BrE,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yCAAwCoG,SAAA,EACrDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,qBAGpEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SAAC,0CAK7DiB,IACAlB,EAAAA,EAAAA,MAAA,UACEI,QAASA,IAAMe,GAAa,GAC5BtH,UAAU,kHAAiHoG,SAAA,EAE3HC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAgB,CAAChJ,UAAU,YAAY,qBAO9CmG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EACxBD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,uDAAsDoG,SAAC,6BAGvED,EAAAA,EAAAA,MAAA,QAAMnG,UAAS,yBAAAsE,OA9CnB6C,EAAW8B,+BAAiC,GAAW,iCACvD9B,EAAW8B,+BAAiC,GAAW,uCACpD,sCA4CoE7C,SAAA,CAAC,IAChEe,EAAW+B,oBAAoB1E,QAAQ,GAAG,OAAK2C,EAAWiB,cAAc5D,QAAQ,UAItF6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,uDAAsDoG,UACnEC,EAAAA,EAAAA,KAAA,OACErG,UAAS,gDAAAsE,OA/Cf6C,EAAW8B,+BAAiC,GAAW,aACvD9B,EAAW8B,+BAAiC,GAAW,gBACpD,gBA8CGE,MAAO,CAAEC,MAAM,GAAD9E,OAAK7C,KAAK4H,IAAIlC,EAAW8B,8BAA+B,KAAI,WAI9E9C,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,gEAA+DoG,SAAA,EAC5EC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,QACND,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOe,EAAW8B,8BAA8BzE,QAAQ,GAAG,aAC3D6B,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gBAKVD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,gGAA+FoG,SAAA,EAC5GD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5De,EAAWmC,iBAAiB9E,QAAQ,OAExC6B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,kBAE1DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5De,EAAWoC,0BAA0B/E,QAAQ,OAEjD6B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,wBAE1DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BD,EAAAA,EAAAA,MAAA,KAAGnG,UAAS,sBAAAsE,OACV6C,EAAWoC,0BAA4BpC,EAAWiB,cAC9C,iCACA,sCACHhC,SAAA,CACAe,EAAWoC,0BAA4BpC,EAAWiB,cAAgB,IAAM,GAAG,KACzEjB,EAAWoC,0BAA4BpC,EAAWiB,eAAe5D,QAAQ,OAE9E2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CACpDe,EAAWoC,0BAA4BpC,EAAWiB,cAAgB,OAAS,QAAQ,oBAMxFjB,EAAWqC,OAAOC,mBAAqBtC,EAAWqC,OAAOE,aAAevC,EAAWqC,OAAOG,oBAC1FxD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0DAAyDoG,SAAA,EACtED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,6BACnCqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4CAA2CoG,SAAC,sBAG9DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,CACvBe,EAAWqC,OAAOC,oBACjBtD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,4EAA2EoG,SAAA,EACxFC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAC7J,UAAU,kDACpBmG,EAAAA,EAAAA,MAAA,QAAMnG,UAAU,+CAA8CoG,SAAA,CAAC,qCAC1Be,EAAW8B,8BAA8BzE,QAAQ,GAAG,gBAK5F2C,EAAWqC,OAAOE,cACjBvD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,sEAAqEoG,SAAA,EAClFC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,4CACnCqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,yCAAwCoG,SAAC,+BAM5De,EAAWqC,OAAOG,mBACjBxD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,4EAA2EoG,SAAA,EACxFC,EAAAA,EAAAA,KAACwD,EAAAA,EAAQ,CAAC7J,UAAU,kDACpBqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,+CAA8CoG,SAAC,6CAW1EiB,IACClB,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BrE,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAACyD,EAAAA,EAAa,CAAC9J,UAAU,8CACzBqG,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,6BAKtED,EAAAA,EAAAA,MAAA,QAAM4D,SAAUpC,EAvKPqC,UACfvC,GAAU,GACV,UACQL,EAAevH,GACrByH,GAAa,GACbS,EAAMlI,EACR,CAAE,MAAOoK,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,CAAC,QACCxC,GAAU,EACZ,IA6J8CzH,UAAU,YAAWoG,SAAA,EAC3DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,wCAAuCoG,SAAA,EAEpDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,0BAGnFC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,eACL1C,QAASA,EACT2C,MAAO,CACLC,SAAU,4BACVjB,IAAK,CAAElF,MAAO,EAAGoG,QAAS,uBAC1BC,IAAK,CAAErG,MAAO,IAAOoG,QAAS,8BAEhCE,OAAQC,IAAA,IAAC,MAAEC,GAAOD,EAAA,OAChBvE,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,WAAUoG,SAAA,EACvBC,EAAAA,EAAAA,KAACuE,EAAAA,EAAkB,CAAC5K,UAAU,8EAC9BqG,EAAAA,EAAAA,KAAA,SAAAY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM0D,GAAK,IACT9F,KAAK,SACLgG,KAAK,OACLxB,IAAI,IACJmB,IAAI,QACJxK,UAAU,2KACV8K,YAAY,kBAKnBjD,EAAOM,eACN9B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,8CAA6CoG,SACvDyB,EAAOM,aAAaoC,cAM3BpE,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,mCAGnFC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,aACL1C,QAASA,EACT2C,MAAO,CACLhB,IAAK,CAAElF,MAAO,IAAMoG,QAAS,0BAC7BQ,SAAW5G,IACT,GAAIA,GAAiB,GAARA,EAAauE,EAAcP,aACtC,MAAO,2CAIbsC,OAAQO,IAAA,IAAC,MAAEL,GAAOK,EAAA,OAChB7E,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,WAAUoG,SAAA,EACvBC,EAAAA,EAAAA,KAACuE,EAAAA,EAAkB,CAAC5K,UAAU,8EAC9BqG,EAAAA,EAAAA,KAAA,SAAAY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM0D,GAAK,IACT9F,KAAK,SACLgG,KAAK,OACLxB,IAAI,OACJrJ,UAAU,2KACV8K,YAAY,iBAKnBjD,EAAOQ,aACNhC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,8CAA6CoG,SACvDyB,EAAOQ,WAAWkC,cAMzBpE,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,yBAGnFC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,iBACL1C,QAASA,EACT2C,MAAO,CACLC,SAAU,8BACVjB,IAAK,CAAElF,MAAO,GAAIoG,QAAS,wBAC3BC,IAAK,CAAErG,MAAO,GAAIoG,QAAS,0BAE7BE,OAAQQ,IAAA,IAAC,MAAEN,GAAOM,EAAA,OAChB9E,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,WAAUoG,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SAAAY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM0D,GAAK,IACT9F,KAAK,SACLwE,IAAI,KACJmB,IAAI,KACJxK,UAAU,0KACV8K,YAAY,SAEdzE,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,oEAAmEoG,SAAC,YAIzFyB,EAAOS,iBACNjC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,8CAA6CoG,SACvDyB,EAAOS,eAAeiC,WAG3BpE,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,gDAA+CoG,SAAA,CAAC,qBACxCsC,EAAcJ,eAAe,6BAKpDnC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,kCAGnFC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,mBACL1C,QAASA,EACT2C,MAAO,CACLa,QAAS,CACP/G,MAAO,6BACPoG,QAAS,uCAGbE,OAAQU,IAAA,IAAC,MAAER,GAAOQ,EAAA,OAChB9E,EAAAA,EAAAA,KAAA,SAAAY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACM0D,GAAK,IACT9F,KAAK,QACL7E,UAAU,qKACV8K,YAAY,0BAIjBjD,EAAOY,mBACNpC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,8CAA6CoG,SACvDyB,EAAOY,iBAAiB8B,iBAOjCpE,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EACxBC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,eACL1C,QAASA,EACT+C,OAAQW,IAAA,IAAGT,OAAO,MAAExG,EAAK,SAAEkH,IAAYD,EAAA,OACrCjF,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,oBAAmBoG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACExB,KAAK,WACLyG,QAASnH,EACTkH,SAAUA,EACVrL,UAAU,4FAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SAAC,gCAOlFC,EAAAA,EAAAA,KAAC8D,EAAAA,GAAU,CACTC,KAAK,iBACL1C,QAASA,EACT+C,OAAQc,IAAA,IAAGZ,OAAO,MAAExG,EAAK,SAAEkH,IAAYE,EAAA,OACrCpF,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,oBAAmBoG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACExB,KAAK,WACLyG,QAASnH,EACTkH,SAAUA,EACVrL,UAAU,0FAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SAAC,iEAOjFsC,EAAcF,iBACbnC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,UAC/DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,4CACnCqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,qDAAoDoG,SAAC,0FAS7ED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yFAAwFoG,SAAA,EACrGC,EAAAA,EAAAA,KAAA,UACExB,KAAK,SACL0B,QA9VOiF,KACnBzD,IACAT,GAAa,IA6VDtH,UAAU,gJAA+IoG,SAC1J,YAGDD,EAAAA,EAAAA,MAAA,UACEtB,KAAK,SACL4G,UAAW3D,GAAWN,EACtBxH,UAAU,0JAAyJoG,SAAA,CAElKoB,GACCnB,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,kFAEfqG,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CAAC1L,UAAU,YAE5BwH,EAAS,YAAc,oCAQlCrB,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAO,IACrB5L,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yCAAwCoG,SAAA,EACrDC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,mBAGpEC,EAAAA,EAAAA,KAAA,UAAQrG,UAAU,wFAAuFoG,SAAC,iBAK5GC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SArbE,CAChC,CACEyF,GAAI,IACJhH,KAAM,UACN0F,QAAS,sCACTuB,gBAAgB,EAChBC,UAAW,wBAEb,CACEF,GAAI,IACJhH,KAAM,OACN0F,QAAS,sCACTuB,gBAAgB,EAChBC,UAAW,yBAyaK9J,IAAK+J,IACf7F,EAAAA,EAAAA,MAAA,OAEEnG,UAAS,yCAAAsE,OACQ,YAAf0H,EAAMnH,KACF,qCACe,WAAfmH,EAAMnH,KACN,+BACA,kCACHuB,SAAA,CAEa,YAAf4F,EAAMnH,MACLwB,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,wDAClB,WAAfgM,EAAMnH,MACRwB,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,mDAEnCqG,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CAAC1L,UAAU,qDAG7BmG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,SAAQoG,SAAA,EACrBC,EAAAA,EAAAA,KAAA,KAAGrG,UAAS,uBAAAsE,OACK,YAAf0H,EAAMnH,KACF,uCACe,WAAfmH,EAAMnH,KACN,iCACA,oCACHuB,SACA4F,EAAMzB,WAETlE,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SACzD,IAAI6F,KAAKD,EAAMD,WAAWtH,sBAI9BuH,EAAMF,iBACLzF,EAAAA,EAAAA,KAAA,UAAQrG,UAAU,0FAAyFoG,SAAC,sBAjCzG4F,EAAMH,c,kCC5czB9M,EAAAA,GAAQC,SACNC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAE,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAE,EAAAA,IAyBK,MAicP,EAjc+DC,IAIxD,IAJyD,eAC9DuM,EAAc,cACdC,EAAa,UACbnM,EAAY,IACbL,EACC,MAAOyM,EAAkBC,IAAuB9E,EAAAA,EAAAA,UAA8D,QACvG+E,EAAkBC,IAAuBhF,EAAAA,EAAAA,UAAuC,SAEjFiF,EAAkC,CACtC,CACEpC,KAAM,eACNhI,MAAO,eACPkB,MAAO,mBACPmJ,WAAY,IACZC,YAAa,mCAEf,CACEtC,KAAM,YACNhI,MAAO,YACPkB,MAAO,oBACPmJ,WAAY,KACZC,YAAa,2BAEf,CACEtC,KAAM,aACNhI,MAAO,aACPkB,MAAO,mBACPmJ,WAAY,IACZC,YAAa,qCAKXC,GAAcnM,EAAAA,EAAAA,SAAQ,KAC1B,IAAK0L,GAA4C,IAA1BA,EAAezL,OAAc,MAAO,GAE3D,MAAMmM,EAAQ,IAAIX,KAKZY,IAJaC,EAAAA,EAAAA,GAAaF,IACfG,EAAAA,EAAAA,GAAWH,GAGTV,EAAe1K,OAAO,IACnCwL,EAAgBH,EAAW7L,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAK0L,EAAWpM,OAGhFc,EAAY2K,EAAe1K,MAAM,EAAGC,KAAKC,MAAMwK,EAAezL,OAAS,IACvEkB,EAAauK,EAAe1K,MAAMC,KAAKC,MAAMwK,EAAezL,OAAS,IACrEmB,EAAeL,EAAUP,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAKI,EAAUd,OAC7EoB,EAAgBF,EAAWX,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAKQ,EAAWlB,OAGhFwM,GADapL,EAAgB,GAAKA,EAAgBD,GAAgBA,EAAe,GAClDD,EAAWlB,OAE1CyM,EAAqC,UAArBZ,EAA+B,GACX,YAArBA,EAAiC,GAAK,IAErDa,EAAmC,GAEzC,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAeE,IAAK,CACvC,MAAMC,GAAiBjI,EAAAA,EAAAA,KAAOkI,EAAAA,EAAAA,GAAQV,EAAOQ,GAAI,cAEjDZ,EAAUe,QAASC,IAEjB,MACMC,EADiBT,GAAiB,EAAIC,EAAkBG,GAClBI,EAASf,WAG/CiB,EAA2B,GAAhBjM,KAAKkM,SAAiB,IACjCC,EAAgBnM,KAAK+I,IAAI,EAAGiD,GAAsB,EAAIC,IAG5D,IAAIG,EACQA,EAART,GAAK,EAAgB,OAChBA,GAAK,GAAiB,SACb,MAElBD,EAAeW,KAAK,CAClB5L,KAAMmL,EACNO,gBACAC,aACAL,SAAUA,EAASpD,QAGzB,CAEA,OAAO+C,GACN,CAACjB,EAAgBI,IAGdyB,GAAiBvN,EAAAA,EAAAA,SAAQ,KAC7B,MAAMwN,EAAqBrB,EAAYsB,OAAO,CAACC,EAAGhJ,IAAUA,EAAQ,IAgBpE,OAd0BsH,EAAUvK,IAAKuL,IACvC,MAAMW,EAAeH,EAAmBC,OAAOC,GAAKA,EAAEV,WAAaA,EAASpD,MACtEvJ,EAAYsN,EAAanN,OAAO,CAACC,EAAKiN,IAAMjN,EAAMiN,EAAEN,cAAe,GACnEQ,EAAevN,GAAasN,EAAa1N,QAAU,GAEzD,OAAAwG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKuG,GAAQ,IACX3M,YACAuN,eACAC,kBAAoBxN,EAAYsL,EAAiB,IACjDmC,WAAYzN,EAAYsL,OAK3B,CAACQ,EAAaR,EAAeK,IAG1BzK,GAAYvB,EAAAA,EAAAA,SAAQ,KACxB,MAAM+N,EAA2C,QAArBnC,EACxBO,EACAA,EAAYsB,OAAOC,GAAKA,EAAEV,WAAapB,GA4B3C,MAAO,CACLjK,SA1BeqK,EACdyB,OAAOT,GAAiC,QAArBpB,GAA8BoB,EAASpD,OAASgC,GACnEnK,IAAKuL,IACJ,MAAMW,EAAeI,EAClBN,OAAOC,GAAKA,EAAEV,WAAaA,EAASpD,MACpCoE,KAAK,CAACC,EAAGC,IAAM,IAAIzC,KAAKwC,EAAEvM,MAAMyM,UAAY,IAAI1C,KAAKyC,EAAExM,MAAMyM,WAEhE,MAAO,CACLvM,MAAOoL,EAASpL,MAChBvC,KAAMsO,EAAalM,IAAIiM,IAAC,CACtBtJ,EAAGsJ,EAAEhM,KACLmC,EAAG6J,EAAEN,iBAEPrL,YAAaiL,EAASlK,MACtBd,gBAAiBgL,EAASlK,MAAMsL,QAAQ,MAAO,QAAQA,QAAQ,IAAK,UACpEnM,QAAS,GACTC,MAAM,EACNmM,YAAa,EACblM,iBAAkB,EAClBC,0BAA2B4K,EAASlK,MACpCT,sBAAuB,QACvBC,sBAAuB,OAO5B,CAAC6J,EAAaH,EAAWJ,IAEtBrJ,EAAe,CACnBC,YAAY,EACZC,qBAAqB,EACrBC,QAAS,CACPC,OAAQ,CACNC,SAAS,EACTC,SAAU,MACVrB,OAAQ,CACNsB,MAAO,qBACPC,eAAe,EACfC,WAAY,WAGhBC,QAAS,CACPC,KAAM,QACNC,WAAW,EACXnB,gBAAiB,yBACjBoB,WAAY,qBACZC,UAAW,qBACXtB,YAAa,kBACbuB,YAAa,EACbC,aAAc,EACdE,UAAW,CACTwC,MAAQvC,IACCkB,EAAAA,EAAAA,IAAO,IAAI6G,KAAK/H,EAAQ,GAAGE,OAAOQ,GAAI,gBAE/CxC,MAAQ8B,GACA,GAANI,OAAUJ,EAAQK,QAAQnC,MAAK,OAAAkC,OAAMJ,EAAQE,OAAOC,EAAEG,QAAQ,OAKtEG,OAAQ,CACNC,EAAG,CACDC,KAAM,OACNiK,KAAM,CACJC,KAAM,MACNC,eAAgB,CACd9N,IAAK,WAGT4D,KAAM,CACJxB,MAAO,2BACPyB,YAAY,GAEdC,MAAO,CACL1B,MAAO,qBACPgC,cAAe,IAGnBjB,EAAG,CACDkB,aAAa,EACbT,KAAM,CACJxB,MAAO,2BACPyB,YAAY,GAEdC,MAAO,CACL1B,MAAO,qBACP2B,SAAU,SAASd,GACjB,MAAM,IAANG,OAAWH,EAAMK,QAAQ,GAC3B,KAINiB,YAAa,CACX/B,KAAM,UACNgC,KAAM,IACN/B,WAAW,GAEbgC,UAAW,CACTC,SAAU,IACVC,OAAQ,mBAUZ,OACEM,EAAAA,EAAAA,MAAA,OAAKnG,UAAS,aAAAsE,OAAetE,GAAYoG,SAAA,EAEvCD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qEAAoEoG,SAAA,EACjFD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,+BAGpEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SAAC,+DAK/DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,SArBnD,CACpB,CAAEjC,MAAO,QAAS/B,MAAO,WACzB,CAAE+B,MAAO,UAAW/B,MAAO,WAC3B,CAAE+B,MAAO,OAAQ/B,MAAO,WAmBDH,IAAKgN,IAClB5I,EAAAA,EAAAA,KAAA,UAEEE,QAASA,IAAMgG,EAAoB0C,EAAO9K,OAC1CnE,UAAS,8DAAAsE,OACPgI,IAAqB2C,EAAO9K,MACxB,oEACA,8EACHiC,SAEF6I,EAAO7M,OARH6M,EAAO9K,WAclBgC,EAAAA,EAAAA,MAAA,UACEhC,MAAOiI,EACPf,SAAW6D,GAAM7C,EAAoB6C,EAAEC,OAAOhL,OAC9CnE,UAAU,+JAA8JoG,SAAA,EAExKC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,MAAKiC,SAAC,kBACnBoG,EAAUvK,IAAKuL,IACdnH,EAAAA,EAAAA,KAAA,UAA4BlC,MAAOqJ,EAASpD,KAAKhE,SAC9CoH,EAASpL,OADCoL,EAASpD,iBAS9B/D,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wCAAuCoG,SACnD2H,EAAe9L,IAAKmN,IACnBjJ,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CAETC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BrE,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yCAAwCoG,SAAA,EACrDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OACErG,UAAU,uBACVmJ,MAAO,CAAE3G,gBAAiB4M,EAAQ9L,UAEpC+C,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,8CAA6CoG,SACxDgJ,EAAQhN,WAGZgN,EAAQd,aACPjI,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,6BAIvCmG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EACxBD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5DgJ,EAAQvO,UAAU2D,QAAQ,OAE9B6B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,+BAK1DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,2CAA0CoG,SAAC,mBAG3DD,EAAAA,EAAAA,MAAA,QAAMnG,UAAU,oDAAmDoG,SAAA,CAAC,IAChEgJ,EAAQhB,aAAa5J,QAAQ,UAInC2B,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,2CAA0CoG,SAAC,kBAG3DD,EAAAA,EAAAA,MAAA,QAAMnG,UAAS,uBAAAsE,OACb8K,EAAQd,WACJ,iCACA,sCACHlI,SAAA,CACAgJ,EAAQf,kBAAkB7J,QAAQ,GAAG,WAI1C6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,uDAAsDoG,UACnEC,EAAAA,EAAAA,KAAA,OACErG,UAAS,gDAAAsE,OACP8K,EAAQd,WAAa,aAAe,gBAEtCnF,MAAO,CACLC,MAAM,GAAD9E,OAAK7C,KAAK4H,IAAI+F,EAAQf,kBAAmB,KAAI,WAKxDhI,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SACpDgJ,EAAQ1C,mBAhER0C,EAAQhF,UAwEnBjE,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BrE,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAACH,EAAAA,EAAY,CAAClG,UAAU,8CACxBqG,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,+BAKtEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvBuG,EAAYlM,OAAS,GACpB4F,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAACrH,KAAMkC,EAAW+E,QAAS/D,KAEhCsD,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,2EAA0EoG,UACvFD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAACH,EAAAA,EAAY,CAAClG,UAAU,4BACxBqG,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uCACHC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,eAAcoG,SAAC,uDAQtCD,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BrE,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAqB,CAACrP,UAAU,8CACjCqG,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,qBAKtED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,wCAAuCoG,SAAA,EACpDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,iDAAgDoG,SAAC,oBAG/DC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvB2H,EAAe9L,IAAKmN,IACnBjJ,EAAAA,EAAAA,MAAA,OAAwBnG,UAAU,oCAAmCoG,SAAA,EACnED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAAA,OACErG,UAAU,uBACVmJ,MAAO,CAAE3G,gBAAiB4M,EAAQ9L,UAEpC+C,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,2CAA0CoG,SACvDgJ,EAAQhN,YAGb+D,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,CACrCgJ,EAAQf,kBAAoB,KAC3BhI,EAAAA,EAAAA,KAACK,EAAAA,EAAmB,CAAC1G,UAAU,0BAE/BqG,EAAAA,EAAAA,KAACM,EAAAA,EAAqB,CAAC3G,UAAU,4BAEnCmG,EAAAA,EAAAA,MAAA,QAAMnG,UAAU,oDAAmDoG,SAAA,CAChEgJ,EAAQf,kBAAkB7J,QAAQ,GAAG,YAjBlC4K,EAAQhF,aAyBxBjE,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,iDAAgDoG,SAAC,qBAG/DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qDAAoDoG,SAAA,CAChE2H,EAAeuB,KAAKC,GAAKA,EAAEjB,cAC1BnI,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yBAAwBoG,SAAA,EACrCC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,+CACnCqG,EAAAA,EAAAA,KAAA,QAAAD,SAAM,uDAGVD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yBAAwBoG,SAAA,EACrCC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAS,CAACxP,UAAU,gDACrBqG,EAAAA,EAAAA,KAAA,QAAAD,SAAM,yDAERD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yBAAwBoG,SAAA,EACrCC,EAAAA,EAAAA,KAACuE,EAAAA,EAAkB,CAAC5K,UAAU,iDAC9BqG,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qE,sDCtcf,MAkdP,EAldmEzG,IAK5D,IAL6D,SAClE8P,EAAQ,eACRvD,EAAc,0BACdwD,EAAyB,UACzB1P,EAAY,IACbL,EACC,MAAOsO,EAAQ0B,IAAapI,EAAAA,EAAAA,UAA4C,QACjEqI,EAAUC,IAAetI,EAAAA,EAAAA,UAAyD,QAClFuI,EAAiBC,IAAsBxI,EAAAA,EAAAA,UAAsB,IAAIyI,KAGlEC,GAAkBzP,EAAAA,EAAAA,SAAsC,KAC5D,MAAM0P,EAAqC,GAGvCT,EAASU,cAAc,UAAYV,EAASU,cAAc,SAAiC,GAAtBV,EAASW,YAChFF,EAAKpC,KAAK,CACRjC,GAAI,uBACJpF,MAAO,2CACPiG,YAAa,oIACbkD,SAAU,QACVS,SAAU,OACVC,iBAAoD,GAAlCb,EAASU,cAAc,SACzCI,kBAAmB,GACnBC,WAAY,OACZC,gBAAiB,YACjBC,OAAQ,YACRC,YAAa,CACX,qCACA,4CACA,kCACA,wCAEFpQ,QAAS,CACPqQ,YAAanB,EAASU,cAAc,SACpCvC,cAAiD,GAAlC6B,EAASU,cAAc,SACtCU,iBAAkBpP,KAAKC,MAA0C,GAApC+N,EAASqB,YAAYC,aAAqB,QAMzEtB,EAASqB,YAAYE,cAAoD,GAApCvB,EAASqB,YAAYG,cAC5Df,EAAKpC,KAAK,CACRjC,GAAI,uBACJpF,MAAO,oCACPiG,YAAa,gHACbkD,SAAU,QACVS,SAAU,SACVC,iBAAwC,IAAtBb,EAASW,WAC3BG,kBAAmB,GACnBC,WAAY,WACZC,gBAAiB,YACjBC,OAAQ,aACRC,YAAa,CACX,yCACA,mCACA,qCACA,4BAEFpQ,QAAS,CACPqQ,YAAanB,EAASW,WACtBxC,cAAqC,IAAtB6B,EAASW,WACxBS,iBAAkBpP,KAAKC,MAAM+N,EAASqB,YAAYC,aAAe,QAQrEb,EAAKpC,KAAK,CACRjC,GAAI,YACJpF,MAAO,6BACPiG,YAAa,0FACbkD,SAAU,UACVS,SAAU,OACVC,iBAAwC,IAAtBb,EAASW,WAC3BG,kBAAmB,GACnBC,WAAY,WACZC,gBAAiB,WACjBC,OAAQ,YACRC,YAAa,CACX,6BACA,sCACA,wCACA,2BAEFpQ,QAAS,CACPqQ,YAAanB,EAASW,WACtBxC,cAAqC,IAAtB6B,EAASW,WACxBS,iBAAkBpP,KAAKC,MAA0C,IAApC+N,EAASqB,YAAYC,aAAsB,QA4D9E,OAtDsB7E,EAAezL,OAAS,EAC5CgB,KAAK+I,OAAO0B,EAAejK,IAAIiP,GAAKA,EAAE/P,OAASM,KAAK4H,OAAO6C,EAAejK,IAAIiP,GAAKA,EAAE/P,OAAS,GAE5E,GAClB+O,EAAKpC,KAAK,CACRjC,GAAI,eACJpF,MAAO,gCACPiG,YAAa,iGACbkD,SAAU,aACVS,SAAU,SACVC,iBAAwC,IAAtBb,EAASW,WAC3BG,kBAAmB,GACnBC,WAAY,UACZC,gBAAiB,WACjBC,OAAQ,YACRC,YAAa,CACX,wCACA,6BACA,oCACA,8CAEFpQ,QAAS,CACPqQ,YAAanB,EAASW,WACtBxC,cAAqC,IAAtB6B,EAASW,WACxBS,iBAAkBpP,KAAKC,MAA0C,GAApC+N,EAASqB,YAAYC,aAAqB,QAM7Eb,EAAKpC,KAAK,CACRjC,GAAI,iBACJpF,MAAO,6BACPiG,YAAa,sGACbkD,SAAU,eACVS,SAAU,MACVC,iBAAwC,IAAtBb,EAASW,WAC3BG,kBAAmB,EACnBC,WAAY,UACZC,gBAAiB,SACjBC,OAAQ,YACRC,YAAa,CACX,uCACA,mCACA,oCACA,sCAEFpQ,QAAS,CACPqQ,YAAanB,EAASW,WACtBxC,cAAqC,IAAtB6B,EAASW,WACxBS,iBAAkBpP,KAAKC,MAAM+N,EAASqB,YAAYC,aAAe,QAI9Db,EAAK1B,KAAK,CAACC,EAAGC,KACnB,MAAMyC,EAAgB,CAAEC,KAAM,EAAGC,OAAQ,EAAGC,IAAK,GACjD,OAAOH,EAAczC,EAAE2B,UAAYc,EAAc1C,EAAE4B,WAAa3B,EAAE4B,iBAAmB7B,EAAE6B,oBAExF,CAACb,EAAUvD,IAGRqF,GAA0B/Q,EAAAA,EAAAA,SAAQ,IAC/ByP,EAAgBhC,OAAOuD,IAC5B,MAAMC,EAA6B,QAAXxD,GAAoBuD,EAAInB,WAAapC,EACvDyD,EAA+B,QAAb9B,GAAsB4B,EAAI5B,WAAaA,EAC/D,OAAO6B,GAAmBC,IAE3B,CAACzB,EAAiBhC,EAAQ2B,IAGvB+B,GAAenR,EAAAA,EAAAA,SAAQ,IACpB+Q,EAAwBvQ,OAAO,CAACC,EAAKuQ,IAAQvQ,EAAMuQ,EAAIlB,iBAAkB,GAC/E,CAACiB,IAkBEK,EAAoBvB,IACxB,OAAQA,GACN,IAAK,OACH,MAAO,+DACT,IAAK,SACH,MAAO,2EACT,IAAK,MACH,MAAO,yEAqBPwB,EAAsBrB,IAC1B,OAAQA,GACN,IAAK,OACH,MAAO,qCACT,IAAK,WACH,MAAO,uCACT,IAAK,UACH,MAAO,mCAIb,OACErK,EAAAA,EAAAA,MAAA,OAAKnG,UAAS,aAAAsE,OAAetE,GAAYoG,SAAA,EAEvCD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qEAAoEoG,SAAA,EACjFD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,uCAGpED,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,gDAA+CoG,SAAA,CAAC,uBACxCD,EAAAA,EAAAA,MAAA,QAAMnG,UAAU,iDAAgDoG,SAAA,CAAC,IAChFuL,EAAanN,QAAQ,MAClB,KAAG+M,EAAwB9Q,OAAO,2BAI7C0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EAEtCD,EAAAA,EAAAA,MAAA,UACEhC,MAAO8J,EACP5C,SAAW6D,GAAMS,EAAUT,EAAEC,OAAOhL,OACpCnE,UAAU,+JAA8JoG,SAAA,EAExKC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,MAAKiC,SAAC,oBACpBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,OAAMiC,SAAC,mBACrBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,SAAQiC,SAAC,qBACvBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,MAAKiC,SAAC,qBAItBD,EAAAA,EAAAA,MAAA,UACEhC,MAAOyL,EACPvE,SAAW6D,GAAMW,EAAYX,EAAEC,OAAOhL,OACtCnE,UAAU,+JAA8JoG,SAAA,EAExKC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,MAAKiC,SAAC,oBACpBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,QAAOiC,SAAC,wBACtBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,QAAOiC,SAAC,wBACtBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,aAAYiC,SAAC,gBAC3BC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,UAASiC,SAAC,aACxBC,EAAAA,EAAAA,KAAA,UAAQlC,MAAM,eAAciC,SAAC,2BAMnCD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,wCAAuCoG,SAAA,EACpDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,gDAA+CoG,SAAA,EAC5DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAACuE,EAAAA,EAAkB,CAAC5K,UAAU,8CAC9BqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,uDAAsDoG,SAAC,sBAIzED,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2DAA0DoG,SAAA,CAAC,IACpEuL,EAAanN,QAAQ,UAI3B2B,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,8CAA6CoG,SAAA,EAC1DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAACyL,EAAAA,EAAQ,CAAC9R,UAAU,4CACpBqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,qDAAoDoG,SAAC,sBAIvEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,yDAAwDoG,SAClE6J,EAAgBhC,OAAO8D,GAAoB,SAAfA,EAAE1B,UAAqB5P,aAIxD0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,kDAAiDoG,SAAA,EAC9DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CAAC1L,UAAU,gDAC3BqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,yDAAwDoG,SAAC,mBAI3EC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,6DAA4DoG,SACtE6J,EAAgBhC,OAAO8D,GAAsB,SAAjBA,EAAEvB,YAAuB/P,aAI1D0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oDAAmDoG,SAAA,EAChED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAAC2L,EAAAA,EAAQ,CAAChS,UAAU,kDACpBqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,2DAA0DoG,SAAC,yBAI7EC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,+DAA8DoG,SACxE6J,EAAgBhC,OAAO8D,GAAkB,cAAbA,EAAErB,QAAwBjQ,gBAM7D4F,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,yBAAwBoG,SACpCmL,EAAwBtP,IAAI,CAACgQ,EAAgB/M,KAC5C,MAAMsB,EA9HWoJ,KACvB,OAAQA,GACN,IAAK,QACH,OAAOsC,EAAAA,EACT,IAAK,QACH,OAAOhM,EAAAA,EACT,IAAK,aACH,OAAOsJ,EAAAA,EACT,IAAK,UACH,OAAOwC,EAAAA,EACT,IAAK,eACH,OAAOlI,EAAAA,EACT,QACE,OAAOqI,EAAAA,IAiHQC,CAAgBH,EAAerC,UACtCyC,EAAiBvC,EAAgBwC,IAAIL,EAAepG,IAE1D,OACE1F,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CAETC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAe,GAAR1G,GACrBlF,UAAU,uFAAsFoG,SAAA,EAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,wCAAuCoG,SAAA,EACpDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yBAAwBoG,SAAA,EACrCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,iDAAgDoG,UAC7DC,EAAAA,EAAAA,KAACG,EAAI,CAACxG,UAAU,gDAGlBmG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,SAAQoG,SAAA,EACrBD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAChE6L,EAAexL,SAElBJ,EAAAA,EAAAA,KAAA,QAAMrG,UAAS,8CAAAsE,OAAgDsN,EAAiBK,EAAe5B,WAAYjK,SACxG6L,EAAe5B,eAIpBhK,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,wCAAuCoG,SACjD6L,EAAevF,eAGlBvG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,6CAA4CoG,SAAA,EACzDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,oDAAmDoG,SAAC,uBAGjED,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,uDAAsDoG,SAAA,CAAC,IAChE6L,EAAe3B,iBAAiB9L,QAAQ,OAE5C2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CACpD6L,EAAe1B,kBAAkB,qBAItCpK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,oDAAmDoG,SAAC,gBAGjEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAS,uBAAAsE,OAAyBuN,EAAmBI,EAAezB,aAAcpK,SAClF6L,EAAezB,cAElBnK,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SACpD6L,EAAexB,sBAIpBtK,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,oDAAmDoG,SAAC,YAGjEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,sDAAqDoG,SAC/D6L,EAAevB,UAElBvK,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CACpD6L,EAAe1R,QAAQsQ,iBAAiBpM,iBAAiB,mBAI9D0B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,oDAAmDoG,SAAC,qBAGjED,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CAAC,IACpD6L,EAAe1R,QAAQqQ,YAAYpM,QAAQ,GAAG,YAAKyN,EAAe1R,QAAQqN,cAAcpJ,QAAQ,OAEpG6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,4DAA2DoG,UACxEC,EAAAA,EAAAA,KAAA,OACErG,UAAU,gCACVmJ,MAAO,CAAEC,MAAM,GAAD9E,OAAuF,KAAjF,EAAI2N,EAAe1R,QAAQqN,cAAgBqE,EAAe1R,QAAQqQ,aAAkB,uBAQpHzK,EAAAA,EAAAA,MAAA,UACEI,QAASA,IAhPDyD,WACtB+F,EAAmBwC,GAAQ,IAAIvC,IAAIwC,MAAMC,KAAKF,GAAMjO,OAAOoO,KAC3D,UACQhD,EAA0BgD,EAElC,CAAE,MAAOzI,GACPC,QAAQD,MAAM,sCAAuCA,EACvD,CAAC,QACC8F,EAAmBwC,IACjB,MAAMI,EAAO,IAAI3C,IAAIuC,GAErB,OADAI,EAAKC,OAAOF,GACLC,GAEX,GAmO6BE,CAAgBZ,EAAepG,IAC9CJ,SAAU4G,GAAkBJ,EAAea,YAC3C9S,UAAS,8EAAAsE,OACP2N,EAAea,YACX,uEACA,gEACH1M,SAAA,CAEFiM,GACChM,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,iFACbiS,EAAea,aACjBzM,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CAAC1L,UAAU,aAE3BqG,EAAAA,EAAAA,KAAC0M,EAAAA,EAAc,CAAC/S,UAAU,YAE3BqS,EAAiB,kBAAoBJ,EAAea,YAAc,cAAgB,mBAKvF3M,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qDAAoDoG,SAAA,EACjEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yDAAwDoG,SAAC,2BAGvEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wCAAuCoG,SACnD6L,EAAetB,YAAY1O,IAAI,CAAC+Q,EAAMC,KACrC9M,EAAAA,EAAAA,MAAA,OAAqBnG,UAAU,0BAAyBoG,SAAA,EACtDC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,8EACfqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,2CAA0CoG,SACvD4M,MAHKC,WA5GXhB,EAAepG,QA0HQ,IAAnC0F,EAAwB9Q,SACvB0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oGAAmGoG,SAAA,EAChHC,EAAAA,EAAAA,KAAC8L,EAAAA,EAAa,CAACnS,UAAU,0CACzBqG,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yDAAwDoG,SAAC,2CAGvEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,mCAAkCoG,SAAC,wF,kCC7cnD,MAsaP,EAta6DzG,IAKtD,IALuD,SAC5D8P,EAAQ,eACRvD,EAAc,SACdgH,EAAQ,UACRlT,EAAY,IACbL,EACC,MAAOwT,EAAQC,IAAa7L,EAAAA,EAAAA,WAAS,IAC9B8L,EAAWC,IAAgB/L,EAAAA,EAAAA,UAAwB,OACnDT,EAASyM,IAAchM,EAAAA,EAAAA,UAAwB,CACpDnC,OAAQ,MACRoO,UAAW,aACXC,eAAe,EACfC,oBAAoB,EACpBC,wBAAwB,IAGpBC,EAAgC,CACpC,CACE/H,GAAI,MACJzB,KAAM,aACNyJ,UAAW,MACX9N,KAAM+N,EAAAA,EACNpH,YAAa,gDACbqH,KAAM,WAER,CACElI,GAAI,MACJzB,KAAM,WACNyJ,UAAW,MACX9N,KAAMiO,EAAAA,EACNtH,YAAa,gCACbqH,KAAM,cAER,CACElI,GAAI,QACJzB,KAAM,iBACNyJ,UAAW,OACX9N,KAAMiO,EAAAA,EACNtH,YAAa,qCACbqH,KAAM,eAER,CACElI,GAAI,OACJzB,KAAM,YACNyJ,UAAW,OACX9N,KAAM+D,EAAAA,EACN4C,YAAa,sCACbqH,KAAM,eAIJE,EAAmB,CACvB,CAAE9P,MAAO,YAAa/B,MAAO,eAC7B,CAAE+B,MAAO,aAAc/B,MAAO,gBAC9B,CAAE+B,MAAO,aAAc/B,MAAO,gBAC9B,CAAE+B,MAAO,SAAU/B,MAAO,iBA2BtB8R,EAAmBA,KACvB,MAAMC,EAAmC,GAAxBjI,EAAezL,OAChC,IAAIgM,EAAa,EAMjB,OAJI3F,EAAQ2M,gBAAehH,GAAc,IACrC3F,EAAQ4M,qBAAoBjH,GAAc,IAC1C3F,EAAQ6M,yBAAwBlH,GAAc,IAE1C3F,EAAQ1B,QACd,IAAK,MACH,MAAM,IAANd,OAAW7C,KAAK2S,MAAMD,EAAW1H,EAAa,IAAG,SAAAnI,OAAQ7C,KAAK2S,MAAMD,EAAW1H,EAAa,IAAG,MACjG,IAAK,MACH,MAAM,IAANnI,OAAW7C,KAAK2S,MAAMD,EAAW1H,EAAa,GAAE,MAClD,IAAK,QACH,MAAM,IAANnI,OAAW7C,KAAK2S,MAAMD,EAAW1H,EAAa,GAAE,MAClD,IAAK,OACH,MAAM,IAANnI,OAAW7C,KAAK2S,MAAMD,EAAW1H,GAAW,MAC9C,QACE,MAAO,YAIP4H,EAAaA,KAAO,IAADC,EACvB,MAAMC,EAAiBX,EAAcY,KAAKC,GAAKA,EAAE5I,KAAO/E,EAAQ1B,QAC1DsP,GAA0E,QAAzDJ,EAAAL,EAAiBO,KAAKG,GAAKA,EAAExQ,QAAU2C,EAAQ0M,kBAAU,IAAAc,OAAA,EAAzDA,EAA2DlS,QAAS,SAErFwS,EAAW,GAKjB,OAJI9N,EAAQ2M,eAAemB,EAAS9G,KAAK,UACrChH,EAAQ4M,oBAAoBkB,EAAS9G,KAAK,eAC1ChH,EAAQ6M,wBAAwBiB,EAAS9G,KAAK,mBAE3C,CACL1I,QAAsB,OAAdmP,QAAc,IAAdA,OAAc,EAAdA,EAAgBnK,OAAQ,UAChCoJ,UAAWkB,EACXE,SAAUA,EAASnU,OAAS,EAAImU,EAAW,CAAC,mBAC5CC,cAAeX,MAInB,OAAKf,GAaH9M,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,sEAAqEoG,UAClFD,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGgM,MAAO,KAC9B/L,QAAS,CAAED,QAAS,EAAGgM,MAAO,GAC9B9U,UAAU,+FAA8FoG,SAAA,EAGxGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,sFAAqFoG,SAAA,EAClGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EACtCC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAqB,CAAC/U,UAAU,8CACjCmG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,sDAAqDoG,SAAC,2BAGpEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,iEAM5DC,EAAAA,EAAAA,KAAA,UACEE,QAASA,IAAM6M,GAAU,GACzBpT,UAAU,+EAA8EoG,UAExFC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,UAAU0C,KAAK,OAAOsS,QAAQ,YAAYC,OAAO,eAAc7O,UAC5EC,EAAAA,EAAAA,KAAA,QAAM6O,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGlE,EAAE,iCAK3E/K,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,gCAA+BoG,SAAA,EAE5CD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,2EAA0EoG,SAAA,EAEvFD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,OAAMoG,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,mBAGzEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wCAAuCoG,SACnDwN,EAAc3R,IAAKmD,IAClB,MAAMoB,EAAOpB,EAAOW,KACpB,OACEI,EAAAA,EAAAA,MAAA,SAEEnG,UAAS,iFAAAsE,OACPwC,EAAQ1B,SAAWA,EAAOyG,GACtB,iDACA,gFACHzF,SAAA,EAEHC,EAAAA,EAAAA,KAAA,SACExB,KAAK,QACLuF,KAAK,SACLjG,MAAOiB,EAAOyG,GACdP,QAASxE,EAAQ1B,SAAWA,EAAOyG,GACnCR,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEnN,OAAQ8J,EAAEC,OAAOhL,SACjEnE,UAAU,UAEZqG,EAAAA,EAAAA,KAACG,EAAI,CAACxG,UAAU,qDAChBmG,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,SAAQoG,SAAA,EACrBC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,4CAA2CoG,SACrDhB,EAAOgF,QAEV/D,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SACpDhB,EAAOsH,cAETtH,EAAO2O,OACN1N,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SACzDhB,EAAO2O,YAzBT3O,EAAOyG,YAoCtB1F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,OAAMoG,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,gBAGzEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvB6N,EAAiBhS,IAAKoT,IACrBlP,EAAAA,EAAAA,MAAA,SAAyBnG,UAAU,oBAAmBoG,SAAA,EACpDC,EAAAA,EAAAA,KAAA,SACExB,KAAK,QACLuF,KAAK,YACLjG,MAAOkR,EAAMlR,MACbmH,QAASxE,EAAQ0M,YAAc6B,EAAMlR,MACrCkH,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEiB,UAAWtE,EAAEC,OAAOhL,SACpEnE,UAAU,+CAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SACxEiP,EAAMjT,UAVCiT,EAAMlR,UAgBC,WAAtB2C,EAAQ0M,YACPrN,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,8BAA6BoG,SAAA,EAC1CD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,gBAGnFC,EAAAA,EAAAA,KAAA,SACExB,KAAK,OACLV,MAAO2C,EAAQwO,iBAAmB,GAClCjK,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAE+C,gBAAiBpG,EAAEC,OAAOhL,SAC1EnE,UAAU,2KAGdmG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOrG,UAAU,kEAAiEoG,SAAC,cAGnFC,EAAAA,EAAAA,KAAA,SACExB,KAAK,OACLV,MAAO2C,EAAQyO,eAAiB,GAChClK,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEgD,cAAerG,EAAEC,OAAOhL,SACxEnE,UAAU,iLAQC,QAAnB8G,EAAQ1B,QAAuC,UAAnB0B,EAAQ1B,UACpCe,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,OAAMoG,SAAA,EACnBC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,uBAGzED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EACxBD,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,oBAAmBoG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACExB,KAAK,WACLyG,QAASxE,EAAQ2M,cACjBpI,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEkB,cAAevE,EAAEC,OAAO7D,WACxEtL,UAAU,uDAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SAAC,kCAK9ED,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,oBAAmBoG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACExB,KAAK,WACLyG,QAASxE,EAAQ4M,mBACjBrI,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEmB,mBAAoBxE,EAAEC,OAAO7D,WAC7EtL,UAAU,uDAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SAAC,yBAK9ED,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,oBAAmBoG,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACExB,KAAK,WACLyG,QAASxE,EAAQ6M,uBACjBtI,SAAW6D,GAAMqE,EAAWhB,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAAI,IAAEoB,uBAAwBzE,EAAEC,OAAO7D,WACjFtL,UAAU,uDAEZqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,4DAA2DoG,SAAC,8CAUtFD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uCAAsCoG,SAAA,EACnDC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,oBAIzED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EACxBD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,+BAA8BoG,SAAA,EAC3CC,EAAAA,EAAAA,KAACyN,EAAAA,EAAgB,CAAC9T,UAAU,8CAC5BqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,oDAAmDoG,SAChEiO,IAAajP,aAIlBe,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oBAAmBoG,SAAA,EAChCD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uBAAsBoG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAC,iBACnDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,gCAA+BoG,SAAEiO,IAAab,gBAGhErN,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uBAAsBoG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAC,gBACnDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,gCAA+BoG,SAAEiO,IAAaQ,0BAKpE1O,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yDAAwDoG,SAAC,sBAGvEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvBiO,IAAaO,SAAS3S,IAAI,CAACuT,EAAStQ,KACnCiB,EAAAA,EAAAA,MAAA,OAAiBnG,UAAU,kCAAiCoG,SAAA,EAC1DC,EAAAA,EAAAA,KAACqF,EAAAA,EAAe,CAAC1L,UAAU,gDAC3BqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAEoP,MAF5CtQ,UAShBiB,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yDAAwDoG,SAAC,kBAGvED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oBAAmBoG,SAAA,EAChCD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uBAAsBoG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAC,iBACnDD,EAAAA,EAAAA,MAAA,QAAMnG,UAAU,gCAA+BoG,SAAA,CAAC,IAAEqJ,EAASW,WAAW5L,QAAQ,UAEhF2B,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uBAAsBoG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAC,WACnDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,gCAA+BoG,SAAE8F,EAAezL,aAElE0F,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uBAAsBoG,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,mCAAkCoG,SAAC,aACnDC,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,gCAA+BoG,SAC5CqP,OAAOC,KAAKjG,EAASU,eAAe1P,mBAO3CqG,EAAQ2M,eAAuC,eAAtB3M,EAAQ0M,aACjCnN,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,oGAAmGoG,UAChHD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,yBAAwBoG,SAAA,EACrCC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,uEACnCmG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2DAA0DoG,SAAC,kBAGxEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,+CAA8CoG,SAAC,4GAY1ED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,sFAAqFoG,SAAA,EAClGC,EAAAA,EAAAA,KAAA,UACEE,QAASA,IAAM6M,GAAU,GACzBpT,UAAU,gJAA+IoG,SAC1J,YAIDD,EAAAA,EAAAA,MAAA,UACEI,QAASA,IA3VEyD,WACnBsJ,EAAaqC,GACb,IACE,MAAMC,GAAa3O,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQH,GAAO,IAAE1B,OAAQuQ,IACtCE,QAAe3C,EAAS0C,GAGxBE,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOJ,EAAOK,IACnBJ,EAAKK,SAAWN,EAAOO,SACvBL,SAASM,KAAKC,YAAYR,GAC1BA,EAAKS,QACLR,SAASM,KAAKG,YAAYV,GAG1B1C,GAAU,EACZ,CAAE,MAAOnJ,GACPC,QAAQD,MAAM,iBAAkBA,EAElC,CAAC,QACCqJ,EAAa,KACf,GAsUuBmD,CAAa3P,EAAQ1B,QACpCqG,SAAU4H,IAAcvM,EAAQ1B,OAChCpF,UAAU,0JAAyJoG,SAAA,CAElKiN,IAAcvM,EAAQ1B,QACrBiB,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,kFAEfqG,EAAAA,EAAAA,KAAC0O,EAAAA,EAAqB,CAAC/U,UAAU,YAElCqT,IAAcvM,EAAQ1B,OAAS,gBAAe,UAAAd,OAAa+P,IAAajP,oBAnS/Ee,EAAAA,EAAAA,MAAA,UACEI,QAASA,IAAM6M,GAAU,GACzBpT,UAAS,2GAAAsE,OAA6GtE,GAAYoG,SAAA,EAElIC,EAAAA,EAAAA,KAAC0O,EAAAA,EAAqB,CAAC/U,UAAU,YAAY,a,sDCrIrD,MAAM0W,EAAe,OA6CfC,EAAkB3M,UACtB,MAAM4M,QAAiBC,MAAM,GAADvS,OAAIoS,EAAY,iBAC5C,IAAKE,EAASE,GACZ,MAAM,IAAIC,MAAM,gCAADzS,OAAiCsS,EAASI,aAG3D,MAAMnX,QAAsC+W,EAASK,OACjC,IAADC,EAAnB,IAAKrX,EAAKsX,QACR,MAAM,IAAIJ,OAAgB,QAAVG,EAAArX,EAAKoK,aAAK,IAAAiN,OAAA,EAAVA,EAAY3M,UAAW,+BAGzC,OAAO1K,EAAKA,MAGRuX,EAAuBpN,UAC3B,MAAM4M,QAAiBC,MAAM,GAADvS,OAAIoS,EAAY,kBAAkB,CAC5DW,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBjB,KAAMkB,KAAKC,UAAUC,KAGvB,IAAKb,EAASE,GACZ,MAAM,IAAIC,MAAM,4BAADzS,OAA6BsS,EAASI,aAGvD,MAAMnX,QAAsC+W,EAASK,OACjC,IAADS,EAAnB,IAAK7X,EAAKsX,QACR,MAAM,IAAIJ,OAAgB,QAAVW,EAAA7X,EAAKoK,aAAK,IAAAyN,OAAA,EAAVA,EAAYnN,UAAW,2BAGzC,OAAO1K,EAAKA,MAIR8X,EAAmB,CACvBC,IAAK,CAAC,QACNC,UAAYC,GAA6B,IAAIH,EAAiBC,IAAK,YAAaE,GAChFC,WAAaD,GAA6B,IAAIH,EAAiBC,IAAK,aAAcE,GAClFE,OAAQA,IAAM,IAAIL,EAAiBC,IAAK,WAIpCK,EAAkC,CACtClY,UAAW,MACXmY,YAAQC,EACRC,gBAAYD,GAGDE,EAAc,WAAwE,IAADC,EAAAC,EAAAC,EAAAC,EAAA,IAAtE3R,EAA2B4R,UAAAjY,OAAA,QAAA0X,IAAAO,UAAA,GAAAA,UAAA,GAAG,CAAC,EACzD,MAAM,YACJC,GAAc,EAAI,gBAClBC,EAAkB,IAClBd,QAASe,EAAiBZ,GACxBnR,EAEEgS,GAAcC,EAAAA,EAAAA,OACbjB,EAASkB,IAAczR,EAAAA,EAAAA,UAA0BsR,IACjD5O,EAAOgP,IAAY1R,EAAAA,EAAAA,UAAwB,MAG5C2R,GAAY1Y,EAAAA,EAAAA,SAAQ,KACxB,MAAM2Y,EAAM,IAAIlN,KAChB,IAAImN,EAAaC,EAEjB,GAAIvB,EAAQwB,WAAaxB,EAAQyB,QAC/BH,GAAQI,EAAAA,EAAAA,GAAW1B,EAAQwB,WAC3BD,GAAMG,EAAAA,EAAAA,GAAW1B,EAAQyB,cAGzB,OADAF,GAAMG,EAAAA,EAAAA,GAAWL,GACTrB,EAAQ/X,WACd,IAAK,KACHqZ,GAAQI,EAAAA,EAAAA,IAAWC,EAAAA,EAAAA,GAAQN,EAAK,IAChC,MACF,IAAK,MACHC,GAAQI,EAAAA,EAAAA,IAAWC,EAAAA,EAAAA,GAAQN,EAAK,KAChC,MACF,QACEC,GAAQI,EAAAA,EAAAA,IAAWC,EAAAA,EAAAA,GAAQN,EAAK,KAKtC,MAAO,CAAEC,QAAOC,QACf,CAACvB,IAGE4B,GAAmBlZ,EAAAA,EAAAA,SAAQ,KAAAyG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAD,EAC5B6Q,GAAO,IACVwB,UAAWJ,EAAUE,MACrBG,QAASL,EAAUG,MACjB,CAACvB,EAASoB,IAGRS,GAAiBC,EAAAA,EAAAA,GAAS,CAC9BC,SAAUlC,EAAiBE,UAAU6B,GACrCI,QAASA,IA3Ic9P,WAA6D,IAAD+P,EAAAC,EACrF,MAAMC,EAAS,IAAIC,gBAEfpC,EAAQ/X,WAAWka,EAAOE,OAAO,YAAarC,EAAQ/X,WACtD+X,EAAQwB,WAAWW,EAAOE,OAAO,cAAc/U,EAAAA,EAAAA,IAAO0S,EAAQwB,UAAW,eACzExB,EAAQyB,SAASU,EAAOE,OAAO,YAAY/U,EAAAA,EAAAA,IAAO0S,EAAQyB,QAAS,eACrD,QAAlBQ,EAAIjC,EAAQI,cAAM,IAAA6B,GAAdA,EAAgBtZ,QAAQwZ,EAAOE,OAAO,SAAUrC,EAAQI,OAAOkC,KAAK,MAClD,QAAtBJ,EAAIlC,EAAQM,kBAAU,IAAA4B,GAAlBA,EAAoBvZ,QAAQwZ,EAAOE,OAAO,aAAcrC,EAAQM,WAAWgC,KAAK,MAEpF,MAAMxD,QAAiBC,MAAM,GAADvS,OAAIoS,EAAY,qBAAApS,OAAoB2V,IAChE,IAAKrD,EAASE,GACZ,MAAM,IAAIC,MAAM,mCAADzS,OAAoCsS,EAASI,aAG9D,MAAMnX,QAAyC+W,EAASK,OACpC,IAADoD,EAAnB,IAAKxa,EAAKsX,QACR,MAAM,IAAIJ,OAAgB,QAAVsD,EAAAxa,EAAKoK,aAAK,IAAAoQ,OAAA,EAAVA,EAAY9P,UAAW,kCAGzC,OAAO1K,EAAKA,MAwHKya,CAAmBZ,GAClCa,UAAW5B,EAAcC,EAAkBtX,IAC3CkZ,kBAAiB7B,GAAcC,EAC/B6B,MAAOA,CAACC,EAAczQ,MAEhBA,aAAiB8M,OAAS9M,EAAMM,QAAQoQ,SAAS,OAG9CD,EAAe,IAKpBE,GAAkBhB,EAAAA,EAAAA,GAAS,CAC/BC,SAAUlC,EAAiBI,WAAW2B,GACtCI,QAASA,IApIe9P,WAC1B,MAAMiQ,EAAS,IAAIC,gBAEfpC,EAAQ/X,WAAWka,EAAOE,OAAO,YAAarC,EAAQ/X,WACtD+X,EAAQwB,WAAWW,EAAOE,OAAO,cAAc/U,EAAAA,EAAAA,IAAO0S,EAAQwB,UAAW,eACzExB,EAAQyB,SAASU,EAAOE,OAAO,YAAY/U,EAAAA,EAAAA,IAAO0S,EAAQyB,QAAS,eAEvE,MAAM3C,QAAiBC,MAAM,GAADvS,OAAIoS,EAAY,0BAAApS,OAAyB2V,IACrE,IAAKrD,EAASE,GACZ,MAAM,IAAIC,MAAM,oCAADzS,OAAqCsS,EAASI,aAG/D,MAAMnX,QAAuC+W,EAASK,OAClC,IAAD4D,EAAnB,IAAKhb,EAAKsX,QACR,MAAM,IAAIJ,OAAgB,QAAV8D,EAAAhb,EAAKoK,aAAK,IAAA4Q,OAAA,EAAVA,EAAYtQ,UAAW,mCAGzC,OAAO1K,EAAKA,MAmHKib,CAAoBpB,GACnCa,UAAW5B,EAAcC,EAAkBtX,IAC3CkZ,kBAAiB7B,GAAcC,EAC/B6B,MAAOA,CAACC,EAAczQ,MAChBA,aAAiB8M,OAAS9M,EAAMM,QAAQoQ,SAAS,OAG9CD,EAAe,IAKpBK,GAAcnB,EAAAA,EAAAA,GAAS,CAC3BC,SAAUlC,EAAiBK,SAC3B8B,QAASnD,EACT4D,UAAW5B,EAAgC,EAAlBC,EAAsBtX,IAC/CkZ,kBAAiB7B,GAAgC,EAAlBC,EAC/B6B,MAAOA,CAACC,EAAczQ,MAChBA,aAAiB8M,OAAS9M,EAAMM,QAAQoQ,SAAS,OAG9CD,EAAe,IAKpBM,GAAiBC,EAAAA,EAAAA,GAAY,CACjCC,WAAY9D,EACZ+D,UAAYtb,IAEViZ,EAAYsC,aAAazD,EAAiBK,SAAUnY,GACpDoZ,EAAS,UAKboC,EAAAA,EAAAA,WAAU,MACJ1B,EAAe9Z,MAAQ+a,EAAgB/a,MAAQkb,EAAYlb,OAC7DoZ,EAAS,OAEV,CAACU,EAAe9Z,KAAM+a,EAAgB/a,KAAMkb,EAAYlb,OAG3D,MAAMyb,GAAgBC,EAAAA,EAAAA,aAAaC,IACjCxC,EAAWzG,IAAItL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUsL,GAASiJ,KACjC,IAEGC,GAAUF,EAAAA,EAAAA,aAAYvR,UAC1BiP,EAAS,YACHyC,QAAQ9D,IAAI,CAChB+B,EAAe8B,UACfb,EAAgBa,UAChBV,EAAYU,aAEb,CAAC9B,EAAgBiB,EAAiBG,IAE/BY,GAAeJ,EAAAA,EAAAA,aAAYvR,gBACzBgR,EAAeY,YAAYnE,IAChC,CAACuD,IAEEa,GAAaN,EAAAA,EAAAA,aAAY,KAC7BzC,EAAYgD,cAAc,CAAEjC,SAAUlC,EAAiBC,MACvDqB,EAAS,OACR,CAACH,IAGEiD,EAAYpC,EAAeoC,WAAanB,EAAgBmB,WAAahB,EAAYgB,UAGjFC,EAAgB/R,IACA,QADKqO,EACzBqB,EAAe1P,aAAK,IAAAqO,OAAA,EAApBA,EAAsB/N,WACD,QADQgO,EAC7BqC,EAAgB3Q,aAAK,IAAAsO,OAAA,EAArBA,EAAuBhO,WACN,QADaiO,EAC9BuC,EAAY9Q,aAAK,IAAAuO,OAAA,EAAjBA,EAAmBjO,WACC,QADMkO,EAC1BuC,EAAe/Q,aAAK,IAAAwO,OAAA,EAApBA,EAAsBlO,UACtB,KAEF,MAAO,CAELsN,UAAW8B,EAAe9Z,MAAQ,KAClCqM,eAAgB0O,EAAgB/a,MAAQ,GACxCsH,WAAY4T,EAAYlb,MAAQ,KAChCiY,QAAS4B,EACTqC,YACA9R,MAAO+R,EAGPP,UACAH,gBACAK,eACAE,aAEJ,ECpQaI,EAA8Ctc,IAEpD,IAFqD,UAC1DK,EAAY,IACbL,EACC,MAAOuc,EAAWC,IAAgB5U,EAAAA,EAAAA,UAA+E,aAC1GxH,EAAWqc,IAAgB7U,EAAAA,EAAAA,UAA+B,QAG3D,UACJsQ,EAAS,eACT3L,EAAc,WACd/E,EAAU,UACV4U,EAAS,MACT9R,EAAK,cACLqR,EAAa,aACbK,EAAY,QACZF,GACEpD,EAAY,CACdP,QAAS,CAAE/X,aACX4Y,aAAa,KAGT,SAAE0D,GD0RqBC,MAC7B,MAAM,UAAEzE,EAAS,eAAE3L,EAAc,UAAE6P,EAAS,MAAE9R,GAAUoO,IAsCxD,MAAO,CACLgE,UArCe7b,EAAAA,EAAAA,SAAQ,KACvB,IAAKqX,IAAc3L,GAA4C,IAA1BA,EAAezL,OAClD,OAAO,KAIT,MAAMoM,EAAaX,EAAe1K,OAAO,GACnC+a,EAAerQ,EAAe1K,OAAO,IAAK,GAE1Cgb,EAAY3P,EAAW7L,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAK0L,EAAWpM,OAC5Egc,EAAcF,EAAavb,OAAO,CAACC,EAAKC,IAAQD,EAAMC,EAAIC,KAAM,GAAKob,EAAa9b,QAAU+b,EAalG,MAAO,CACL9b,MAZY8b,EAAYC,EAAc,aAAeD,EAAYC,EAAc,aAAe,SAa9F9b,gBAZsB8b,EAAc,EAAIhb,KAAKK,KAAK0a,EAAYC,GAAeA,EAAc,KAAO,EAalG3b,QAVcoL,EAAelL,OAAO,CAACI,EAAMF,IAAQA,EAAIC,KAAOC,EAAKD,KAAOD,EAAME,GAWhFsb,gBARsB7E,EAAU/G,YAAYC,aAAe,EACzD8G,EAAUzH,WAAayH,EAAU/G,YAAYC,aAC7C,EAOF4L,aAAcH,EACdI,aAAcJ,EAAYC,EAC1BI,mBAAoBpH,OAAOC,KAAKmC,EAAU1H,eAAenP,OAAO,CAACyN,EAAGC,IAClEmJ,EAAU1H,cAAc1B,GAAKoJ,EAAU1H,cAAczB,GAAKD,EAAIC,KAGjE,CAACmJ,EAAW3L,IAIb6P,YACA9R,UCpUmBqS,GAQfQ,EAAO,CACX,CAAEjR,GAAI,WAAYzJ,MAAO,WAAY2D,KAAMsJ,EAAAA,GAC3C,CAAExD,GAAI,SAAUzJ,MAAO,SAAU2D,KAAMG,EAAAA,GACvC,CAAE2F,GAAI,SAAUzJ,MAAO,SAAU2D,KAAM6E,EAAAA,GACvC,CAAEiB,GAAI,cAAezJ,MAAO,cAAe2D,KAAMyJ,EAAAA,GACjD,CAAE3D,GAAI,kBAAmBzJ,MAAO,WAAY2D,KAAM+D,EAAAA,IAUpD,GAAIiS,EACF,OACE1V,EAAAA,EAAAA,KAAA,OAAKrG,UAAS,mCAAAsE,OAAqCtE,GAAYoG,UAC7DC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wCAAuCoG,UACpDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,oGACfqG,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,mCAAkCoG,SAAC,qCAQ1D,GAAI6D,IAAU4N,IAAc3L,EAAezL,OACzC,OACE4F,EAAAA,EAAAA,KAAA,OAAKrG,UAAS,mCAAAsE,OAAqCtE,GAAYoG,UAC7DC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wCAAuCoG,UACpDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,cAAaoG,SAAA,EAC1BC,EAAAA,EAAAA,KAACuD,EAAAA,EAAuB,CAAC5J,UAAU,yCACnCqG,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yDAAwDoG,SAAC,8BAGvEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,wCAAuCoG,SAAE6D,KACtD5D,EAAAA,EAAAA,KAAA,UACEE,QAASA,IAAMkV,IACfzb,UAAU,kFAAiFoG,SAC5F,qBAUX,MAAMqJ,EAAWoI,GAAa,CAC5BzH,WAAY,EACZ2M,YAAa,GACb5M,cAAe,CAAC,EAChB6M,kBAAmB,CAAC,EACpBlM,YAAa,CAAEC,aAAc,EAAGE,aAAc,EAAGD,cAAe,GAChEiM,uBAAwB,EACxBld,UAAyB,OAAdA,EAAqB,SAAyB,QAAdA,EAAsB,UAAY,WAGzEiY,EAAS7Q,GAAc,CAC3BiB,cAAe,EACfc,oBAAqB,EACrBI,iBAAkB,EAClBL,8BAA+B,EAC/BM,0BAA2B,EAC3BC,OAAQ,CAAEC,mBAAmB,EAAOC,aAAa,EAAOC,kBAAkB,IAG5E,OACExD,EAAAA,EAAAA,MAAA,OAAKnG,UAAS,mCAAAsE,OAAqCtE,GAAYoG,SAAA,EAE7DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,qEAAoEoG,SAAA,EACjFD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,mDAAkDoG,SAAC,8BAGjEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,wCAAuCoG,SAAC,uEAKvDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,0BAAyBoG,SAAA,EAEtCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,SA9EtD,CACjB,CAAEjC,MAAO,KAAM/B,MAAO,UACtB,CAAE+B,MAAO,MAAO/B,MAAO,WACvB,CAAE+B,MAAO,MAAO/B,MAAO,YA4EHH,IAAKib,IACf7W,EAAAA,EAAAA,KAAA,UAEEE,QAASA,KAAM4W,OA/FEC,EA+FoBF,EAAG/Y,MA9FpDiY,EAAagB,QACb9B,EAAc,CAAEvb,UAAWqd,IAFEA,OAgGjBpd,UAAS,8DAAAsE,OACPvE,IAAcmd,EAAG/Y,MACb,oEACA,8EACHiC,SAEF8W,EAAG9a,OARC8a,EAAG/Y,WAcdkC,EAAAA,EAAAA,KAACgX,EAAc,CACb5N,SAAUA,EACVvD,eAAgBA,EAChBgH,SAAUlJ,UACRE,QAAQoT,IAAI,oBAAqBxW,GAE1B,IAAI4U,QAAQ6B,IACjBC,WAAW,KACTD,EAAQ,CACNrH,IAAK,uBACLE,SAAS,kBAAD9R,QAAoB,IAAI2H,MAAOwR,cAAcC,MAAM,KAAK,GAAE,KAAApZ,OAAuB,UAAnBwC,EAAQ1B,OAAqB,OAAS0B,EAAQ1B,WAErH,iBAQbe,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uDAAsDoG,SAAA,EACnEC,EAAAA,EAAAA,KAACsC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAO,GACrB5L,UAAU,uFAAsFoG,UAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,iBACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5DqJ,EAASW,WAAW5L,QAAQ,OAEhC6B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SACzDqJ,EAAS1P,gBAGdsG,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,iDAAgDoG,UAC7DC,EAAAA,EAAAA,KAACuE,EAAAA,EAAkB,CAAC5K,UAAU,qDAKpCqG,EAAAA,EAAAA,KAACsC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAO,IACrB5L,UAAU,uFAAsFoG,UAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,wBACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5DqJ,EAASwN,uBAAuBzY,QAAQ,OAE5C2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,kDAAiDoG,SAAA,CAC3D4R,EAAO5P,cAAgB,GAAM4P,EAAOzO,0BAA4ByO,EAAO5P,cAAiB,KAAK5D,QAAQ,GAAK,EAAE,qBAGjH6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,mDAAkDoG,UAC/DC,EAAAA,EAAAA,KAACH,EAAAA,EAAY,CAAClG,UAAU,uDAK9BqG,EAAAA,EAAAA,KAACsC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAO,IACrB5L,UAAU,uFAAsFoG,UAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,kBACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,EAC3DqJ,EAASqB,YAAYC,aAAe,KAAMvM,QAAQ,GAAG,QAEzD2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,gDAA+CoG,SAAA,CACzDqJ,EAASqB,YAAYC,aAAe,GAAMtB,EAASqB,YAAYE,cAAgBvB,EAASqB,YAAYC,aAAgB,KAAKvM,QAAQ,GAAK,EAAE,kBAG7I6B,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,qDAAoDoG,UACjEC,EAAAA,EAAAA,KAACgJ,EAAAA,EAAqB,CAACrP,UAAU,yDAKvCqG,EAAAA,EAAAA,KAACsC,EAAAA,EAAOC,IAAG,CACTC,QAAS,CAAEC,QAAS,EAAGzE,EAAG,IAC1B0E,QAAS,CAAED,QAAS,EAAGzE,EAAG,GAC1BsH,WAAY,CAAEC,MAAO,IACrB5L,UAAU,uFAAsFoG,UAEhGD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oCAAmCoG,SAAA,EAChDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,2CAA0CoG,SAAC,mBACxDD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,mDAAkDoG,SAAA,CAAC,IAC5D8F,EAAezL,OAAS,GAAKgP,EAASW,WAAalE,EAAezL,QAAQ+D,QAAQ,GAAK,WAE3F6B,EAAAA,EAAAA,KAAA,KAAGrG,UAAU,gDAA+CoG,SAAC,gBAI/DC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,qDAAoDoG,UACjEC,EAAAA,EAAAA,KAACmJ,EAAAA,EAAS,CAACxP,UAAU,4DAO7BqG,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,gDAA+CoG,UAC5DC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,wBAAuBoG,SACnC0W,EAAK7a,IAAK0b,IACT,MAAMnX,EAAOmX,EAAI5X,KACjB,OACEI,EAAAA,EAAAA,MAAA,UAEEI,QAASA,IAAM4V,EAAawB,EAAI9R,IAChC7L,UAAS,2EAAAsE,OACP4X,IAAcyB,EAAI9R,GACd,mDACA,0HACHzF,SAAA,EAEHC,EAAAA,EAAAA,KAACG,EAAI,CACHxG,UAAS,gBAAAsE,OACP4X,IAAcyB,EAAI9R,GACd,mCACA,4EAGP8R,EAAIvb,QAfAub,EAAI9R,WAuBnB1F,EAAAA,EAAAA,MAACwC,EAAAA,EAAOC,IAAG,CAETC,QAAS,CAAEC,QAAS,EAAGlE,EAAG,IAC1BmE,QAAS,CAAED,QAAS,EAAGlE,EAAG,GAC1B+G,WAAY,CAAE/F,SAAU,IACxB5F,UAAU,OAAMoG,SAAA,CAED,aAAd8V,IACC/V,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,YAAWoG,SAAA,EAExBD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,wCAAuCoG,SAAA,EACpDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,mBAGzEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvBqP,OAAOmI,QAAQnO,EAASU,eAAelO,IAAIyI,IAAA,IAAEmT,EAAO1c,GAAKuJ,EAAA,OACxDvE,EAAAA,EAAAA,MAAA,OAAiBnG,UAAU,oCAAmCoG,SAAA,EAC5DD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oBAAmBoG,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,2CACfqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,oDAAmDoG,SAChEyX,QAGL1X,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,aAAYoG,SAAA,EACzBD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,sDAAqDoG,SAAA,CAAC,IAC/DjF,EAAKqD,QAAQ,OAEjB2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CACpDqJ,EAASW,WAAa,GAAMjP,EAAOsO,EAASW,WAAc,KAAK5L,QAAQ,GAAK,EAAE,YAZ3EqZ,WAoBhB1X,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,uBAGzEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,YAAWoG,SACvBqP,OAAOmI,QAAQnO,EAASuN,mBAAmB/a,IAAI+I,IAAA,IAAE8S,EAAW3c,GAAK6J,EAAA,OAChE7E,EAAAA,EAAAA,MAAA,OAAqBnG,UAAU,oCAAmCoG,SAAA,EAChED,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,oBAAmBoG,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,4CACfqG,EAAAA,EAAAA,KAAA,QAAMrG,UAAU,+DAA8DoG,SAC3E0X,QAGL3X,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,aAAYoG,SAAA,EACzBD,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,sDAAqDoG,SAAA,CAAC,IAC/DjF,EAAKqD,QAAQ,OAEjB2B,EAAAA,EAAAA,MAAA,KAAGnG,UAAU,2CAA0CoG,SAAA,CACpDqJ,EAASW,WAAa,GAAMjP,EAAOsO,EAASW,WAAc,KAAK5L,QAAQ,GAAK,EAAE,YAZ3EsZ,cAsBlB3X,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,uFAAsFoG,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,2DAA0DoG,SAAC,wBAGzEC,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,kBAAiBoG,UAC9BD,EAAAA,EAAAA,MAAA,SAAOnG,UAAU,aAAYoG,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAAD,UACED,EAAAA,EAAAA,MAAA,MAAInG,UAAU,gDAA+CoG,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,wEAAuEoG,SAAC,UAGtFC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yEAAwEoG,SAAC,UAGvFC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yEAAwEoG,SAAC,YAGvFC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,yEAAwEoG,SAAC,mBAK3FC,EAAAA,EAAAA,KAAA,SAAAD,SACG8F,EAAe1K,OAAO,GAAGS,IAAI,CAACf,EAAKgE,KAClCiB,EAAAA,EAAAA,MAAA,MAAmBnG,UAAU,gDAA+CoG,SAAA,EAC1EC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,kDAAiDoG,SAC5D,IAAI6F,KAAK/K,EAAIgB,MAAM6b,wBAEtB5X,EAAAA,EAAAA,MAAA,MAAInG,UAAU,yEAAwEoG,SAAA,CAAC,IACnFlF,EAAIC,KAAKqD,QAAQ,OAErB6B,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,gEAA+DoG,SAC1ElF,EAAImB,OAAOoC,oBAEd4B,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,gEAA+DoG,SAC1ElF,EAAIoB,aAXApB,EAAIgB,oBAsBZ,WAAdga,IACC7V,EAAAA,EAAAA,KAAC2X,EAAS,CACRne,KAAMqM,EACNnM,UAAWA,EACXC,UAAU,WAIC,WAAdkc,IACC7V,EAAAA,EAAAA,KAAC4X,EAAa,CACZ9W,WAAY6Q,EACZ5Q,eAAgBuU,EAChB3b,UAAU,WAIC,gBAAdkc,IACC7V,EAAAA,EAAAA,KAAC6X,EAAe,CACdhS,eAAgBA,EAChBC,cAAe6L,EAAO5P,cACtBpI,UAAU,WAIC,oBAAdkc,IACC7V,EAAAA,EAAAA,KAAC8X,EAAiB,CAChB1O,SAAUA,EACVvD,eAAgBA,EAChBwD,0BAA2B1F,UACzBE,QAAQoT,IAAI,+BAAgC5K,GAErC,IAAIgJ,QAAQ6B,GAAWC,WAAWD,EAAS,OAEpDvd,UAAU,aA/ITkc,OCxRb,EAbgCkC,KAE5B/X,EAAAA,EAAAA,KAAA,OAAKrG,UAAU,2CAA0CoG,UACvDD,EAAAA,EAAAA,MAAA,OAAKnG,UAAU,8BAA6BoG,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIrG,UAAU,wDAAuDoG,SAAC,8BAGtEC,EAAAA,EAAAA,KAAC4V,EAAa,Q","sources":["components/Cost/CostChart.tsx","components/Cost/BudgetManager.tsx","components/Cost/CostProjections.tsx","components/Cost/OptimizationCards.tsx","components/Cost/ExportControls.tsx","hooks/useCostData.ts","components/Cost/CostDashboard.tsx","pages/AnalyticsPage.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n} from 'chart.js';\nimport { Line, Bar } from 'react-chartjs-2';\nimport 'chartjs-adapter-date-fns';\nimport { format, parseISO } from 'date-fns';\nimport { DailyCost } from '../../types';\nimport { \n  ChartBarIcon, \n  PresentationChartLineIcon,\n  CalendarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n} from '@heroicons/react/24/outline';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler\n);\n\ninterface CostChartProps {\n  data: DailyCost[];\n  chartType?: 'line' | 'bar' | 'area';\n  timeframe: '7d' | '30d' | '90d';\n  className?: string;\n  showControls?: boolean;\n}\n\ninterface ChartMetrics {\n  trend: 'increasing' | 'decreasing' | 'stable';\n  trendPercentage: number;\n  averageCost: number;\n  totalCost: number;\n  peakDay: DailyCost | null;\n  lowestDay: DailyCost | null;\n}\n\nexport const CostChart: React.FC<CostChartProps> = ({\n  data,\n  chartType = 'line',\n  timeframe,\n  className = '',\n  showControls = true,\n}) => {\n  const [selectedChartType, setSelectedChartType] = React.useState<'line' | 'bar' | 'area'>(chartType);\n  const [metric, setMetric] = React.useState<'cost' | 'tokens' | 'requests'>('cost');\n\n  // Calculate chart metrics\n  const metrics = useMemo<ChartMetrics>(() => {\n    if (!data || data.length === 0) {\n      return {\n        trend: 'stable',\n        trendPercentage: 0,\n        averageCost: 0,\n        totalCost: 0,\n        peakDay: null,\n        lowestDay: null,\n      };\n    }\n\n    const totalCost = data.reduce((sum, day) => sum + day.cost, 0);\n    const averageCost = totalCost / data.length;\n    \n    const peakDay = data.reduce((peak, day) => \n      day.cost > (peak?.cost || 0) ? day : peak, data[0]\n    );\n    \n    const lowestDay = data.reduce((lowest, day) => \n      day.cost < (lowest?.cost || Infinity) ? day : lowest, data[0]\n    );\n\n    // Calculate trend\n    let trend: 'increasing' | 'decreasing' | 'stable' = 'stable';\n    let trendPercentage = 0;\n\n    if (data.length >= 2) {\n      const firstHalf = data.slice(0, Math.floor(data.length / 2));\n      const secondHalf = data.slice(Math.floor(data.length / 2));\n      \n      const firstHalfAvg = firstHalf.reduce((sum, day) => sum + day.cost, 0) / firstHalf.length;\n      const secondHalfAvg = secondHalf.reduce((sum, day) => sum + day.cost, 0) / secondHalf.length;\n      \n      if (Math.abs(secondHalfAvg - firstHalfAvg) > 0.01) {\n        trend = secondHalfAvg > firstHalfAvg ? 'increasing' : 'decreasing';\n        trendPercentage = Math.abs(((secondHalfAvg - firstHalfAvg) / firstHalfAvg) * 100);\n      }\n    }\n\n    return {\n      trend,\n      trendPercentage,\n      averageCost,\n      totalCost,\n      peakDay,\n      lowestDay,\n    };\n  }, [data]);\n\n  // Prepare chart data\n  const chartData = useMemo(() => {\n    const labels = data.map(day => day.date);\n    \n    const getValue = (day: DailyCost) => {\n      switch (metric) {\n        case 'tokens':\n          return day.tokens;\n        case 'requests':\n          return day.requests;\n        default:\n          return day.cost;\n      }\n    };\n\n    const baseData = {\n      labels,\n      datasets: [\n        {\n          label: metric === 'cost' ? 'Cost ($)' : metric === 'tokens' ? 'Tokens' : 'Requests',\n          data: data.map(getValue),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: selectedChartType === 'area' \n            ? 'rgba(59, 130, 246, 0.1)' \n            : 'rgba(59, 130, 246, 0.8)',\n          tension: 0.4,\n          fill: selectedChartType === 'area',\n          pointHoverRadius: 8,\n          pointHoverBackgroundColor: 'rgb(59, 130, 246)',\n          pointHoverBorderColor: 'rgb(255, 255, 255)',\n          pointHoverBorderWidth: 2,\n        },\n      ],\n    };\n\n    return baseData;\n  }, [data, metric, selectedChartType]);\n\n  // Chart options\n  const chartOptions = useMemo(() => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top' as const,\n        labels: {\n          color: 'rgb(107, 114, 128)',\n          usePointStyle: true,\n          pointStyle: 'circle',\n        },\n      },\n      tooltip: {\n        mode: 'index' as const,\n        intersect: false,\n        backgroundColor: 'rgba(17, 24, 39, 0.95)',\n        titleColor: 'rgb(243, 244, 246)',\n        bodyColor: 'rgb(209, 213, 219)',\n        borderColor: 'rgb(75, 85, 99)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          label: (context: any) => {\n            const value = context.parsed.y;\n            switch (metric) {\n              case 'cost':\n                return `${context.dataset.label}: $${value.toFixed(4)}`;\n              case 'tokens':\n                return `${context.dataset.label}: ${value.toLocaleString()}`;\n              default:\n                return `${context.dataset.label}: ${value}`;\n            }\n          },\n          labelColor: () => ({\n            borderColor: 'rgb(59, 130, 246)',\n            backgroundColor: 'rgb(59, 130, 246)',\n          }),\n        },\n      },\n    },\n    scales: {\n      x: {\n        type: 'category' as const,\n        grid: {\n          color: 'rgba(107, 114, 128, 0.1)',\n          drawBorder: false,\n        },\n        ticks: {\n          color: 'rgb(107, 114, 128)',\n          callback: function(value: any, index: number) {\n            const date = data[index]?.date;\n            return date ? format(parseISO(date), 'MMM dd') : '';\n          },\n          maxTicksLimit: 8,\n        },\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(107, 114, 128, 0.1)',\n          drawBorder: false,\n        },\n        ticks: {\n          color: 'rgb(107, 114, 128)',\n          callback: function(value: any) {\n            switch (metric) {\n              case 'cost':\n                return `$${value.toFixed(2)}`;\n              case 'tokens':\n                return `${(value / 1000).toFixed(0)}K`;\n              default:\n                return value.toString();\n            }\n          },\n        },\n      },\n    },\n    interaction: {\n      mode: 'nearest' as const,\n      axis: 'x' as const,\n      intersect: false,\n    },\n    animation: {\n      duration: 1000,\n      easing: 'easeInOutQuart' as const,\n    },\n  }), [data, metric]);\n\n  const chartTypes = [\n    { value: 'line', label: 'Line', icon: PresentationChartLineIcon },\n    { value: 'area', label: 'Area', icon: CalendarIcon },\n    { value: 'bar', label: 'Bar', icon: ChartBarIcon },\n  ] as const;\n\n  const metricOptions = [\n    { value: 'cost', label: 'Cost ($)', color: 'text-blue-600' },\n    { value: 'tokens', label: 'Tokens', color: 'text-green-600' },\n    { value: 'requests', label: 'Requests', color: 'text-purple-600' },\n  ] as const;\n\n  const renderChart = () => {\n    const commonProps = {\n      data: chartData,\n      options: chartOptions,\n      height: 300,\n    };\n\n    switch (selectedChartType) {\n      case 'bar':\n        return <Bar {...commonProps} />;\n      default:\n        return <Line {...commonProps} />;\n    }\n  };\n\n  if (!data || data.length === 0) {\n    return (\n      <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\n        <div className=\"flex items-center justify-center h-64 text-gray-500 dark:text-gray-400\">\n          <div className=\"text-center\">\n            <ChartBarIcon className=\"h-12 w-12 mx-auto mb-4\" />\n            <p>No data available for the selected timeframe</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 ${className}`}>\n      {/* Chart Header */}\n      <div className=\"p-6 pb-0\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              Cost Trends\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              {timeframe === '7d' ? 'Last 7 days' : timeframe === '30d' ? 'Last 30 days' : 'Last 90 days'}\n            </p>\n          </div>\n\n          {showControls && (\n            <div className=\"flex items-center gap-3\">\n              {/* Metric Selector */}\n              <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n                {metricOptions.map((m) => (\n                  <button\n                    key={m.value}\n                    onClick={() => setMetric(m.value as typeof metric)}\n                    className={`px-3 py-1 rounded-md text-xs font-medium transition-colors ${\n                      metric === m.value\n                        ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\n                        : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                    }`}\n                  >\n                    {m.label}\n                  </button>\n                ))}\n              </div>\n\n              {/* Chart Type Selector */}\n              <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n                {chartTypes.map((type) => {\n                  const Icon = type.icon;\n                  return (\n                    <button\n                      key={type.value}\n                      onClick={() => setSelectedChartType(type.value as typeof selectedChartType)}\n                      className={`p-2 rounded-md transition-colors ${\n                        selectedChartType === type.value\n                          ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\n                          : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                      }`}\n                      title={type.label}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total</p>\n            <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              ${metrics.totalCost.toFixed(2)}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">Average</p>\n            <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              ${metrics.averageCost.toFixed(2)}\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">Peak Day</p>\n            <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              ${metrics.peakDay?.cost.toFixed(2) || '0.00'}\n            </p>\n          </div>\n          <div className=\"text-center flex items-center justify-center\">\n            <div className=\"flex items-center gap-1\">\n              {metrics.trend === 'increasing' ? (\n                <ArrowTrendingUpIcon className=\"h-4 w-4 text-red-500\" />\n              ) : metrics.trend === 'decreasing' ? (\n                <ArrowTrendingDownIcon className=\"h-4 w-4 text-green-500\" />\n              ) : null}\n              <div>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">Trend</p>\n                <p className={`text-lg font-semibold ${\n                  metrics.trend === 'increasing' \n                    ? 'text-red-600 dark:text-red-400'\n                    : metrics.trend === 'decreasing'\n                    ? 'text-green-600 dark:text-green-400'\n                    : 'text-gray-600 dark:text-gray-400'\n                }`}>\n                  {metrics.trendPercentage > 0 ? `${metrics.trendPercentage.toFixed(1)}%` : 'Stable'}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Chart */}\n      <div className=\"p-6 pt-4\">\n        <div className=\"h-[300px]\">\n          {renderChart()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CostChart;","import React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { motion } from 'framer-motion';\nimport {\n  CurrencyDollarIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  BellIcon,\n  ShieldCheckIcon,\n  PencilSquareIcon,\n  TrashIcon,\n  Cog6ToothIcon,\n} from '@heroicons/react/24/outline';\nimport { BudgetInfo } from '../../types';\n\ninterface BudgetFormData {\n  monthlyLimit: number;\n  dailyLimit?: number;\n  alertThreshold: number;\n  enableAlerts: boolean;\n  enableHardStop: boolean;\n  emergencyContact?: string;\n}\n\ninterface BudgetManagerProps {\n  budgetInfo: BudgetInfo;\n  onUpdateBudget: (data: BudgetFormData) => Promise<void>;\n  className?: string;\n}\n\ninterface BudgetAlert {\n  id: string;\n  type: 'warning' | 'danger' | 'info';\n  message: string;\n  actionRequired: boolean;\n  timestamp: string;\n}\n\nexport const BudgetManager: React.FC<BudgetManagerProps> = ({\n  budgetInfo,\n  onUpdateBudget,\n  className = '',\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [saving, setSaving] = useState(false);\n\n  // Mock alerts data\n  const mockAlerts: BudgetAlert[] = [\n    {\n      id: '1',\n      type: 'warning',\n      message: 'Daily spend exceeded average by 25%',\n      actionRequired: false,\n      timestamp: '2025-01-12T10:30:00Z',\n    },\n    {\n      id: '2',\n      type: 'info',\n      message: 'Monthly budget tracking on schedule',\n      actionRequired: false,\n      timestamp: '2025-01-12T09:15:00Z',\n    },\n  ];\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors, isDirty },\n    reset,\n    watch,\n  } = useForm<BudgetFormData>({\n    defaultValues: {\n      monthlyLimit: budgetInfo.monthly_limit,\n      dailyLimit: budgetInfo.monthly_limit / 30, // Estimate daily from monthly\n      alertThreshold: 80, // 80% threshold\n      enableAlerts: true,\n      enableHardStop: false,\n      emergencyContact: '',\n    },\n  });\n\n  const watchedValues = watch();\n\n  const onSubmit = async (data: BudgetFormData) => {\n    setSaving(true);\n    try {\n      await onUpdateBudget(data);\n      setIsEditing(false);\n      reset(data);\n    } catch (error) {\n      console.error('Failed to update budget:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    reset();\n    setIsEditing(false);\n  };\n\n  const getBudgetStatusColor = () => {\n    if (budgetInfo.budget_utilization_percentage >= 90) return 'text-red-600 dark:text-red-400';\n    if (budgetInfo.budget_utilization_percentage >= 75) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-green-600 dark:text-green-400';\n  };\n\n  const getBudgetBarColor = () => {\n    if (budgetInfo.budget_utilization_percentage >= 90) return 'bg-red-500';\n    if (budgetInfo.budget_utilization_percentage >= 75) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Budget Overview Card */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              Budget Overview\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              Current month spending and limits\n            </p>\n          </div>\n          \n          {!isEditing && (\n            <button\n              onClick={() => setIsEditing(true)}\n              className=\"flex items-center gap-2 px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              <PencilSquareIcon className=\"h-4 w-4\" />\n              Edit Budget\n            </button>\n          )}\n        </div>\n\n        {/* Budget Progress */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n              Monthly Budget Progress\n            </span>\n            <span className={`text-sm font-semibold ${getBudgetStatusColor()}`}>\n              ${budgetInfo.current_month_spend.toFixed(2)} / ${budgetInfo.monthly_limit.toFixed(2)}\n            </span>\n          </div>\n          \n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3\">\n            <div\n              className={`h-3 rounded-full transition-all duration-500 ${getBudgetBarColor()}`}\n              style={{ width: `${Math.min(budgetInfo.budget_utilization_percentage, 100)}%` }}\n            />\n          </div>\n          \n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n            <span>0%</span>\n            <span>{budgetInfo.budget_utilization_percentage.toFixed(1)}% used</span>\n            <span>100%</span>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              ${budgetInfo.remaining_budget.toFixed(2)}\n            </p>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Remaining</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              ${budgetInfo.projected_month_end_spend.toFixed(2)}\n            </p>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Projected Total</p>\n          </div>\n          <div className=\"text-center\">\n            <p className={`text-2xl font-bold ${\n              budgetInfo.projected_month_end_spend > budgetInfo.monthly_limit\n                ? 'text-red-600 dark:text-red-400'\n                : 'text-green-600 dark:text-green-400'\n            }`}>\n              {budgetInfo.projected_month_end_spend > budgetInfo.monthly_limit ? '+' : ''}\n              ${(budgetInfo.projected_month_end_spend - budgetInfo.monthly_limit).toFixed(2)}\n            </p>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {budgetInfo.projected_month_end_spend > budgetInfo.monthly_limit ? 'Over' : 'Under'} Budget\n            </p>\n          </div>\n        </div>\n\n        {/* Budget Alerts */}\n        {(budgetInfo.alerts.approaching_limit || budgetInfo.alerts.over_budget || budgetInfo.alerts.high_daily_spend) && (\n          <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500\" />\n              <span className=\"font-medium text-gray-900 dark:text-white\">Active Alerts</span>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {budgetInfo.alerts.approaching_limit && (\n                <div className=\"flex items-center gap-2 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                  <BellIcon className=\"h-4 w-4 text-yellow-600 dark:text-yellow-400\" />\n                  <span className=\"text-sm text-yellow-700 dark:text-yellow-300\">\n                    Approaching monthly budget limit ({budgetInfo.budget_utilization_percentage.toFixed(1)}% used)\n                  </span>\n                </div>\n              )}\n              \n              {budgetInfo.alerts.over_budget && (\n                <div className=\"flex items-center gap-2 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                  <ExclamationTriangleIcon className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                  <span className=\"text-sm text-red-700 dark:text-red-300\">\n                    Monthly budget exceeded\n                  </span>\n                </div>\n              )}\n              \n              {budgetInfo.alerts.high_daily_spend && (\n                <div className=\"flex items-center gap-2 p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                  <BellIcon className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                  <span className=\"text-sm text-orange-700 dark:text-orange-300\">\n                    Daily spending above average\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </motion.div>\n\n      {/* Budget Configuration Form */}\n      {isEditing && (\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n        >\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Cog6ToothIcon className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              Budget Configuration\n            </h3>\n          </div>\n\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Monthly Limit */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Monthly Budget Limit\n                </label>\n                <Controller\n                  name=\"monthlyLimit\"\n                  control={control}\n                  rules={{ \n                    required: 'Monthly limit is required',\n                    min: { value: 1, message: 'Must be at least $1' },\n                    max: { value: 10000, message: 'Must be less than $10,000' },\n                  }}\n                  render={({ field }) => (\n                    <div className=\"relative\">\n                      <CurrencyDollarIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"1\"\n                        max=\"10000\"\n                        className=\"w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                        placeholder=\"100.00\"\n                      />\n                    </div>\n                  )}\n                />\n                {errors.monthlyLimit && (\n                  <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n                    {errors.monthlyLimit.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Daily Limit */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Daily Budget Limit (Optional)\n                </label>\n                <Controller\n                  name=\"dailyLimit\"\n                  control={control}\n                  rules={{ \n                    min: { value: 0.01, message: 'Must be at least $0.01' },\n                    validate: (value) => {\n                      if (value && value * 30 > watchedValues.monthlyLimit) {\n                        return 'Daily limit would exceed monthly limit';\n                      }\n                    }\n                  }}\n                  render={({ field }) => (\n                    <div className=\"relative\">\n                      <CurrencyDollarIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                      <input\n                        {...field}\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0.01\"\n                        className=\"w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                        placeholder=\"10.00\"\n                      />\n                    </div>\n                  )}\n                />\n                {errors.dailyLimit && (\n                  <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n                    {errors.dailyLimit.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Alert Threshold */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Alert Threshold (%)\n                </label>\n                <Controller\n                  name=\"alertThreshold\"\n                  control={control}\n                  rules={{ \n                    required: 'Alert threshold is required',\n                    min: { value: 50, message: 'Must be at least 50%' },\n                    max: { value: 95, message: 'Must be less than 95%' },\n                  }}\n                  render={({ field }) => (\n                    <div className=\"relative\">\n                      <input\n                        {...field}\n                        type=\"number\"\n                        min=\"50\"\n                        max=\"95\"\n                        className=\"w-full pr-8 pl-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                        placeholder=\"80\"\n                      />\n                      <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400\">%</span>\n                    </div>\n                  )}\n                />\n                {errors.alertThreshold && (\n                  <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n                    {errors.alertThreshold.message}\n                  </p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                  Get notified when {watchedValues.alertThreshold}% of budget is used\n                </p>\n              </div>\n\n              {/* Emergency Contact */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Emergency Contact (Optional)\n                </label>\n                <Controller\n                  name=\"emergencyContact\"\n                  control={control}\n                  rules={{ \n                    pattern: {\n                      value: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n                      message: 'Please enter a valid email address'\n                    }\n                  }}\n                  render={({ field }) => (\n                    <input\n                      {...field}\n                      type=\"email\"\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                      placeholder=\"admin@company.com\"\n                    />\n                  )}\n                />\n                {errors.emergencyContact && (\n                  <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">\n                    {errors.emergencyContact.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Checkboxes */}\n            <div className=\"space-y-4\">\n              <Controller\n                name=\"enableAlerts\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={value}\n                      onChange={onChange}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 dark:border-gray-600 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Enable budget alerts\n                    </span>\n                  </label>\n                )}\n              />\n\n              <Controller\n                name=\"enableHardStop\"\n                control={control}\n                render={({ field: { value, onChange } }) => (\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={value}\n                      onChange={onChange}\n                      className=\"h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 dark:border-gray-600 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Enable hard stop (block requests when budget exceeded)\n                    </span>\n                  </label>\n                )}\n              />\n              \n              {watchedValues.enableHardStop && (\n                <div className=\"ml-7 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                  <div className=\"flex items-center gap-2\">\n                    <ExclamationTriangleIcon className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                    <span className=\"text-sm text-red-700 dark:text-red-300 font-medium\">\n                      Warning: Hard stop will completely block AI requests when budget is exceeded\n                    </span>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex items-center justify-end gap-3 pt-6 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                type=\"button\"\n                onClick={handleCancel}\n                className=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={!isDirty || saving}\n                className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                {saving ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\" />\n                ) : (\n                  <CheckCircleIcon className=\"h-4 w-4\" />\n                )}\n                {saving ? 'Saving...' : 'Save Budget Settings'}\n              </button>\n            </div>\n          </form>\n        </motion.div>\n      )}\n\n      {/* Recent Alerts */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Recent Alerts\n          </h3>\n          <button className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300\">\n            View All\n          </button>\n        </div>\n\n        <div className=\"space-y-3\">\n          {mockAlerts.map((alert) => (\n            <div\n              key={alert.id}\n              className={`flex items-start gap-3 p-3 rounded-lg ${\n                alert.type === 'warning'\n                  ? 'bg-yellow-50 dark:bg-yellow-900/20'\n                  : alert.type === 'danger'\n                  ? 'bg-red-50 dark:bg-red-900/20'\n                  : 'bg-blue-50 dark:bg-blue-900/20'\n              }`}\n            >\n              {alert.type === 'warning' ? (\n                <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n              ) : alert.type === 'danger' ? (\n                <ExclamationTriangleIcon className=\"h-5 w-5 text-red-600 dark:text-red-400 mt-0.5\" />\n              ) : (\n                <CheckCircleIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5\" />\n              )}\n              \n              <div className=\"flex-1\">\n                <p className={`text-sm font-medium ${\n                  alert.type === 'warning'\n                    ? 'text-yellow-700 dark:text-yellow-300'\n                    : alert.type === 'danger'\n                    ? 'text-red-700 dark:text-red-300'\n                    : 'text-blue-700 dark:text-blue-300'\n                }`}>\n                  {alert.message}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                  {new Date(alert.timestamp).toLocaleString()}\n                </p>\n              </div>\n              \n              {alert.actionRequired && (\n                <button className=\"text-xs bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 px-2 py-1 rounded\">\n                  Action Required\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default BudgetManager;","import React, { useMemo, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { format, addDays, startOfMonth, endOfMonth, differenceInDays } from 'date-fns';\nimport {\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  CalendarIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  ChartBarIcon,\n  CurrencyDollarIcon,\n} from '@heroicons/react/24/outline';\nimport { DailyCost } from '../../types';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\ninterface ProjectionData {\n  date: string;\n  actualCost?: number;\n  projectedCost: number;\n  confidence: 'high' | 'medium' | 'low';\n  scenario: 'conservative' | 'realistic' | 'optimistic';\n}\n\ninterface CostProjectionsProps {\n  historicalData: DailyCost[];\n  monthlyBudget: number;\n  className?: string;\n}\n\ninterface ProjectionScenario {\n  name: string;\n  label: string;\n  color: string;\n  multiplier: number;\n  description: string;\n}\n\nexport const CostProjections: React.FC<CostProjectionsProps> = ({\n  historicalData,\n  monthlyBudget,\n  className = '',\n}) => {\n  const [selectedScenario, setSelectedScenario] = useState<'all' | 'conservative' | 'realistic' | 'optimistic'>('all');\n  const [projectionPeriod, setProjectionPeriod] = useState<'month' | 'quarter' | 'year'>('month');\n\n  const scenarios: ProjectionScenario[] = [\n    {\n      name: 'conservative',\n      label: 'Conservative',\n      color: 'rgb(34, 197, 94)', // green\n      multiplier: 1.1,\n      description: 'Assumes minimal growth in usage',\n    },\n    {\n      name: 'realistic',\n      label: 'Realistic',\n      color: 'rgb(59, 130, 246)', // blue\n      multiplier: 1.25,\n      description: 'Based on current trends',\n    },\n    {\n      name: 'optimistic',\n      label: 'Optimistic',\n      color: 'rgb(239, 68, 68)', // red\n      multiplier: 1.4,\n      description: 'Assumes increased usage patterns',\n    },\n  ];\n\n  // Generate projections based on historical data\n  const projections = useMemo(() => {\n    if (!historicalData || historicalData.length === 0) return [];\n\n    const today = new Date();\n    const monthStart = startOfMonth(today);\n    const monthEnd = endOfMonth(today);\n    \n    // Calculate trend from historical data\n    const recentDays = historicalData.slice(-7); // Last 7 days\n    const avgRecentCost = recentDays.reduce((sum, day) => sum + day.cost, 0) / recentDays.length;\n    \n    // Calculate growth rate\n    const firstHalf = historicalData.slice(0, Math.floor(historicalData.length / 2));\n    const secondHalf = historicalData.slice(Math.floor(historicalData.length / 2));\n    const firstHalfAvg = firstHalf.reduce((sum, day) => sum + day.cost, 0) / firstHalf.length;\n    const secondHalfAvg = secondHalf.reduce((sum, day) => sum + day.cost, 0) / secondHalf.length;\n    \n    const growthRate = secondHalfAvg > 0 ? (secondHalfAvg - firstHalfAvg) / firstHalfAvg : 0;\n    const dailyGrowthRate = growthRate / secondHalf.length;\n\n    const daysToProject = projectionPeriod === 'month' ? 30 : \n                         projectionPeriod === 'quarter' ? 90 : 365;\n\n    const projectionData: ProjectionData[] = [];\n\n    for (let i = 0; i <= daysToProject; i++) {\n      const projectionDate = format(addDays(today, i), 'yyyy-MM-dd');\n      \n      scenarios.forEach((scenario) => {\n        // Apply scenario multiplier and growth rate\n        const baseProjection = avgRecentCost * (1 + dailyGrowthRate * i);\n        const scenarioProjection = baseProjection * scenario.multiplier;\n        \n        // Add some variance for realism\n        const variance = Math.random() * 0.1 - 0.05; // ±5% variance\n        const projectedCost = Math.max(0, scenarioProjection * (1 + variance));\n        \n        // Determine confidence based on distance from today\n        let confidence: 'high' | 'medium' | 'low';\n        if (i <= 7) confidence = 'high';\n        else if (i <= 30) confidence = 'medium';\n        else confidence = 'low';\n\n        projectionData.push({\n          date: projectionDate,\n          projectedCost,\n          confidence,\n          scenario: scenario.name as 'conservative' | 'realistic' | 'optimistic',\n        });\n      });\n    }\n\n    return projectionData;\n  }, [historicalData, projectionPeriod]);\n\n  // Calculate summary metrics\n  const summaryMetrics = useMemo(() => {\n    const monthlyProjections = projections.filter((p, index) => index < 90); // ~30 days * 3 scenarios\n    \n    const scenarioSummaries = scenarios.map((scenario) => {\n      const scenarioData = monthlyProjections.filter(p => p.scenario === scenario.name);\n      const totalCost = scenarioData.reduce((sum, p) => sum + p.projectedCost, 0);\n      const avgDailyCost = totalCost / (scenarioData.length || 1);\n      \n      return {\n        ...scenario,\n        totalCost,\n        avgDailyCost,\n        budgetUtilization: (totalCost / monthlyBudget) * 100,\n        overBudget: totalCost > monthlyBudget,\n      };\n    });\n\n    return scenarioSummaries;\n  }, [projections, monthlyBudget, scenarios]);\n\n  // Prepare chart data\n  const chartData = useMemo(() => {\n    const filteredProjections = selectedScenario === 'all' \n      ? projections\n      : projections.filter(p => p.scenario === selectedScenario);\n\n    // Group by scenario for chart\n    const datasets = scenarios\n      .filter(scenario => selectedScenario === 'all' || scenario.name === selectedScenario)\n      .map((scenario) => {\n        const scenarioData = filteredProjections\n          .filter(p => p.scenario === scenario.name)\n          .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n        return {\n          label: scenario.label,\n          data: scenarioData.map(p => ({\n            x: p.date,\n            y: p.projectedCost,\n          })),\n          borderColor: scenario.color,\n          backgroundColor: scenario.color.replace('rgb', 'rgba').replace(')', ', 0.1)'),\n          tension: 0.4,\n          fill: false,\n          pointRadius: 0,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: scenario.color,\n          pointHoverBorderColor: 'white',\n          pointHoverBorderWidth: 2,\n        };\n      });\n\n    return {\n      datasets,\n    };\n  }, [projections, scenarios, selectedScenario]);\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top' as const,\n        labels: {\n          color: 'rgb(107, 114, 128)',\n          usePointStyle: true,\n          pointStyle: 'circle',\n        },\n      },\n      tooltip: {\n        mode: 'index' as const,\n        intersect: false,\n        backgroundColor: 'rgba(17, 24, 39, 0.95)',\n        titleColor: 'rgb(243, 244, 246)',\n        bodyColor: 'rgb(209, 213, 219)',\n        borderColor: 'rgb(75, 85, 99)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        callbacks: {\n          title: (context: any) => {\n            return format(new Date(context[0].parsed.x), 'MMM dd, yyyy');\n          },\n          label: (context: any) => {\n            return `${context.dataset.label}: $${context.parsed.y.toFixed(2)}`;\n          },\n        },\n      },\n    },\n    scales: {\n      x: {\n        type: 'time' as const,\n        time: {\n          unit: 'day' as const,\n          displayFormats: {\n            day: 'MMM dd',\n          },\n        },\n        grid: {\n          color: 'rgba(107, 114, 128, 0.1)',\n          drawBorder: false,\n        },\n        ticks: {\n          color: 'rgb(107, 114, 128)',\n          maxTicksLimit: 8,\n        },\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: 'rgba(107, 114, 128, 0.1)',\n          drawBorder: false,\n        },\n        ticks: {\n          color: 'rgb(107, 114, 128)',\n          callback: function(value: any) {\n            return `$${value.toFixed(2)}`;\n          },\n        },\n      },\n    },\n    interaction: {\n      mode: 'nearest' as const,\n      axis: 'x' as const,\n      intersect: false,\n    },\n    animation: {\n      duration: 1000,\n      easing: 'easeInOutQuart' as const,\n    },\n  };\n\n  const periodOptions = [\n    { value: 'month', label: '30 Days' },\n    { value: 'quarter', label: '90 Days' },\n    { value: 'year', label: '1 Year' },\n  ] as const;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header Controls */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Cost Projections & Trends\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            Predictive analysis based on historical usage patterns\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Period Selector */}\n          <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            {periodOptions.map((period) => (\n              <button\n                key={period.value}\n                onClick={() => setProjectionPeriod(period.value)}\n                className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n                  projectionPeriod === period.value\n                    ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\n                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                }`}\n              >\n                {period.label}\n              </button>\n            ))}\n          </div>\n\n          {/* Scenario Selector */}\n          <select\n            value={selectedScenario}\n            onChange={(e) => setSelectedScenario(e.target.value as typeof selectedScenario)}\n            className=\"px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"all\">All Scenarios</option>\n            {scenarios.map((scenario) => (\n              <option key={scenario.name} value={scenario.name}>\n                {scenario.label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {summaryMetrics.map((summary) => (\n          <motion.div\n            key={summary.name}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n          >\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center gap-2\">\n                <div \n                  className=\"w-3 h-3 rounded-full\"\n                  style={{ backgroundColor: summary.color }}\n                />\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                  {summary.label}\n                </h4>\n              </div>\n              {summary.overBudget && (\n                <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500\" />\n              )}\n            </div>\n\n            <div className=\"space-y-3\">\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  ${summary.totalCost.toFixed(2)}\n                </p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Projected monthly cost\n                </p>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Daily average\n                </span>\n                <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  ${summary.avgDailyCost.toFixed(2)}\n                </span>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Budget usage\n                </span>\n                <span className={`text-sm font-medium ${\n                  summary.overBudget \n                    ? 'text-red-600 dark:text-red-400'\n                    : 'text-green-600 dark:text-green-400'\n                }`}>\n                  {summary.budgetUtilization.toFixed(1)}%\n                </span>\n              </div>\n\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div\n                  className={`h-2 rounded-full transition-all duration-500 ${\n                    summary.overBudget ? 'bg-red-500' : 'bg-green-500'\n                  }`}\n                  style={{ \n                    width: `${Math.min(summary.budgetUtilization, 100)}%` \n                  }}\n                />\n              </div>\n\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                {summary.description}\n              </p>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Projection Chart */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center gap-2 mb-6\">\n          <ChartBarIcon className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n          <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Cost Projection Trends\n          </h4>\n        </div>\n\n        <div className=\"h-[400px]\">\n          {projections.length > 0 ? (\n            <Line data={chartData} options={chartOptions} />\n          ) : (\n            <div className=\"flex items-center justify-center h-full text-gray-500 dark:text-gray-400\">\n              <div className=\"text-center\">\n                <ChartBarIcon className=\"h-12 w-12 mx-auto mb-4\" />\n                <p>Insufficient data for projections</p>\n                <p className=\"text-sm mt-2\">Need at least 7 days of historical data</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </motion.div>\n\n      {/* Key Insights */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n      >\n        <div className=\"flex items-center gap-2 mb-4\">\n          <InformationCircleIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n          <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Key Insights\n          </h4>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h5 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n              Trend Analysis\n            </h5>\n            <div className=\"space-y-2\">\n              {summaryMetrics.map((summary) => (\n                <div key={summary.name} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-2 h-2 rounded-full\"\n                      style={{ backgroundColor: summary.color }}\n                    />\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {summary.label}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    {summary.budgetUtilization > 100 ? (\n                      <ArrowTrendingUpIcon className=\"h-4 w-4 text-red-500\" />\n                    ) : (\n                      <ArrowTrendingDownIcon className=\"h-4 w-4 text-green-500\" />\n                    )}\n                    <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {summary.budgetUtilization.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <h5 className=\"font-medium text-gray-900 dark:text-white mb-2\">\n              Recommendations\n            </h5>\n            <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n              {summaryMetrics.some(s => s.overBudget) && (\n                <div className=\"flex items-start gap-2\">\n                  <ExclamationTriangleIcon className=\"h-4 w-4 text-red-500 mt-0.5 flex-shrink-0\" />\n                  <span>Consider budget increase or usage optimization</span>\n                </div>\n              )}\n              <div className=\"flex items-start gap-2\">\n                <ClockIcon className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                <span>Monitor daily usage patterns for early detection</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <CurrencyDollarIcon className=\"h-4 w-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                <span>Review cost optimization opportunities weekly</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CostProjections;","import React, { useState, useMemo } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  LightBulbIcon,\n  ChartBarIcon,\n  CurrencyDollarIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ArrowRightIcon,\n  SparklesIcon,\n  Cog6ToothIcon,\n  FireIcon,\n  ShieldCheckIcon,\n  BoltIcon,\n} from '@heroicons/react/24/outline';\nimport { CostAnalytics, DailyCost } from '../../types';\n\ninterface OptimizationRecommendation {\n  id: string;\n  title: string;\n  description: string;\n  category: 'model' | 'usage' | 'scheduling' | 'caching' | 'architecture';\n  priority: 'high' | 'medium' | 'low';\n  potentialSavings: number;\n  savingsPercentage: number;\n  complexity: 'easy' | 'moderate' | 'complex';\n  timeToImplement: string;\n  impact: 'immediate' | 'short-term' | 'long-term';\n  actionItems: string[];\n  metrics: {\n    currentCost: number;\n    projectedCost: number;\n    affectedRequests: number;\n  };\n  implemented?: boolean;\n}\n\ninterface OptimizationCardsProps {\n  costData: CostAnalytics;\n  historicalData: DailyCost[];\n  onImplementRecommendation: (recommendationId: string) => Promise<void>;\n  className?: string;\n}\n\nexport const OptimizationCards: React.FC<OptimizationCardsProps> = ({\n  costData,\n  historicalData,\n  onImplementRecommendation,\n  className = '',\n}) => {\n  const [filter, setFilter] = useState<'all' | 'high' | 'medium' | 'low'>('all');\n  const [category, setCategory] = useState<'all' | OptimizationRecommendation['category']>('all');\n  const [implementingIds, setImplementingIds] = useState<Set<string>>(new Set());\n\n  // Generate recommendations based on cost data\n  const recommendations = useMemo<OptimizationRecommendation[]>(() => {\n    const recs: OptimizationRecommendation[] = [];\n\n    // Model optimization recommendations\n    if (costData.cost_by_model['gpt-4'] && costData.cost_by_model['gpt-4'] > costData.total_cost * 0.6) {\n      recs.push({\n        id: 'model-optimization-1',\n        title: 'Switch to GPT-3.5-turbo for Simple Tasks',\n        description: 'GPT-4 is being used for 60%+ of requests. Consider using GPT-3.5-turbo for simpler tasks like data extraction and basic analysis.',\n        category: 'model',\n        priority: 'high',\n        potentialSavings: costData.cost_by_model['gpt-4'] * 0.3,\n        savingsPercentage: 30,\n        complexity: 'easy',\n        timeToImplement: '1-2 hours',\n        impact: 'immediate',\n        actionItems: [\n          'Audit current GPT-4 usage patterns',\n          'Identify tasks suitable for GPT-3.5-turbo',\n          'Implement model selection logic',\n          'Monitor quality metrics after switch',\n        ],\n        metrics: {\n          currentCost: costData.cost_by_model['gpt-4'],\n          projectedCost: costData.cost_by_model['gpt-4'] * 0.7,\n          affectedRequests: Math.floor(costData.token_usage.total_tokens * 0.3 / 1000),\n        },\n      });\n    }\n\n    // Token usage optimization\n    if (costData.token_usage.output_tokens > costData.token_usage.input_tokens * 0.8) {\n      recs.push({\n        id: 'token-optimization-1',\n        title: 'Optimize Prompt Length and Output',\n        description: 'Output tokens are consuming significant costs. Optimize prompts to be more concise and limit response length.',\n        category: 'usage',\n        priority: 'medium',\n        potentialSavings: costData.total_cost * 0.15,\n        savingsPercentage: 15,\n        complexity: 'moderate',\n        timeToImplement: '3-5 hours',\n        impact: 'short-term',\n        actionItems: [\n          'Analyze prompt patterns for redundancy',\n          'Implement response length limits',\n          'Add prompt optimization guidelines',\n          'A/B test shorter prompts',\n        ],\n        metrics: {\n          currentCost: costData.total_cost,\n          projectedCost: costData.total_cost * 0.85,\n          affectedRequests: Math.floor(costData.token_usage.total_tokens / 1000),\n        },\n      });\n    }\n\n    // Caching recommendations\n    const repeatRequestRate = 0.25; // Mock calculation\n    if (repeatRequestRate > 0.2) {\n      recs.push({\n        id: 'caching-1',\n        title: 'Implement Response Caching',\n        description: 'High repeat request rate detected. Implement caching for frequently requested analyses.',\n        category: 'caching',\n        priority: 'high',\n        potentialSavings: costData.total_cost * 0.25,\n        savingsPercentage: 25,\n        complexity: 'moderate',\n        timeToImplement: '1-2 days',\n        impact: 'immediate',\n        actionItems: [\n          'Set up Redis caching layer',\n          'Identify cacheable request patterns',\n          'Implement cache invalidation strategy',\n          'Monitor cache hit rates',\n        ],\n        metrics: {\n          currentCost: costData.total_cost,\n          projectedCost: costData.total_cost * 0.75,\n          affectedRequests: Math.floor(costData.token_usage.total_tokens * 0.25 / 1000),\n        },\n      });\n    }\n\n    // Scheduling optimization\n    const dailyVariance = historicalData.length > 1 ? \n      Math.max(...historicalData.map(d => d.cost)) / Math.min(...historicalData.map(d => d.cost)) : 1;\n    \n    if (dailyVariance > 2) {\n      recs.push({\n        id: 'scheduling-1',\n        title: 'Implement Off-Peak Processing',\n        description: 'High cost variance detected. Schedule batch processing during off-peak hours for cost savings.',\n        category: 'scheduling',\n        priority: 'medium',\n        potentialSavings: costData.total_cost * 0.12,\n        savingsPercentage: 12,\n        complexity: 'complex',\n        timeToImplement: '2-3 days',\n        impact: 'long-term',\n        actionItems: [\n          'Analyze usage patterns by time of day',\n          'Implement job queue system',\n          'Set up scheduled batch processing',\n          'Monitor cost patterns after implementation',\n        ],\n        metrics: {\n          currentCost: costData.total_cost,\n          projectedCost: costData.total_cost * 0.88,\n          affectedRequests: Math.floor(costData.token_usage.total_tokens * 0.3 / 1000),\n        },\n      });\n    }\n\n    // Architecture optimization\n    recs.push({\n      id: 'architecture-1',\n      title: 'Implement Request Batching',\n      description: 'Process multiple similar requests in batches to reduce per-request overhead and improve efficiency.',\n      category: 'architecture',\n      priority: 'low',\n      potentialSavings: costData.total_cost * 0.08,\n      savingsPercentage: 8,\n      complexity: 'complex',\n      timeToImplement: '1 week',\n      impact: 'long-term',\n      actionItems: [\n        'Design batch processing architecture',\n        'Implement request queuing system',\n        'Add batch size optimization logic',\n        'Test and validate batch processing',\n      ],\n      metrics: {\n        currentCost: costData.total_cost,\n        projectedCost: costData.total_cost * 0.92,\n        affectedRequests: Math.floor(costData.token_usage.total_tokens / 1000),\n      },\n    });\n\n    return recs.sort((a, b) => {\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority] || b.potentialSavings - a.potentialSavings;\n    });\n  }, [costData, historicalData]);\n\n  // Filter recommendations\n  const filteredRecommendations = useMemo(() => {\n    return recommendations.filter(rec => {\n      const matchesPriority = filter === 'all' || rec.priority === filter;\n      const matchesCategory = category === 'all' || rec.category === category;\n      return matchesPriority && matchesCategory;\n    });\n  }, [recommendations, filter, category]);\n\n  // Calculate total potential savings\n  const totalSavings = useMemo(() => {\n    return filteredRecommendations.reduce((sum, rec) => sum + rec.potentialSavings, 0);\n  }, [filteredRecommendations]);\n\n  const handleImplement = async (recommendationId: string) => {\n    setImplementingIds(prev => new Set(Array.from(prev).concat(recommendationId)));\n    try {\n      await onImplementRecommendation(recommendationId);\n      // Update recommendation as implemented\n    } catch (error) {\n      console.error('Failed to implement recommendation:', error);\n    } finally {\n      setImplementingIds(prev => {\n        const next = new Set(prev);\n        next.delete(recommendationId);\n        return next;\n      });\n    }\n  };\n\n  const getPriorityColor = (priority: OptimizationRecommendation['priority']) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-300';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300';\n      case 'low':\n        return 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300';\n    }\n  };\n\n  const getCategoryIcon = (category: OptimizationRecommendation['category']) => {\n    switch (category) {\n      case 'model':\n        return SparklesIcon;\n      case 'usage':\n        return ChartBarIcon;\n      case 'scheduling':\n        return ClockIcon;\n      case 'caching':\n        return BoltIcon;\n      case 'architecture':\n        return Cog6ToothIcon;\n      default:\n        return LightBulbIcon;\n    }\n  };\n\n  const getComplexityColor = (complexity: OptimizationRecommendation['complexity']) => {\n    switch (complexity) {\n      case 'easy':\n        return 'text-green-600 dark:text-green-400';\n      case 'moderate':\n        return 'text-yellow-600 dark:text-yellow-400';\n      case 'complex':\n        return 'text-red-600 dark:text-red-400';\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header and Filters */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Cost Optimization Recommendations\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            Potential savings: <span className=\"font-medium text-green-600 dark:text-green-400\">\n              ${totalSavings.toFixed(2)}\n            </span> ({filteredRecommendations.length} recommendations)\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Priority Filter */}\n          <select\n            value={filter}\n            onChange={(e) => setFilter(e.target.value as typeof filter)}\n            className=\"px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"all\">All Priorities</option>\n            <option value=\"high\">High Priority</option>\n            <option value=\"medium\">Medium Priority</option>\n            <option value=\"low\">Low Priority</option>\n          </select>\n\n          {/* Category Filter */}\n          <select\n            value={category}\n            onChange={(e) => setCategory(e.target.value as typeof category)}\n            className=\"px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"all\">All Categories</option>\n            <option value=\"model\">Model Optimization</option>\n            <option value=\"usage\">Usage Optimization</option>\n            <option value=\"scheduling\">Scheduling</option>\n            <option value=\"caching\">Caching</option>\n            <option value=\"architecture\">Architecture</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2\">\n            <CurrencyDollarIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n            <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n              Total Savings\n            </span>\n          </div>\n          <p className=\"text-2xl font-bold text-blue-900 dark:text-blue-100 mt-1\">\n            ${totalSavings.toFixed(2)}\n          </p>\n        </div>\n\n        <div className=\"bg-red-50 dark:bg-red-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2\">\n            <FireIcon className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n            <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n              High Priority\n            </span>\n          </div>\n          <p className=\"text-2xl font-bold text-red-900 dark:text-red-100 mt-1\">\n            {recommendations.filter(r => r.priority === 'high').length}\n          </p>\n        </div>\n\n        <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2\">\n            <CheckCircleIcon className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n            <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n              Quick Wins\n            </span>\n          </div>\n          <p className=\"text-2xl font-bold text-green-900 dark:text-green-100 mt-1\">\n            {recommendations.filter(r => r.complexity === 'easy').length}\n          </p>\n        </div>\n\n        <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4\">\n          <div className=\"flex items-center gap-2\">\n            <BoltIcon className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n            <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n              Immediate Impact\n            </span>\n          </div>\n          <p className=\"text-2xl font-bold text-purple-900 dark:text-purple-100 mt-1\">\n            {recommendations.filter(r => r.impact === 'immediate').length}\n          </p>\n        </div>\n      </div>\n\n      {/* Recommendation Cards */}\n      <div className=\"grid grid-cols-1 gap-6\">\n        {filteredRecommendations.map((recommendation, index) => {\n          const Icon = getCategoryIcon(recommendation.category);\n          const isImplementing = implementingIds.has(recommendation.id);\n\n          return (\n            <motion.div\n              key={recommendation.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1 }}\n              className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n            >\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-start gap-4\">\n                  <div className=\"p-3 bg-blue-100 dark:bg-blue-900/30 rounded-lg\">\n                    <Icon className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {recommendation.title}\n                      </h4>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(recommendation.priority)}`}>\n                        {recommendation.priority}\n                      </span>\n                    </div>\n                    \n                    <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                      {recommendation.description}\n                    </p>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          Potential Savings\n                        </p>\n                        <p className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                          ${recommendation.potentialSavings.toFixed(2)}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {recommendation.savingsPercentage}% reduction\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          Complexity\n                        </p>\n                        <p className={`text-sm font-medium ${getComplexityColor(recommendation.complexity)}`}>\n                          {recommendation.complexity}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {recommendation.timeToImplement}\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          Impact\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                          {recommendation.impact}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {recommendation.metrics.affectedRequests.toLocaleString()} requests\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          Cost Projection\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          ${recommendation.metrics.currentCost.toFixed(2)} → ${recommendation.metrics.projectedCost.toFixed(2)}\n                        </p>\n                        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1 mt-1\">\n                          <div \n                            className=\"bg-green-500 h-1 rounded-full\"\n                            style={{ width: `${(1 - recommendation.metrics.projectedCost / recommendation.metrics.currentCost) * 100}%` }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <button\n                  onClick={() => handleImplement(recommendation.id)}\n                  disabled={isImplementing || recommendation.implemented}\n                  className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n                    recommendation.implemented\n                      ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-300'\n                      : 'bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50'\n                  }`}\n                >\n                  {isImplementing ? (\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\" />\n                  ) : recommendation.implemented ? (\n                    <CheckCircleIcon className=\"h-4 w-4\" />\n                  ) : (\n                    <ArrowRightIcon className=\"h-4 w-4\" />\n                  )}\n                  {isImplementing ? 'Implementing...' : recommendation.implemented ? 'Implemented' : 'Implement'}\n                </button>\n              </div>\n\n              {/* Action Items */}\n              <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n                <h5 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">\n                  Implementation Steps:\n                </h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                  {recommendation.actionItems.map((item, itemIndex) => (\n                    <div key={itemIndex} className=\"flex items-center gap-2\">\n                      <div className=\"w-1.5 h-1.5 rounded-full bg-blue-600 dark:bg-blue-400 flex-shrink-0 mt-2\" />\n                      <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {item}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {filteredRecommendations.length === 0 && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-12 text-center\">\n          <LightBulbIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n            No recommendations match your filters\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Try adjusting your priority or category filters to see more recommendations.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OptimizationCards;","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  DocumentArrowDownIcon,\n  DocumentTextIcon,\n  TableCellsIcon,\n  ChartBarIcon,\n  CalendarIcon,\n  Cog6ToothIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { CostAnalytics, DailyCost } from '../../types';\nimport { format } from 'date-fns';\n\ninterface ExportFormat {\n  id: string;\n  name: string;\n  extension: string;\n  icon: React.ComponentType<{ className?: string }>;\n  description: string;\n  size?: string;\n}\n\ninterface ExportOptions {\n  format: string;\n  timeRange: 'last7days' | 'last30days' | 'last90days' | 'custom';\n  includeCharts: boolean;\n  includeProjections: boolean;\n  includeRecommendations: boolean;\n  customStartDate?: string;\n  customEndDate?: string;\n}\n\ninterface ExportControlsProps {\n  costData: CostAnalytics;\n  historicalData: DailyCost[];\n  onExport: (options: ExportOptions) => Promise<{ url: string; filename: string }>;\n  className?: string;\n}\n\nexport const ExportControls: React.FC<ExportControlsProps> = ({\n  costData,\n  historicalData,\n  onExport,\n  className = '',\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [exporting, setExporting] = useState<string | null>(null);\n  const [options, setOptions] = useState<ExportOptions>({\n    format: 'pdf',\n    timeRange: 'last30days',\n    includeCharts: true,\n    includeProjections: false,\n    includeRecommendations: false,\n  });\n\n  const exportFormats: ExportFormat[] = [\n    {\n      id: 'pdf',\n      name: 'PDF Report',\n      extension: 'pdf',\n      icon: DocumentTextIcon,\n      description: 'Comprehensive report with charts and analysis',\n      size: '~2-5 MB',\n    },\n    {\n      id: 'csv',\n      name: 'CSV Data',\n      extension: 'csv',\n      icon: TableCellsIcon,\n      description: 'Raw data for further analysis',\n      size: '~50-200 KB',\n    },\n    {\n      id: 'excel',\n      name: 'Excel Workbook',\n      extension: 'xlsx',\n      icon: TableCellsIcon,\n      description: 'Multi-sheet workbook with formulas',\n      size: '~100-500 KB',\n    },\n    {\n      id: 'json',\n      name: 'JSON Data',\n      extension: 'json',\n      icon: Cog6ToothIcon,\n      description: 'Structured data for API integration',\n      size: '~10-100 KB',\n    },\n  ];\n\n  const timeRangeOptions = [\n    { value: 'last7days', label: 'Last 7 days' },\n    { value: 'last30days', label: 'Last 30 days' },\n    { value: 'last90days', label: 'Last 90 days' },\n    { value: 'custom', label: 'Custom range' },\n  ];\n\n  const handleExport = async (formatId: string) => {\n    setExporting(formatId);\n    try {\n      const exportOptions = { ...options, format: formatId };\n      const result = await onExport(exportOptions);\n      \n      // Create download link\n      const link = document.createElement('a');\n      link.href = result.url;\n      link.download = result.filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      // Show success message or close modal\n      setIsOpen(false);\n    } catch (error) {\n      console.error('Export failed:', error);\n      // Handle error - could show toast notification\n    } finally {\n      setExporting(null);\n    }\n  };\n\n  const getEstimatedSize = () => {\n    const baseSize = historicalData.length * 0.1; // KB\n    let multiplier = 1;\n    \n    if (options.includeCharts) multiplier += 0.5;\n    if (options.includeProjections) multiplier += 0.3;\n    if (options.includeRecommendations) multiplier += 0.2;\n    \n    switch (options.format) {\n      case 'pdf':\n        return `~${Math.round(baseSize * multiplier * 10)}KB - ${Math.round(baseSize * multiplier * 20)}KB`;\n      case 'csv':\n        return `~${Math.round(baseSize * multiplier * 2)}KB`;\n      case 'excel':\n        return `~${Math.round(baseSize * multiplier * 5)}KB`;\n      case 'json':\n        return `~${Math.round(baseSize * multiplier)}KB`;\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const getPreview = () => {\n    const selectedFormat = exportFormats.find(f => f.id === options.format);\n    const timeRangeLabel = timeRangeOptions.find(t => t.value === options.timeRange)?.label || 'Custom';\n    \n    const sections = [];\n    if (options.includeCharts) sections.push('Charts');\n    if (options.includeProjections) sections.push('Projections');\n    if (options.includeRecommendations) sections.push('Recommendations');\n    \n    return {\n      format: selectedFormat?.name || 'Unknown',\n      timeRange: timeRangeLabel,\n      sections: sections.length > 0 ? sections : ['Basic data only'],\n      estimatedSize: getEstimatedSize(),\n    };\n  };\n\n  if (!isOpen) {\n    return (\n      <button\n        onClick={() => setIsOpen(true)}\n        className={`flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors ${className}`}\n      >\n        <DocumentArrowDownIcon className=\"h-4 w-4\" />\n        Export\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <motion.div\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center gap-3\">\n            <DocumentArrowDownIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                Export Cost Analytics\n              </h2>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Generate reports and download data in various formats\n              </p>\n            </div>\n          </div>\n          \n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\n          >\n            <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        <div className=\"flex max-h-[calc(90vh-120px)]\">\n          {/* Left Panel - Options */}\n          <div className=\"flex-1 p-6 overflow-y-auto border-r border-gray-200 dark:border-gray-700\">\n            {/* Format Selection */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Export Format\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {exportFormats.map((format) => {\n                  const Icon = format.icon;\n                  return (\n                    <label\n                      key={format.id}\n                      className={`flex items-start gap-3 p-4 border rounded-lg cursor-pointer transition-colors ${\n                        options.format === format.id\n                          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\n                          : 'border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'\n                      }`}\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"format\"\n                        value={format.id}\n                        checked={options.format === format.id}\n                        onChange={(e) => setOptions(prev => ({ ...prev, format: e.target.value }))}\n                        className=\"mt-1\"\n                      />\n                      <Icon className=\"h-5 w-5 text-gray-600 dark:text-gray-400 mt-0.5\" />\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-gray-900 dark:text-white\">\n                          {format.name}\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {format.description}\n                        </p>\n                        {format.size && (\n                          <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                            {format.size}\n                          </p>\n                        )}\n                      </div>\n                    </label>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Time Range */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Time Range\n              </h3>\n              <div className=\"space-y-3\">\n                {timeRangeOptions.map((range) => (\n                  <label key={range.value} className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name=\"timeRange\"\n                      value={range.value}\n                      checked={options.timeRange === range.value}\n                      onChange={(e) => setOptions(prev => ({ ...prev, timeRange: e.target.value as any }))}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      {range.label}\n                    </span>\n                  </label>\n                ))}\n              </div>\n\n              {options.timeRange === 'custom' && (\n                <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Start Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={options.customStartDate || ''}\n                      onChange={(e) => setOptions(prev => ({ ...prev, customStartDate: e.target.value }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      End Date\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={options.customEndDate || ''}\n                      onChange={(e) => setOptions(prev => ({ ...prev, customEndDate: e.target.value }))}\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Content Options */}\n            {(options.format === 'pdf' || options.format === 'excel') && (\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Include in Export\n                </h3>\n                <div className=\"space-y-3\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={options.includeCharts}\n                      onChange={(e) => setOptions(prev => ({ ...prev, includeCharts: e.target.checked }))}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Charts and Visualizations\n                    </span>\n                  </label>\n\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={options.includeProjections}\n                      onChange={(e) => setOptions(prev => ({ ...prev, includeProjections: e.target.checked }))}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Cost Projections\n                    </span>\n                  </label>\n\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={options.includeRecommendations}\n                      onChange={(e) => setOptions(prev => ({ ...prev, includeRecommendations: e.target.checked }))}\n                      className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 rounded\"\n                    />\n                    <span className=\"ml-3 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Optimization Recommendations\n                    </span>\n                  </label>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Panel - Preview */}\n          <div className=\"w-80 p-6 bg-gray-50 dark:bg-gray-900\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n              Export Preview\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <DocumentTextIcon className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {getPreview().format}\n                  </span>\n                </div>\n                \n                <div className=\"text-xs space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Time Range:</span>\n                    <span className=\"text-gray-900 dark:text-white\">{getPreview().timeRange}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Est. Size:</span>\n                    <span className=\"text-gray-900 dark:text-white\">{getPreview().estimatedSize}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n                  Content Sections\n                </h4>\n                <div className=\"space-y-1\">\n                  {getPreview().sections.map((section, index) => (\n                    <div key={index} className=\"flex items-center gap-2 text-xs\">\n                      <CheckCircleIcon className=\"h-3 w-3 text-green-600 dark:text-green-400\" />\n                      <span className=\"text-gray-700 dark:text-gray-300\">{section}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Data Summary */}\n              <div className=\"p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">\n                  Data Summary\n                </h4>\n                <div className=\"text-xs space-y-1\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Total Cost:</span>\n                    <span className=\"text-gray-900 dark:text-white\">${costData.total_cost.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Days:</span>\n                    <span className=\"text-gray-900 dark:text-white\">{historicalData.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">Models:</span>\n                    <span className=\"text-gray-900 dark:text-white\">\n                      {Object.keys(costData.cost_by_model).length}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Warning for Large Exports */}\n              {(options.includeCharts || options.timeRange === 'last90days') && (\n                <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                  <div className=\"flex items-start gap-2\">\n                    <ExclamationTriangleIcon className=\"h-4 w-4 text-yellow-600 dark:text-yellow-400 mt-0.5 flex-shrink-0\" />\n                    <div>\n                      <p className=\"text-xs font-medium text-yellow-700 dark:text-yellow-300\">\n                        Large Export\n                      </p>\n                      <p className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                        This export may take longer to generate due to the amount of data or included charts.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-gray-200 dark:border-gray-700\">\n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors\"\n          >\n            Cancel\n          </button>\n          \n          <button\n            onClick={() => handleExport(options.format)}\n            disabled={exporting === options.format}\n            className=\"flex items-center gap-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {exporting === options.format ? (\n              <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent\" />\n            ) : (\n              <DocumentArrowDownIcon className=\"h-4 w-4\" />\n            )}\n            {exporting === options.format ? 'Generating...' : `Export ${getPreview().format}`}\n          </button>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default ExportControls;","import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { CostAnalytics, DailyCost, BudgetInfo, ApiResponse } from '../types';\nimport { format, subDays, startOfDay } from 'date-fns';\n\ninterface CostDataFilters {\n  timeframe: '7d' | '30d' | '90d';\n  startDate?: Date;\n  endDate?: Date;\n  models?: string[];\n  operations?: string[];\n}\n\ninterface UseCostDataOptions {\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  filters?: CostDataFilters;\n}\n\ninterface CostDataState {\n  analytics: CostAnalytics | null;\n  historicalData: DailyCost[];\n  budgetInfo: BudgetInfo | null;\n  filters: CostDataFilters;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface CostDataActions {\n  refetch: () => Promise<void>;\n  updateFilters: (newFilters: Partial<CostDataFilters>) => void;\n  updateBudget: (budgetData: any) => Promise<void>;\n  clearCache: () => void;\n}\n\nconst API_BASE_URL = '/api';\n\n// API functions\nconst fetchCostAnalytics = async (filters: CostDataFilters): Promise<CostAnalytics> => {\n  const params = new URLSearchParams();\n  \n  if (filters.timeframe) params.append('timeframe', filters.timeframe);\n  if (filters.startDate) params.append('start_date', format(filters.startDate, 'yyyy-MM-dd'));\n  if (filters.endDate) params.append('end_date', format(filters.endDate, 'yyyy-MM-dd'));\n  if (filters.models?.length) params.append('models', filters.models.join(','));\n  if (filters.operations?.length) params.append('operations', filters.operations.join(','));\n\n  const response = await fetch(`${API_BASE_URL}/analytics/costs?${params}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch cost analytics: ${response.statusText}`);\n  }\n  \n  const data: ApiResponse<CostAnalytics> = await response.json();\n  if (!data.success) {\n    throw new Error(data.error?.message || 'Failed to fetch cost analytics');\n  }\n  \n  return data.data!;\n};\n\nconst fetchHistoricalData = async (filters: CostDataFilters): Promise<DailyCost[]> => {\n  const params = new URLSearchParams();\n  \n  if (filters.timeframe) params.append('timeframe', filters.timeframe);\n  if (filters.startDate) params.append('start_date', format(filters.startDate, 'yyyy-MM-dd'));\n  if (filters.endDate) params.append('end_date', format(filters.endDate, 'yyyy-MM-dd'));\n\n  const response = await fetch(`${API_BASE_URL}/analytics/historical?${params}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch historical data: ${response.statusText}`);\n  }\n  \n  const data: ApiResponse<DailyCost[]> = await response.json();\n  if (!data.success) {\n    throw new Error(data.error?.message || 'Failed to fetch historical data');\n  }\n  \n  return data.data!;\n};\n\nconst fetchBudgetInfo = async (): Promise<BudgetInfo> => {\n  const response = await fetch(`${API_BASE_URL}/budget/info`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch budget info: ${response.statusText}`);\n  }\n  \n  const data: ApiResponse<BudgetInfo> = await response.json();\n  if (!data.success) {\n    throw new Error(data.error?.message || 'Failed to fetch budget info');\n  }\n  \n  return data.data!;\n};\n\nconst updateBudgetSettings = async (budgetData: any): Promise<BudgetInfo> => {\n  const response = await fetch(`${API_BASE_URL}/budget/update`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(budgetData),\n  });\n  \n  if (!response.ok) {\n    throw new Error(`Failed to update budget: ${response.statusText}`);\n  }\n  \n  const data: ApiResponse<BudgetInfo> = await response.json();\n  if (!data.success) {\n    throw new Error(data.error?.message || 'Failed to update budget');\n  }\n  \n  return data.data!;\n};\n\n// Generate query keys\nconst getCostQueryKeys = {\n  all: ['cost'] as const,\n  analytics: (filters: CostDataFilters) => [...getCostQueryKeys.all, 'analytics', filters] as const,\n  historical: (filters: CostDataFilters) => [...getCostQueryKeys.all, 'historical', filters] as const,\n  budget: () => [...getCostQueryKeys.all, 'budget'] as const,\n};\n\n// Default filters\nconst defaultFilters: CostDataFilters = {\n  timeframe: '30d',\n  models: undefined,\n  operations: undefined,\n};\n\nexport const useCostData = (options: UseCostDataOptions = {}): CostDataState & CostDataActions => {\n  const {\n    autoRefresh = true,\n    refreshInterval = 30000, // 30 seconds\n    filters: initialFilters = defaultFilters,\n  } = options;\n\n  const queryClient = useQueryClient();\n  const [filters, setFilters] = useState<CostDataFilters>(initialFilters);\n  const [error, setError] = useState<string | null>(null);\n\n  // Calculate date range based on timeframe\n  const dateRange = useMemo(() => {\n    const now = new Date();\n    let start: Date, end: Date;\n\n    if (filters.startDate && filters.endDate) {\n      start = startOfDay(filters.startDate);\n      end = startOfDay(filters.endDate);\n    } else {\n      end = startOfDay(now);\n      switch (filters.timeframe) {\n        case '7d':\n          start = startOfDay(subDays(now, 7));\n          break;\n        case '90d':\n          start = startOfDay(subDays(now, 90));\n          break;\n        default: // '30d'\n          start = startOfDay(subDays(now, 30));\n          break;\n      }\n    }\n\n    return { start, end };\n  }, [filters]);\n\n  // Update filters with calculated date range\n  const effectiveFilters = useMemo(() => ({\n    ...filters,\n    startDate: dateRange.start,\n    endDate: dateRange.end,\n  }), [filters, dateRange]);\n\n  // Cost analytics query\n  const analyticsQuery = useQuery({\n    queryKey: getCostQueryKeys.analytics(effectiveFilters),\n    queryFn: () => fetchCostAnalytics(effectiveFilters),\n    staleTime: autoRefresh ? refreshInterval : Infinity,\n    refetchInterval: autoRefresh ? refreshInterval : false,\n    retry: (failureCount, error) => {\n      // Don't retry on 4xx errors\n      if (error instanceof Error && error.message.includes('4')) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Historical data query\n  const historicalQuery = useQuery({\n    queryKey: getCostQueryKeys.historical(effectiveFilters),\n    queryFn: () => fetchHistoricalData(effectiveFilters),\n    staleTime: autoRefresh ? refreshInterval : Infinity,\n    refetchInterval: autoRefresh ? refreshInterval : false,\n    retry: (failureCount, error) => {\n      if (error instanceof Error && error.message.includes('4')) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Budget info query\n  const budgetQuery = useQuery({\n    queryKey: getCostQueryKeys.budget(),\n    queryFn: fetchBudgetInfo,\n    staleTime: autoRefresh ? refreshInterval * 2 : Infinity, // Budget changes less frequently\n    refetchInterval: autoRefresh ? refreshInterval * 2 : false,\n    retry: (failureCount, error) => {\n      if (error instanceof Error && error.message.includes('4')) {\n        return false;\n      }\n      return failureCount < 3;\n    },\n  });\n\n  // Budget update mutation\n  const budgetMutation = useMutation({\n    mutationFn: updateBudgetSettings,\n    onSuccess: (data) => {\n      // Update the budget query cache\n      queryClient.setQueryData(getCostQueryKeys.budget(), data);\n      setError(null);\n    },\n  });\n\n  // Clear any existing error when data loads successfully\n  useEffect(() => {\n    if (analyticsQuery.data || historicalQuery.data || budgetQuery.data) {\n      setError(null);\n    }\n  }, [analyticsQuery.data, historicalQuery.data, budgetQuery.data]);\n\n  // Actions\n  const updateFilters = useCallback((newFilters: Partial<CostDataFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  const refetch = useCallback(async () => {\n    setError(null);\n    await Promise.all([\n      analyticsQuery.refetch(),\n      historicalQuery.refetch(),\n      budgetQuery.refetch(),\n    ]);\n  }, [analyticsQuery, historicalQuery, budgetQuery]);\n\n  const updateBudget = useCallback(async (budgetData: any) => {\n    await budgetMutation.mutateAsync(budgetData);\n  }, [budgetMutation]);\n\n  const clearCache = useCallback(() => {\n    queryClient.removeQueries({ queryKey: getCostQueryKeys.all });\n    setError(null);\n  }, [queryClient]);\n\n  // Determine loading state\n  const isLoading = analyticsQuery.isLoading || historicalQuery.isLoading || budgetQuery.isLoading;\n\n  // Combine errors\n  const combinedError = error || \n    analyticsQuery.error?.message || \n    historicalQuery.error?.message || \n    budgetQuery.error?.message || \n    budgetMutation.error?.message || \n    null;\n\n  return {\n    // State\n    analytics: analyticsQuery.data || null,\n    historicalData: historicalQuery.data || [],\n    budgetInfo: budgetQuery.data || null,\n    filters: effectiveFilters,\n    isLoading,\n    error: combinedError,\n\n    // Actions\n    refetch,\n    updateFilters,\n    updateBudget,\n    clearCache,\n  };\n};\n\n// Additional hooks for specific use cases\n\nexport const useCostAnalytics = (filters?: Partial<CostDataFilters>) => {\n  const { analytics, isLoading, error, refetch } = useCostData({\n    filters: { ...defaultFilters, ...filters },\n  });\n\n  return {\n    data: analytics,\n    isLoading,\n    error,\n    refetch,\n  };\n};\n\nexport const useBudgetInfo = () => {\n  const { budgetInfo, isLoading, error, updateBudget, refetch } = useCostData();\n\n  return {\n    data: budgetInfo,\n    isLoading,\n    error,\n    updateBudget,\n    refetch,\n  };\n};\n\nexport const useHistoricalCosts = (timeframe: '7d' | '30d' | '90d' = '30d') => {\n  const { historicalData, isLoading, error, refetch } = useCostData({\n    filters: { timeframe },\n  });\n\n  return {\n    data: historicalData,\n    isLoading,\n    error,\n    refetch,\n  };\n};\n\n// Hook for cost optimization insights\nexport const useCostInsights = () => {\n  const { analytics, historicalData, isLoading, error } = useCostData();\n\n  const insights = useMemo(() => {\n    if (!analytics || !historicalData || historicalData.length === 0) {\n      return null;\n    }\n\n    // Calculate trends\n    const recentDays = historicalData.slice(-7);\n    const previousDays = historicalData.slice(-14, -7);\n    \n    const recentAvg = recentDays.reduce((sum, day) => sum + day.cost, 0) / recentDays.length;\n    const previousAvg = previousDays.reduce((sum, day) => sum + day.cost, 0) / previousDays.length || recentAvg;\n    \n    const trend = recentAvg > previousAvg ? 'increasing' : recentAvg < previousAvg ? 'decreasing' : 'stable';\n    const trendPercentage = previousAvg > 0 ? Math.abs((recentAvg - previousAvg) / previousAvg * 100) : 0;\n\n    // Find peak usage day\n    const peakDay = historicalData.reduce((peak, day) => day.cost > peak.cost ? day : peak);\n    \n    // Cost efficiency\n    const avgCostPerToken = analytics.token_usage.total_tokens > 0 \n      ? analytics.total_cost / analytics.token_usage.total_tokens \n      : 0;\n\n    return {\n      trend,\n      trendPercentage,\n      peakDay,\n      avgCostPerToken,\n      dailyAverage: recentAvg,\n      weeklyChange: recentAvg - previousAvg,\n      mostExpensiveModel: Object.keys(analytics.cost_by_model).reduce((a, b) => \n        analytics.cost_by_model[a] > analytics.cost_by_model[b] ? a : b\n      ),\n    };\n  }, [analytics, historicalData]);\n\n  return {\n    insights,\n    isLoading,\n    error,\n  };\n};\n\nexport default useCostData;","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  ChartBarIcon,\n  CurrencyDollarIcon,\n  DocumentArrowDownIcon,\n  Cog6ToothIcon,\n  InformationCircleIcon,\n  ClockIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { CostAnalytics, BudgetInfo } from '../../types';\nimport CostChart from './CostChart';\nimport BudgetManager from './BudgetManager';\nimport CostProjections from './CostProjections';\nimport OptimizationCards from './OptimizationCards';\nimport ExportControls from './ExportControls';\nimport { useCostData, useCostInsights } from '../../hooks/useCostData';\n\ninterface CostDashboardProps {\n  className?: string;\n}\n\nexport const CostDashboard: React.FC<CostDashboardProps> = ({ \n  className = '' \n}) => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'charts' | 'budget' | 'projections' | 'recommendations'>('overview');\n  const [timeframe, setTimeframe] = useState<'7d' | '30d' | '90d'>('30d');\n\n  // Use real data hooks\n  const {\n    analytics,\n    historicalData,\n    budgetInfo,\n    isLoading,\n    error,\n    updateFilters,\n    updateBudget,\n    refetch,\n  } = useCostData({\n    filters: { timeframe },\n    autoRefresh: true,\n  });\n\n  const { insights } = useCostInsights();\n\n  // Handle timeframe changes\n  const handleTimeframeChange = (newTimeframe: '7d' | '30d' | '90d') => {\n    setTimeframe(newTimeframe);\n    updateFilters({ timeframe: newTimeframe });\n  };\n\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: InformationCircleIcon },\n    { id: 'charts', label: 'Charts', icon: ChartBarIcon },\n    { id: 'budget', label: 'Budget', icon: CurrencyDollarIcon },\n    { id: 'projections', label: 'Projections', icon: ClockIcon },\n    { id: 'recommendations', label: 'Optimize', icon: Cog6ToothIcon },\n  ] as const;\n\n  const timeframes = [\n    { value: '7d', label: '7 Days' },\n    { value: '30d', label: '30 Days' },\n    { value: '90d', label: '90 Days' },\n  ] as const;\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className={`max-w-7xl mx-auto p-6 space-y-6 ${className}`}>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent mx-auto mb-4\" />\n            <p className=\"text-gray-600 dark:text-gray-400\">Loading cost analytics...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error && !analytics && !historicalData.length) {\n    return (\n      <div className={`max-w-7xl mx-auto p-6 space-y-6 ${className}`}>\n        <div className=\"flex items-center justify-center h-96\">\n          <div className=\"text-center\">\n            <ExclamationTriangleIcon className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n              Failed to load cost data\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">{error}</p>\n            <button\n              onClick={() => refetch()}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Use fallback data if no analytics available\n  const costData = analytics || {\n    total_cost: 0,\n    daily_costs: [],\n    cost_by_model: {},\n    cost_by_operation: {},\n    token_usage: { total_tokens: 0, input_tokens: 0, output_tokens: 0 },\n    projected_monthly_cost: 0,\n    timeframe: timeframe === '7d' ? '7 days' : timeframe === '90d' ? '90 days' : '30 days',\n  } as CostAnalytics;\n\n  const budget = budgetInfo || {\n    monthly_limit: 0,\n    current_month_spend: 0,\n    remaining_budget: 0,\n    budget_utilization_percentage: 0,\n    projected_month_end_spend: 0,\n    alerts: { approaching_limit: false, over_budget: false, high_daily_spend: false },\n  } as BudgetInfo;\n\n  return (\n    <div className={`max-w-7xl mx-auto p-6 space-y-6 ${className}`}>\n      {/* Header with Title and Controls */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Cost Analytics Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Monitor AI usage costs, budget, and optimization opportunities\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Timeframe Selector */}\n          <div className=\"flex bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            {timeframes.map((tf) => (\n              <button\n                key={tf.value}\n                onClick={() => handleTimeframeChange(tf.value)}\n                className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${\n                  timeframe === tf.value\n                    ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'\n                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                }`}\n              >\n                {tf.label}\n              </button>\n            ))}\n          </div>\n\n          {/* Export Controls */}\n          <ExportControls\n            costData={costData}\n            historicalData={historicalData}\n            onExport={async (options) => {\n              console.log('Export requested:', options);\n              // Mock API call - would generate actual export\n              return new Promise(resolve => {\n                setTimeout(() => {\n                  resolve({\n                    url: 'blob:mock-export-url',\n                    filename: `cost-analytics-${new Date().toISOString().split('T')[0]}.${options.format === 'excel' ? 'xlsx' : options.format}`\n                  });\n                }, 2000);\n              });\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Quick Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Spend</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                ${costData.total_cost.toFixed(2)}\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                {costData.timeframe}\n              </p>\n            </div>\n            <div className=\"p-3 bg-blue-100 dark:bg-blue-900/30 rounded-lg\">\n              <CurrencyDollarIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n            </div>\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Monthly Projection</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                ${costData.projected_monthly_cost.toFixed(2)}\n              </p>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                {budget.monthly_limit > 0 ? ((budget.projected_month_end_spend / budget.monthly_limit) * 100).toFixed(1) : 0}% of budget\n              </p>\n            </div>\n            <div className=\"p-3 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n              <ChartBarIcon className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n            </div>\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Tokens</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {(costData.token_usage.total_tokens / 1000).toFixed(0)}K\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                {costData.token_usage.total_tokens > 0 ? ((costData.token_usage.output_tokens / costData.token_usage.total_tokens) * 100).toFixed(0) : 0}% output\n              </p>\n            </div>\n            <div className=\"p-3 bg-purple-100 dark:bg-purple-900/30 rounded-lg\">\n              <InformationCircleIcon className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n            </div>\n          </div>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Daily Average</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                ${historicalData.length > 0 ? (costData.total_cost / historicalData.length).toFixed(2) : '0.00'}\n              </p>\n              <p className=\"text-xs text-blue-600 dark:text-blue-400 mt-1\">\n                per day\n              </p>\n            </div>\n            <div className=\"p-3 bg-orange-100 dark:bg-orange-900/30 rounded-lg\">\n              <ClockIcon className=\"h-6 w-6 text-orange-600 dark:text-orange-400\" />\n            </div>\n          </div>\n        </motion.div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200 dark:border-gray-700\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            return (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id as typeof activeTab)}\n                className={`group inline-flex items-center px-1 py-4 border-b-2 font-medium text-sm ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n                }`}\n              >\n                <Icon\n                  className={`mr-2 h-5 w-5 ${\n                    activeTab === tab.id\n                      ? 'text-blue-500 dark:text-blue-400'\n                      : 'text-gray-400 group-hover:text-gray-500 dark:group-hover:text-gray-300'\n                  }`}\n                />\n                {tab.label}\n              </button>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      <motion.div\n        key={activeTab}\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"mt-6\"\n      >\n        {activeTab === 'overview' && (\n          <div className=\"space-y-6\">\n            {/* Cost Breakdown Cards */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Cost by Model\n                </h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(costData.cost_by_model).map(([model, cost]) => (\n                    <div key={model} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 rounded-full bg-blue-500 mr-3\"></div>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {model}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                          ${cost.toFixed(2)}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {costData.total_cost > 0 ? ((cost / costData.total_cost) * 100).toFixed(1) : 0}%\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                  Cost by Operation\n                </h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(costData.cost_by_operation).map(([operation, cost]) => (\n                    <div key={operation} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-3 h-3 rounded-full bg-green-500 mr-3\"></div>\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white capitalize\">\n                          {operation}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                          ${cost.toFixed(2)}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {costData.total_cost > 0 ? ((cost / costData.total_cost) * 100).toFixed(1) : 0}%\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n                Recent Daily Costs\n              </h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200 dark:border-gray-700\">\n                      <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-900 dark:text-white\">\n                        Date\n                      </th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-900 dark:text-white\">\n                        Cost\n                      </th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-900 dark:text-white\">\n                        Tokens\n                      </th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-900 dark:text-white\">\n                        Requests\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {historicalData.slice(-5).map((day, index) => (\n                      <tr key={day.date} className=\"border-b border-gray-100 dark:border-gray-700\">\n                        <td className=\"py-3 px-4 text-sm text-gray-900 dark:text-white\">\n                          {new Date(day.date).toLocaleDateString()}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm font-medium text-gray-900 dark:text-white text-right\">\n                          ${day.cost.toFixed(2)}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400 text-right\">\n                          {day.tokens.toLocaleString()}\n                        </td>\n                        <td className=\"py-3 px-4 text-sm text-gray-600 dark:text-gray-400 text-right\">\n                          {day.requests}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'charts' && (\n          <CostChart \n            data={historicalData}\n            timeframe={timeframe}\n            className=\"w-full\"\n          />\n        )}\n\n        {activeTab === 'budget' && (\n          <BudgetManager\n            budgetInfo={budget}\n            onUpdateBudget={updateBudget}\n            className=\"w-full\"\n          />\n        )}\n\n        {activeTab === 'projections' && (\n          <CostProjections\n            historicalData={historicalData}\n            monthlyBudget={budget.monthly_limit}\n            className=\"w-full\"\n          />\n        )}\n\n        {activeTab === 'recommendations' && (\n          <OptimizationCards\n            costData={costData}\n            historicalData={historicalData}\n            onImplementRecommendation={async (recommendationId) => {\n              console.log('Implementing recommendation:', recommendationId);\n              // API call to implement recommendation would go here\n              return new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay\n            }}\n            className=\"w-full\"\n          />\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default CostDashboard;","import React from 'react';\nimport { CostDashboard } from '../components/Cost/CostDashboard';\n\nconst AnalyticsPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-8\">\n          Cost Analytics Dashboard\n        </h1>\n        <CostDashboard />\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsPage;"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","TimeScale","Filler","_ref","_metrics$peakDay","data","chartType","timeframe","className","showControls","selectedChartType","setSelectedChartType","React","metric","setMetric","metrics","useMemo","length","trend","trendPercentage","averageCost","totalCost","peakDay","lowestDay","reduce","sum","day","cost","peak","lowest","Infinity","firstHalf","slice","Math","floor","secondHalf","firstHalfAvg","secondHalfAvg","abs","chartData","labels","map","date","datasets","label","tokens","requests","borderColor","backgroundColor","tension","fill","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","chartOptions","responsive","maintainAspectRatio","plugins","legend","display","position","color","usePointStyle","pointStyle","tooltip","mode","intersect","titleColor","bodyColor","borderWidth","cornerRadius","displayColors","callbacks","context","value","parsed","y","concat","dataset","toFixed","toLocaleString","labelColor","scales","x","type","grid","drawBorder","ticks","callback","index","_data$index","format","parseISO","maxTicksLimit","beginAtZero","toString","interaction","axis","animation","duration","easing","chartTypes","icon","PresentationChartLineIcon","CalendarIcon","ChartBarIcon","_jsxs","children","_jsx","m","onClick","Icon","title","ArrowTrendingUpIcon","ArrowTrendingDownIcon","renderChart","commonProps","options","height","Bar","_objectSpread","Line","budgetInfo","onUpdateBudget","isEditing","setIsEditing","useState","saving","setSaving","control","handleSubmit","formState","errors","isDirty","reset","watch","useForm","defaultValues","monthlyLimit","monthly_limit","dailyLimit","alertThreshold","enableAlerts","enableHardStop","emergencyContact","watchedValues","motion","div","initial","opacity","animate","PencilSquareIcon","budget_utilization_percentage","current_month_spend","style","width","min","remaining_budget","projected_month_end_spend","alerts","approaching_limit","over_budget","high_daily_spend","ExclamationTriangleIcon","BellIcon","Cog6ToothIcon","onSubmit","async","error","console","Controller","name","rules","required","message","max","render","_ref2","field","CurrencyDollarIcon","step","placeholder","validate","_ref3","_ref4","pattern","_ref5","_ref6","onChange","checked","_ref7","handleCancel","disabled","CheckCircleIcon","transition","delay","id","actionRequired","timestamp","alert","Date","historicalData","monthlyBudget","selectedScenario","setSelectedScenario","projectionPeriod","setProjectionPeriod","scenarios","multiplier","description","projections","today","recentDays","startOfMonth","endOfMonth","avgRecentCost","dailyGrowthRate","daysToProject","projectionData","i","projectionDate","addDays","forEach","scenario","scenarioProjection","variance","random","projectedCost","confidence","push","summaryMetrics","monthlyProjections","filter","p","scenarioData","avgDailyCost","budgetUtilization","overBudget","filteredProjections","sort","a","b","getTime","replace","pointRadius","time","unit","displayFormats","period","e","target","summary","InformationCircleIcon","some","s","ClockIcon","costData","onImplementRecommendation","setFilter","category","setCategory","implementingIds","setImplementingIds","Set","recommendations","recs","cost_by_model","total_cost","priority","potentialSavings","savingsPercentage","complexity","timeToImplement","impact","actionItems","currentCost","affectedRequests","token_usage","total_tokens","output_tokens","input_tokens","d","priorityOrder","high","medium","low","filteredRecommendations","rec","matchesPriority","matchesCategory","totalSavings","getPriorityColor","getComplexityColor","FireIcon","r","BoltIcon","recommendation","SparklesIcon","LightBulbIcon","getCategoryIcon","isImplementing","has","prev","Array","from","recommendationId","next","delete","handleImplement","implemented","ArrowRightIcon","item","itemIndex","onExport","isOpen","setIsOpen","exporting","setExporting","setOptions","timeRange","includeCharts","includeProjections","includeRecommendations","exportFormats","extension","DocumentTextIcon","size","TableCellsIcon","timeRangeOptions","getEstimatedSize","baseSize","round","getPreview","_timeRangeOptions$fin","selectedFormat","find","f","timeRangeLabel","t","sections","estimatedSize","scale","DocumentArrowDownIcon","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","range","customStartDate","customEndDate","section","Object","keys","formatId","exportOptions","result","link","document","createElement","href","url","download","filename","body","appendChild","click","removeChild","handleExport","API_BASE_URL","fetchBudgetInfo","response","fetch","ok","Error","statusText","json","_data$error3","success","updateBudgetSettings","method","headers","JSON","stringify","budgetData","_data$error4","getCostQueryKeys","all","analytics","filters","historical","budget","defaultFilters","models","undefined","operations","useCostData","_analyticsQuery$error","_historicalQuery$erro","_budgetQuery$error","_budgetMutation$error","arguments","autoRefresh","refreshInterval","initialFilters","queryClient","useQueryClient","setFilters","setError","dateRange","now","start","end","startDate","endDate","startOfDay","subDays","effectiveFilters","analyticsQuery","useQuery","queryKey","queryFn","_filters$models","_filters$operations","params","URLSearchParams","append","join","_data$error","fetchCostAnalytics","staleTime","refetchInterval","retry","failureCount","includes","historicalQuery","_data$error2","fetchHistoricalData","budgetQuery","budgetMutation","useMutation","mutationFn","onSuccess","setQueryData","useEffect","updateFilters","useCallback","newFilters","refetch","Promise","updateBudget","mutateAsync","clearCache","removeQueries","isLoading","combinedError","CostDashboard","activeTab","setActiveTab","setTimeframe","insights","useCostInsights","previousDays","recentAvg","previousAvg","avgCostPerToken","dailyAverage","weeklyChange","mostExpensiveModel","tabs","daily_costs","cost_by_operation","projected_monthly_cost","tf","handleTimeframeChange","newTimeframe","ExportControls","log","resolve","setTimeout","toISOString","split","tab","entries","model","operation","toLocaleDateString","CostChart","BudgetManager","CostProjections","OptimizationCards","AnalyticsPage"],"sourceRoot":""}
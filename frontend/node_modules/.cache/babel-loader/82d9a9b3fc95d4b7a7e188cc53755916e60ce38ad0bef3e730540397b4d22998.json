{"ast":null,"code":"import _objectSpread from\"/Users/james/Documents/Product-RD/brAIn/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useCallback}from'react';const STORAGE_KEY='brain_config_wizard_progress';export const useConfigWizard=initialConfig=>{const[state,setState]=useState({currentStep:0,config:initialConfig||{environment:'development',appName:'',backendPort:8000,frontendPort:3000,baseUrl:'http://localhost:3000',debugMode:false,database:{type:'postgresql',host:'localhost',port:5432,name:'',username:'',password:'',ssl:false,poolSize:10,timeout:30000},apiKeys:{},services:[]},errors:{},isValidating:false,completedSteps:[]});// Load saved progress on mount\nconst loadProgress=useCallback(()=>{try{const saved=localStorage.getItem(STORAGE_KEY);if(saved){const parsed=JSON.parse(saved);return parsed;}}catch(error){console.error('Failed to load saved progress:',error);}return null;},[]);// Save progress to localStorage\nconst saveProgress=useCallback(()=>{try{const toSave={currentStep:state.currentStep,config:state.config,completedSteps:state.completedSteps,timestamp:Date.now()};localStorage.setItem(STORAGE_KEY,JSON.stringify(toSave));}catch(error){console.error('Failed to save progress:',error);}},[state]);// Clear saved progress\nconst clearProgress=useCallback(()=>{try{localStorage.removeItem(STORAGE_KEY);}catch(error){console.error('Failed to clear progress:',error);}},[]);// Set current step\nconst setCurrentStep=useCallback(step=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{currentStep:step}));},[]);// Update configuration\nconst updateConfig=useCallback(updates=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{config:_objectSpread(_objectSpread({},prev.config),updates)}));},[]);// Validate a specific step\nconst validateStep=useCallback(async step=>{var _state$config$apiKeys,_state$config$apiKeys2,_state$config$apiKeys3;setState(prev=>_objectSpread(_objectSpread({},prev),{},{isValidating:true,errors:{}}));const errors={};// Step-specific validation\nswitch(step){case 0:// Environment Step\nif(!state.config.appName){errors.appName='Application name is required';}if(!state.config.baseUrl){errors.baseUrl='Base URL is required';}if(state.config.backendPort===state.config.frontendPort){errors.backendPort='Backend and frontend ports must be different';}break;case 1:// Database Step\nif(state.config.database.type!=='sqlite'){if(!state.config.database.host){errors['database.host']='Database host is required';}if(!state.config.database.name){errors['database.name']='Database name is required';}if(!state.config.database.username){errors['database.username']='Database username is required';}}else{if(!state.config.database.path){errors['database.path']='Database file path is required';}}break;case 2:// API Keys Step\nif(!((_state$config$apiKeys=state.config.apiKeys)!==null&&_state$config$apiKeys!==void 0&&_state$config$apiKeys.openai)){errors['apiKeys.openai']='OpenAI API key is required';}if(!((_state$config$apiKeys2=state.config.apiKeys)!==null&&_state$config$apiKeys2!==void 0&&_state$config$apiKeys2.supabase_url)){errors['apiKeys.supabase_url']='Supabase URL is required';}if(!((_state$config$apiKeys3=state.config.apiKeys)!==null&&_state$config$apiKeys3!==void 0&&_state$config$apiKeys3.supabase_key)){errors['apiKeys.supabase_key']='Supabase key is required';}break;case 3:// Services Step\n// Services validation is optional\nbreak;case 4:// Review Step\n// Final validation happens here\nbreak;}// Simulate async validation\nawait new Promise(resolve=>setTimeout(resolve,500));setState(prev=>_objectSpread(_objectSpread({},prev),{},{isValidating:false,errors,completedSteps:Object.keys(errors).length===0?Array.from(new Set([...prev.completedSteps,step])):prev.completedSteps}));return Object.keys(errors).length===0;},[state.config]);// Validate all steps\nconst validateAllSteps=useCallback(async()=>{for(let i=0;i<5;i++){const isValid=await validateStep(i);if(!isValid)return false;}return true;},[validateStep]);// Get step status\nconst getStepStatus=useCallback(stepIndex=>{if(state.completedSteps.includes(stepIndex))return'completed';if(stepIndex===state.currentStep)return'current';if(stepIndex<state.currentStep)return'visited';return'upcoming';},[state.completedSteps,state.currentStep]);return{currentStep:state.currentStep,config:state.config,errors:state.errors,isValidating:state.isValidating,completedSteps:state.completedSteps,setCurrentStep,updateConfig,validateStep,validateAllSteps,saveProgress,loadProgress,clearProgress,getStepStatus};};","map":{"version":3,"names":["useState","useCallback","STORAGE_KEY","useConfigWizard","initialConfig","state","setState","currentStep","config","environment","appName","backendPort","frontendPort","baseUrl","debugMode","database","type","host","port","name","username","password","ssl","poolSize","timeout","apiKeys","services","errors","isValidating","completedSteps","loadProgress","saved","localStorage","getItem","parsed","JSON","parse","error","console","saveProgress","toSave","timestamp","Date","now","setItem","stringify","clearProgress","removeItem","setCurrentStep","step","prev","_objectSpread","updateConfig","updates","validateStep","_state$config$apiKeys","_state$config$apiKeys2","_state$config$apiKeys3","path","openai","supabase_url","supabase_key","Promise","resolve","setTimeout","Object","keys","length","Array","from","Set","validateAllSteps","i","isValid","getStepStatus","stepIndex","includes"],"sources":["/Users/james/Documents/Product-RD/brAIn/frontend/src/hooks/useConfigWizard.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\ninterface ConfigWizardState {\n  currentStep: number;\n  config: any;\n  errors: Record<string, string>;\n  isValidating: boolean;\n  completedSteps: number[];\n}\n\nconst STORAGE_KEY = 'brain_config_wizard_progress';\n\nexport const useConfigWizard = (initialConfig?: any) => {\n  const [state, setState] = useState<ConfigWizardState>({\n    currentStep: 0,\n    config: initialConfig || {\n      environment: 'development',\n      appName: '',\n      backendPort: 8000,\n      frontendPort: 3000,\n      baseUrl: 'http://localhost:3000',\n      debugMode: false,\n      database: {\n        type: 'postgresql',\n        host: 'localhost',\n        port: 5432,\n        name: '',\n        username: '',\n        password: '',\n        ssl: false,\n        poolSize: 10,\n        timeout: 30000\n      },\n      apiKeys: {},\n      services: []\n    },\n    errors: {},\n    isValidating: false,\n    completedSteps: []\n  });\n\n  // Load saved progress on mount\n  const loadProgress = useCallback(() => {\n    try {\n      const saved = localStorage.getItem(STORAGE_KEY);\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        return parsed;\n      }\n    } catch (error) {\n      console.error('Failed to load saved progress:', error);\n    }\n    return null;\n  }, []);\n\n  // Save progress to localStorage\n  const saveProgress = useCallback(() => {\n    try {\n      const toSave = {\n        currentStep: state.currentStep,\n        config: state.config,\n        completedSteps: state.completedSteps,\n        timestamp: Date.now()\n      };\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n    } catch (error) {\n      console.error('Failed to save progress:', error);\n    }\n  }, [state]);\n\n  // Clear saved progress\n  const clearProgress = useCallback(() => {\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n    } catch (error) {\n      console.error('Failed to clear progress:', error);\n    }\n  }, []);\n\n  // Set current step\n  const setCurrentStep = useCallback((step: number) => {\n    setState(prev => ({ ...prev, currentStep: step }));\n  }, []);\n\n  // Update configuration\n  const updateConfig = useCallback((updates: any) => {\n    setState(prev => ({\n      ...prev,\n      config: { ...prev.config, ...updates }\n    }));\n  }, []);\n\n  // Validate a specific step\n  const validateStep = useCallback(async (step: number): Promise<boolean> => {\n    setState(prev => ({ ...prev, isValidating: true, errors: {} }));\n\n    const errors: Record<string, string> = {};\n\n    // Step-specific validation\n    switch (step) {\n      case 0: // Environment Step\n        if (!state.config.appName) {\n          errors.appName = 'Application name is required';\n        }\n        if (!state.config.baseUrl) {\n          errors.baseUrl = 'Base URL is required';\n        }\n        if (state.config.backendPort === state.config.frontendPort) {\n          errors.backendPort = 'Backend and frontend ports must be different';\n        }\n        break;\n\n      case 1: // Database Step\n        if (state.config.database.type !== 'sqlite') {\n          if (!state.config.database.host) {\n            errors['database.host'] = 'Database host is required';\n          }\n          if (!state.config.database.name) {\n            errors['database.name'] = 'Database name is required';\n          }\n          if (!state.config.database.username) {\n            errors['database.username'] = 'Database username is required';\n          }\n        } else {\n          if (!state.config.database.path) {\n            errors['database.path'] = 'Database file path is required';\n          }\n        }\n        break;\n\n      case 2: // API Keys Step\n        if (!state.config.apiKeys?.openai) {\n          errors['apiKeys.openai'] = 'OpenAI API key is required';\n        }\n        if (!state.config.apiKeys?.supabase_url) {\n          errors['apiKeys.supabase_url'] = 'Supabase URL is required';\n        }\n        if (!state.config.apiKeys?.supabase_key) {\n          errors['apiKeys.supabase_key'] = 'Supabase key is required';\n        }\n        break;\n\n      case 3: // Services Step\n        // Services validation is optional\n        break;\n\n      case 4: // Review Step\n        // Final validation happens here\n        break;\n    }\n\n    // Simulate async validation\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    setState(prev => ({\n      ...prev,\n      isValidating: false,\n      errors,\n      completedSteps: Object.keys(errors).length === 0\n        ? Array.from(new Set([...prev.completedSteps, step]))\n        : prev.completedSteps\n    }));\n\n    return Object.keys(errors).length === 0;\n  }, [state.config]);\n\n  // Validate all steps\n  const validateAllSteps = useCallback(async (): Promise<boolean> => {\n    for (let i = 0; i < 5; i++) {\n      const isValid = await validateStep(i);\n      if (!isValid) return false;\n    }\n    return true;\n  }, [validateStep]);\n\n  // Get step status\n  const getStepStatus = useCallback((stepIndex: number) => {\n    if (state.completedSteps.includes(stepIndex)) return 'completed';\n    if (stepIndex === state.currentStep) return 'current';\n    if (stepIndex < state.currentStep) return 'visited';\n    return 'upcoming';\n  }, [state.completedSteps, state.currentStep]);\n\n  return {\n    currentStep: state.currentStep,\n    config: state.config,\n    errors: state.errors,\n    isValidating: state.isValidating,\n    completedSteps: state.completedSteps,\n    setCurrentStep,\n    updateConfig,\n    validateStep,\n    validateAllSteps,\n    saveProgress,\n    loadProgress,\n    clearProgress,\n    getStepStatus\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}